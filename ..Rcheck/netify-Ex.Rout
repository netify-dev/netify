
R version 4.5.1 (2025-06-13) -- "Great Square Root"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "netify"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('netify')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("add_dyad_vars")
> ### * add_dyad_vars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_dyad_vars
> ### Title: Add dyadic variables to a netify object
> ### Aliases: add_dyad_vars add_edge_attributes
> 
> ### ** Examples
> 
> # Load example data
> data(icews)
> 
> # Cross-sectional example
> icews_10 <- icews[icews$year == 2010, ]
> 
> # Create initial netify object with just the main weight
> verbCoop_net <- netify(
+     icews_10, # data.frame input
+     actor1 = "i", actor2 = "j",
+     symmetric = FALSE,
+     weight = "verbCoop"
+ )
> 
> # Check class
> class(verbCoop_net) # "netify"
[1] "netify"
> 
> # Add additional dyadic variables
> verbCoop_net <- add_dyad_vars(
+     netlet = verbCoop_net, # netify object
+     dyad_data = icews_10, # data.frame with variables to add
+     actor1 = "i", actor2 = "j",
+     dyad_vars = c("matlCoop", "verbConf", "matlConf"),
+     dyad_vars_symmetric = rep(FALSE, 3)
+ )
> 
> # Access the dyadic data structure (returns list)
> dyad_data_structure <- attr(verbCoop_net, "dyad_data")
> class(dyad_data_structure) # "list"
[1] "list"
> names(dyad_data_structure) # Time periods
[1] "1"
> names(dyad_data_structure[["1"]]) # Variables at time 1
[1] "matlCoop" "verbConf" "matlConf"
> 
> # Access specific variable matrix
> matlCoop_matrix <- dyad_data_structure[["1"]][["matlCoop"]]
> class(matlCoop_matrix) # "matrix" "array"
[1] "matrix" "array" 
> dim(matlCoop_matrix)
[1] 152 152
> matlCoop_matrix[1:5, 1:5] # View subset
            Afghanistan Albania Algeria Angola Argentina
Afghanistan           0       1       0      0         0
Albania               4       0       0      0         0
Algeria               0       0       0      2         0
Angola                0       0       0      0         0
Argentina             0       0       1      0         0
> 
> # Longitudinal example
> verbCoop_longit_net <- netify(
+     icews, # data.frame input
+     actor1 = "i", actor2 = "j", time = "year",
+     symmetric = FALSE,
+     weight = "verbCoop"
+ )
> 
> # Add dyadic variables across all time periods
> verbCoop_longit_net <- add_dyad_vars(
+     netlet = verbCoop_longit_net, # netify object
+     dyad_data = icews, # data.frame with longitudinal data
+     actor1 = "i", actor2 = "j", time = "year",
+     dyad_vars = c("matlCoop", "verbConf", "matlConf"),
+     dyad_vars_symmetric = rep(FALSE, 3)
+ )
> 
> # Access data for specific year (returns list)
> year_2002_data <- attr(verbCoop_longit_net, "dyad_data")[["2002"]]
> class(year_2002_data) # "list"
[1] "list"
> names(year_2002_data) # Available variables
[1] "matlCoop" "verbConf" "matlConf"
> 
> # Each variable is stored as a matrix
> matlCoop_2002 <- year_2002_data[["matlCoop"]]
> class(matlCoop_2002) # "matrix" "array"
[1] "matrix" "array" 
> 
> # Example: Add variables from a different source
> ## Not run: 
> ##D # Create a new data.frame with trade information
> ##D trade_data <- data.frame(
> ##D     i = icews_10$i,
> ##D     j = icews_10$j,
> ##D     trade_volume = runif(nrow(icews_10), 0, 1000),
> ##D     trade_balance = rnorm(nrow(icews_10))
> ##D )
> ##D class(trade_data) # "data.frame"
> ##D 
> ##D verbCoop_net <- add_dyad_vars(
> ##D     netlet = verbCoop_net,
> ##D     dyad_data = trade_data,
> ##D     actor1 = "i", actor2 = "j",
> ##D     dyad_vars = c("trade_volume", "trade_balance"),
> ##D     dyad_vars_symmetric = c(FALSE, FALSE)
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("add_node_vars")
> ### * add_node_vars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_node_vars
> ### Title: Add nodal variables to a netify object
> ### Aliases: add_node_vars add_vertex_attributes
> 
> ### ** Examples
> 
> # Load example data
> data(icews)
> 
> # Cross-sectional example
> icews_10 <- icews[icews$year == 2010, ]
> 
> # Create initial netify object
> verbCoop_net <- netify(
+     icews_10, # data.frame input
+     actor1 = "i", actor2 = "j",
+     symmetric = FALSE,
+     weight = "verbCoop"
+ )
> 
> # Prepare nodal data - one row per unique actor
> nvars <- c("i_polity2", "i_gdp", "i_log_gdp", "i_pop", "i_log_pop")
> nodeData <- unique(icews_10[, c("i", nvars)])
> class(nodeData) # "data.frame"
[1] "data.frame"
> nrow(nodeData) # Number of unique actors
[1] 152
> head(nodeData)
                i i_polity2        i_gdp i_log_gdp    i_pop i_log_pop
10    Afghanistan        NA  16047892927  23.49884 28189672  17.15447
2250      Albania         9  10420206418  23.06701  2913021  14.88470
4490      Algeria         2 140977153156  25.67186 35856344  17.39503
6730       Angola        -2  69938841426  24.97089 23364185  16.96671
8970    Argentina         8 552738161802  27.03815 40788453  17.52391
11210     Armenia         5   8513508876  22.86492  2946293  14.89606
> 
> # Add nodal variables
> verbCoop_net <- add_node_vars(
+     netlet = verbCoop_net, # netify object
+     node_data = nodeData, # data.frame with actor attributes
+     actor = "i", # column identifying actors
+     node_vars = nvars # variables to add
+ )
> 
> # Access nodal data (returns data.frame)
> node_data_stored <- attr(verbCoop_net, "nodal_data")
> class(node_data_stored) # "data.frame"
[1] "data.frame"
> head(node_data_stored)
        actor i_polity2        i_gdp i_log_gdp    i_pop i_log_pop
1 Afghanistan        NA  16047892927  23.49884 28189672  17.15447
2     Albania         9  10420206418  23.06701  2913021  14.88470
3     Algeria         2 140977153156  25.67186 35856344  17.39503
4      Angola        -2  69938841426  24.97089 23364185  16.96671
5   Argentina         8 552738161802  27.03815 40788453  17.52391
6     Armenia         5   8513508876  22.86492  2946293  14.89606
> names(node_data_stored) # "actor" plus variable names
[1] "actor"     "i_polity2" "i_gdp"     "i_log_gdp" "i_pop"     "i_log_pop"
> 
> # Longitudinal example
> verbCoop_longit_net <- netify(
+     icews, # data.frame input
+     actor1 = "i", actor2 = "j", time = "year",
+     symmetric = FALSE,
+     weight = "verbCoop"
+ )
> 
> # Prepare longitudinal nodal data - one row per actor-time combination
> nodeData_longit <- unique(icews[, c("i", "year", nvars)])
> class(nodeData_longit) # "data.frame"
[1] "data.frame"
> nrow(nodeData_longit) # Number of actor-time combinations
[1] 1976
> 
> # Add nodal variables with time dimension
> verbCoop_longit_net <- add_node_vars(
+     netlet = verbCoop_longit_net, # netify object
+     node_data = nodeData_longit, # data.frame with longitudinal data
+     actor = "i", # column identifying actors
+     time = "year", # column identifying time
+     node_vars = nvars # variables to add
+ )
> 
> # Access longitudinal nodal data
> node_data_longit <- attr(verbCoop_longit_net, "nodal_data")
> class(node_data_longit) # "data.frame"
[1] "data.frame"
> head(node_data_longit) # Now includes time column
        actor time i_polity2       i_gdp i_log_gdp    i_pop i_log_pop
1 Afghanistan 2002        NA  7555185296  22.74550 21000256  16.86005
2 Afghanistan 2003        NA  8222480251  22.83014 22645130  16.93546
3 Afghanistan 2004        NA  8338755823  22.84418 23553551  16.97479
4 Afghanistan 2005        NA  9275174321  22.95061 24411191  17.01055
5 Afghanistan 2006        NA  9772082812  23.00280 25442944  17.05195
6 Afghanistan 2007        NA 11123202208  23.13230 25903301  17.06988
> 
> # Filter to specific time period
> node_data_2010 <- node_data_longit[node_data_longit$time == "2010", ]
> nrow(node_data_2010) # Number of actors in 2010
[1] 152
> 
> # Example: Add variables from external source
> ## Not run: 
> ##D # Suppose you have additional actor data
> ##D external_data <- data.frame(
> ##D     i = unique(icews_10$i),
> ##D     democracy_score = runif(length(unique(icews_10$i)), 0, 10),
> ##D     trade_openness = runif(length(unique(icews_10$i)), 0, 100)
> ##D )
> ##D 
> ##D verbCoop_net <- add_node_vars(
> ##D     netlet = verbCoop_net,
> ##D     node_data = external_data,
> ##D     actor = "i",
> ##D     node_vars = c("democracy_score", "trade_openness")
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("aggregate_dyad")
> ### * aggregate_dyad
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aggregate_dyad
> ### Title: Aggregate dyadic event data by actor pairs
> ### Aliases: aggregate_dyad
> 
> ### ** Examples
> 
> # Load example data
> data(icews)
> 
> # Example 1: Aggregate multiple events between countries
> # The icews data contains multiple events per country pair
> icews_2010 <- icews[icews$year == 2010, ]
> 
> # Aggregate directed cooperation events
> agg_coop <- aggregate_dyad(
+     dyad_data = icews_2010,
+     actor1 = "i",
+     actor2 = "j",
+     weight = "verbCoop",
+     symmetric = FALSE
+ )
> 
> # Check reduction in observations
> nrow(icews_2010) # Original observations
[1] 22952
> nrow(agg_coop) # Unique directed dyads
[1] 22952
> 
> # Example 2: Create symmetric trade volumes
> trade_data <- data.frame(
+     exporter = c("USA", "USA", "China", "China", "USA", "China"),
+     importer = c("China", "China", "USA", "USA", "UK", "UK"),
+     year = c(2020, 2020, 2020, 2021, 2021, 2021),
+     trade_value = c(100, 50, 75, 80, 120, 90)
+ )
> 
> # Aggregate as total trade between countries (undirected)
> total_trade <- aggregate_dyad(
+     dyad_data = trade_data,
+     actor1 = "exporter",
+     actor2 = "importer",
+     time = "year",
+     weight = "trade_value",
+     symmetric = TRUE
+ )
> 
> # USA-China trade in 2020: 100+50+75 = 225 (appears in both directions)
> total_trade[total_trade$year == 2020, ]
  exporter importer year trade_value
2    China      USA 2020         225
6      USA    China 2020         225
> 
> # Example 3: Aggregate across all time periods
> all_time_trade <- aggregate_dyad(
+     dyad_data = trade_data,
+     actor1 = "exporter",
+     actor2 = "importer",
+     time = NULL, # Aggregate across all years
+     weight = "trade_value",
+     symmetric = FALSE
+ )
> 
> # USA total exports to China: 100+50 = 150
> all_time_trade
  exporter importer trade_value
1      USA    China         150
2    China       UK          90
3      USA       UK         120
4    China      USA         155
> 
> # Example 4: Handle missing values
> trade_data_na <- trade_data
> trade_data_na$trade_value[2] <- NA
> 
> # Ignore missing values (default)
> agg_ignore_na <- aggregate_dyad(
+     dyad_data = trade_data_na,
+     actor1 = "exporter",
+     actor2 = "importer",
+     time = "year",
+     weight = "trade_value",
+     symmetric = FALSE,
+     ignore_missing = TRUE
+ )
> 
> # Include missing values
> agg_with_na <- aggregate_dyad(
+     dyad_data = trade_data_na,
+     actor1 = "exporter",
+     actor2 = "importer",
+     time = "year",
+     weight = "trade_value",
+     symmetric = FALSE,
+     ignore_missing = FALSE
+ )
> 
> # Compare results for USA->China in 2020
> agg_ignore_na[agg_ignore_na$exporter == "USA" &
+     agg_ignore_na$importer == "China" &
+     agg_ignore_na$year == 2020, ] # 100 (ignored NA)
  exporter importer year trade_value
1      USA    China 2020         100
> 
> agg_with_na[agg_with_na$exporter == "USA" &
+     agg_with_na$importer == "China" &
+     agg_with_na$year == 2020, ] # NA
  exporter importer year trade_value
1      USA    China 2020          NA
> 
> 
> 
> 
> cleanEx()
> nameEx("assemble_netify_plot")
> ### * assemble_netify_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: assemble_netify_plot
> ### Title: Assemble netify plot from components
> ### Aliases: assemble_netify_plot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # create a netify object
> ##D net <- netify(my_data, actor1 = "from", actor2 = "to")
> ##D 
> ##D # get plot components
> ##D comp <- plot(net, return_components = TRUE)
> ##D 
> ##D # reassemble the plot
> ##D p <- assemble_netify_plot(comp)
> ##D print(p)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("compare_networks")
> ### * compare_networks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare_networks
> ### Title: Compare networks across time, layers, or attributes
> ### Aliases: compare_networks
> 
> ### ** Examples
> 
> # Load example data
> data(icews)
> 
> # Create networks for different years
> net_2002 <- netify(icews[icews$year == 2002, ],
+     actor1 = "i", actor2 = "j",
+     weight = "matlConf"
+ )
> net_2003 <- netify(icews[icews$year == 2003, ],
+     actor1 = "i", actor2 = "j",
+     weight = "matlConf"
+ )
> 
> # Basic edge comparison
> comp <- compare_networks(list("2002" = net_2002, "2003" = net_2003))
> print(comp)
Network Comparison Results
==========================
Type: cross_network 
Method: correlation 
Networks compared: 2 

Summary Statistics:
   comparison correlation
 2002 vs 2003   0.9431624

Edge Changes:
  2002_vs_2003: 1366 added, 1198 removed, 1866 maintained
> 
> # Structural comparison
> struct_comp <- compare_networks(
+     list(net_2002, net_2003),
+     what = "structure"
+ )
> 
> # Create longitudinal network for automatic temporal comparison
> longit_net <- netify(
+     icews,
+     actor1 = "i", actor2 = "j",
+     time = "year",
+     weight = "verbCoop",
+     output_format = "longit_list"
+ )
> 
> # Automatic temporal comparison
> temporal_comp <- compare_networks(longit_net, method = "all")
