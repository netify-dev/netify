knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
conf_dyads_slice <- conf_dyads %>%
filter(year ==2015)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(peacesciencer)
library(tidyverse)
# create a dyadic data set
conf_dyads <- create_dyadyears(directed = TRUE,
subset_years = c(2010:2015)) %>%
# set data to politically relevant dyads
filter_prd() %>%
# add conflict GML-MID data
add_gml_mids(keep = NULL)
library(peacesciencer)
library(tidyverse)
# create a dyadic data set
conf_dyads <- create_dyadyears(directed = TRUE,
subset_years = c(2010:2015)) %>%
# set data to politically relevant dyads
filter_prd() %>%
# add conflict GML-MID data
add_gml_mids(keep = NULL)
conf_dyads_slice <- conf_dyads %>%
filter(year ==2015)
head(conf_dyads)
head(conf_dyads_slice)
event_mat_time <-
netify(
conf_dyads,
actor1="actor1",actor2= "actor2",
time = "year",
actor_time_uniform=TRUE,
weight=NULL, symmetric=TRUE,
diag_to_NA=TRUE, missing_to_zero=TRUE )
library(netify)
event_mat_time <-
netify(
conf_dyads,
actor1="actor1",actor2= "actor2",
time = "year",
actor_time_uniform=TRUE,
weight=NULL, symmetric=TRUE,
diag_to_NA=TRUE, missing_to_zero=TRUE )
event_mat_time <-
netify(
conf_dyads,
actor1="ccode1",actor2= "ccode2",
time = "year",
actor_time_uniform=TRUE,
weight=NULL, symmetric=TRUE,
diag_to_NA=TRUE, missing_to_zero=TRUE )
event_mat_time
#use the index location
peek(event_mat_time, when_to_peek = 18)
#use the index location
peek(event_mat_time, when_to_peek = 2)
event_data_time_actors <-
netify(
conf_dyads,
actor1="ccode1",actor2= "ccode2",
time = "year",
actor_time_uniform=FALSE,
weight=NULL, symmetric=TRUE,
diag_to_NA=TRUE, missing_to_zero=TRUE )
event_data_time_actors
head(lapply(event_data_time_actors, dim))
is.list(event_data_time_actors)
# cross sectional peek
peek(event_mat)
event_mat <- netify(
conf_dyads,
actor1='ccode1', actor2='ccode2',
weight='gmlmidongoing', sum_dyads=TRUE, symmetric=FALSE,
diag_to_NA=TRUE, missing_to_zero=TRUE)
event_mat
# cross sectional peek
peek(event_mat)
# changing actors peek
peek(event_data_time_actors, when_to_peek = 3)
# changing actors peek
peek(event_data_time_actors, when_to_peek = 1)
# changing actors peek
peek(event_data_time_actors, when_to_peek = 5)
# changing actors peek
peek(event_data_time_actors, when_to_peek = 5, nActors= 10)
?peek
# changing actors peek
peek(event_data_time_actors, when_to_peek = 5, what_rows_to_peek= 10)
# changing actors peek
peek(event_data_time_actors, when_to_peek = 5, what_to_peek = 10 )
sum_event_mat <- summary(event_mat)
sum_event_mat
transitivity = function(mat){
E <- mat-mean(mat,na.rm=TRUE)
D <- 1*(!is.na(E))
E[is.na(E)] <- 0
trans <- sum(diag(E%*%t(E)%*%E))/( sum(diag(D%*%t(D)%*%D))*sd(c(mat),na.rm=TRUE)^3)
return(trans)
}
cycles = function(mat){
E <- mat-mean(mat,na.rm=TRUE)
D <- 1*(!is.na(E))
E[is.na(E)] <- 0
cycles <- sum(diag(E%*%E%*%E))/( sum(diag(D%*%D%*%D))*sd(c(mat),na.rm=TRUE)^3)
return(cycles)
}
sum_event_mat <- summary(event_mat, cycles=cycles, transitivity=transitivity)
sum_event_mat
sum_event_mat
network_sum <- summary_actor(event_mat)
network_sum
?plot_networkStats
nets_time_sum <- summary(event_mat_time)
library(ggplot2)
plot_networkStats(nets_time_sum, longitudinal = TRUE, net_stat=c("sdSendEff", "sdRecEff")) +
labs(title = "Network-level Statistics") +
theme_bw() # you can overwrite the theme and other ggplot functions
nets_time_sum <- summary(event_mat_time)
plot_actorStats(network_sum, longitudinal=FALSE, net_stat=c('average_degree_in','average_degree_out'),
actor_names=c('Government of Nigeria', 'Marwa Ethnic Militia (Nigeria)'), toplist_n=NULL)
unique(conf_dyads$ccode1)
head(conf_dyads)
plot_actorStats(network_sum, longitudinal=FALSE, net_stat=c('average_degree_in','average_degree_out'),
actor_names=c('2', '20'), toplist_n=NULL)
plot_actorStats(network_sum, longitudinal=FALSE, net_stat=c('average_degree_in','average_degree_out'),
actor_names=c('2', '20', '70'), toplist_n=NULL)
plot_actorStats(network_sum, longitudinal=FALSE, net_stat=c('average_degree_in','average_degree_out'),
actor_names=c('90', '20', '70'), toplist_n=NULL)
plot_actorStats(network_sum, longitudinal=FALSE, net_stat=c('average_degree_in','average_degree_out'),
actor_names=c('2', '710', '200'), toplist_n=NULL)
plot_actorStats(network_sum, longitudinal=FALSE, net_stat=c('average_degree_in','average_degree_out'),
actor_names=c('2', '710', '200', '365'), toplist_n=NULL)
plot_actorStats(network_sum, longitudinal=FALSE, net_stat='average_degree_in', toplist_n=10)
igraph_obj <- prep_for_igraph(event_mat)
igraph_obj
igraph_obj <- prep_for_igraph(event_mat)
igraph_obj
plot(igraph_obj)
network_obj <- prep_for_network(event_mat)
network_obj
library(ggnet2
)
install.packages(ggnet2)
install.packages(ggnet)
install.packages("ggnet2")
install.packages("ggnet")
library(ggraph)
install.packages("ggraph")
net <- simplify(event_mat, remove.multiple = F, remove.loops = T)
net <- simplify(igraph_obj, remove.multiple = F, remove.loops = T)
plot(igraph_obj, edge.arrow.size=.4,vertex.label=NA)
plot(igraph_obj, edge.arrow.size=.4)
event_mat
peek(event_mat)
peek(event_mat,50)
rowsums(event_mat)
rowSums(event_mat)
rowSums(event_mat, rm.na=TRUE)
?rowSUms
?rowSums
rowSums (x, na.rm = TRUE, dims = 1)
rowSums (event_mat, na.rm = TRUE, dims = 1)
graph_attr(igraph_obj, "layout") <- layout_with_lgl
library(igraph)
graph_attr(igraph_obj, "layout") <- layout_with_lgl
plot(igraph_obj)
graph_attr(igraph_obj, "layout") <- layout_with_lgl
plot(igraph_obj)
plot(igraph_obj, edge.arrow.size=.4,vertex.label=NA)
rm_iso = which(degree(igraph_obj)==0)
igraph_obj = delete.vertices(igraph_obj, rm_oso)
igraph_obj = delete.vertices(igraph_obj, rm_iso)
plot(igraph_obj, edge.arrow.size=.4,vertex.label=NA)
graph_attr(igraph_obj, "layout") <- layout_with_lgl
plot(igraph_obj, edge.arrow.size=.4,vertex.label=NA)
plot(igraph_obj, edge.arrow.size=.4)
# install devtools
if (!require(devtools)) {
install.packages("devtools")
}
library(devtools)
install_github("netify-dev/netify")
library(devtools)
install_github("netify-dev/netify")
install_github("netify-dev/netify")
install_github("netify-dev/netify")
library(usethis)
library(roxygen2)
library(Rcpp)
library(devtools)
install_github("netify-dev/netify")
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
library(devtools)
install_github("netify-dev/netify")
library(netify)
user = Sys.info()['user']
pth = paste0("/Users/dorffc/projectsGit/netify")
setwd(pth)
library(usethis)
library(roxygen2)
library(Rcpp)
library(devtools)
#document()
install()
knitr::opts_chunk$set(echo = TRUE)
library(netify)
library(peacesciencer)
library(tidyverse)
# organize external data for peacesciencer
peacesciencer::download_extdata()
cow_dyads <- create_dyadyears(
subset_years = c(1995:2014)
) %>%
# add mids
add_cow_mids() %>%
# add capital distance
add_capital_distance() %>%
# add democracy
add_democracy() %>%
# add gdp
add_sdp_gdp()
mid_long_network <- netify(
cow_dyads,
actor1='ccode1', actor2='ccode2', time='year',
weight='cowmidonset',
actor_time_uniform=FALSE,
sum_dyads=FALSE, symmetric=TRUE,
diag_to_NA=TRUE, missing_to_zero=FALSE,
nodal_vars = c('v2x_polyarchy1', 'v2x_polyarchy2'),
dyad_vars = c('capdist'),
dyad_vars_symmetric = c(TRUE, FALSE)
)
# create a vector of nodal data
node_data <- unique(cow_dyads[,c("ccode1", "year", "wbgdppc2011est2")])
node_data$wbgdppc2011est2_log <- log(node_data$wbgdppc2011est2)
# add nodal variable to netlet object
mid_long_network <- add_nodal(
netlet = mid_long_network,
node_data = node_data,
actor = "ccode1",
time = "year"
)
peek(mid_long_network, when_to_peek = c('2012'), what_to_peek = 30)
# create data.frame that provides network-level summary stats
# for each year of the network
mid_long_summary <- summary(mid_long_network)
plot_networkStats(mid_long_summary,
longitudinal = TRUE,
net_stat = "dens")
# every year & every actor (messy!)
summary_actor_mids <- summary_actor(mid_long_network)
# top 5 GDP countries (USA, China, Japan, Germany, India)
top_5 <- c("2", "710", "740", "255", "750")
# zoom in on specific parts of the network for actor viz
mid_subset <- summary_actor_mids %>%
filter(actor %in% top_5)
plot_actorStats(mid_subset,
net_stat = "degree",
longitudinal = TRUE) +
facet_wrap(~actor)
# default plot
plot.netify(mid_long_network)
# a little cleaner
plot(
mid_long_network,
edge_color='grey',
node_size=2
)
plot.netify(mid_long_network)
plot(
mid_long_network,
edge_color='grey',
node_size=1
)
plot(
mid_long_network,
edge_color='grey',
node_size=5
)
plot(
mid_long_network,
edge_color='grey',
node_size=9
)
plot(
mid_long_network,
edge_color='grey',
node_size=1
)
plot(
mid_long_network,
edge_color='grey',
node_size=2
)
mid_long_network = add_nodal(
mid_long_network,
summary_actor(mid_long_network),
actor='actor', time='time',
node_vars = c('degree', 'prop_ties', 'eigen_vector'),
)
plot(
mid_long_network,
edge_color='grey',
node_size_var='degree'
)
plot(
mid_long_network,
edge_color='grey',
node_size_var='degree',
node_color_var='v2x_polyarchy1'
) +
scale_color_gradient2()
library(countrycode)
cowns = countrycode(
c('United States', 'China', 'Russia', 'France', 'Germany', 'United Kingdom'),
'country.name', 'cown')
cabbs = countrycode(cowns, 'cown', 'iso3c')
plot(
mid_long_network,
edge_color='grey',
node_size_var='degree',
node_color_var='v2x_polyarchy1',
select_text = cowns,
select_text_display = cabbs,
text_size = 5
) +
scale_color_gradient2()
plot(
mid_long_network,
edge_color='grey',
add_points = FALSE,
add_label = TRUE,
label_size_var='degree',
label_color = 'white',
label_fill_var='v2x_polyarchy1'
) +
scale_color_gradient2()
plot(
mid_long_network,
edge_color='grey',
node_size_var='degree',
node_color_var='v2x_polyarchy1'
) +
scale_color_gradient2()
plot(
mid_long_network,
edge_color='grey',
node_size_var='degree',
node_color_var='v2x_polyarchy1'
) +
scale_color_gradient2()
test<- plot(
mid_long_network,
edge_color='grey',
node_size_var='degree',
node_color_var='v2x_polyarchy1'
) +
scale_color_gradient2()
test
plot(
mid_long_network,
edge_color='grey',
add_points = FALSE,
add_label = TRUE,
label_size_var='degree',
label_color = 'white',
label_fill_var='v2x_polyarchy1'
) +
scale_color_gradient2()
load("ucdp_ged_mexico.rda")
getwd()
load("/vignettes/ucdp_ged_mexico.rda")
load("/vignettes/ucdp_ged_mexico.rda")
getwd()
load("ucdp_ged_mexico.rda")
load("netify/vignettes/ucdp_ged_mexico.rda")
getwd()
load("~/ProjectsGit/netify/vignettes/ucdp_ged_mexico.rda")
load("vignettes/ucdp_ged_mexico.rda")
# default to number of events
mex_network <- netify(
dyad_data = mexico,
actor1 = 'side_a',
actor2 = 'side_b',
symmetric = TRUE,
sum_dyads = TRUE,
diag_to_NA = TRUE,
missing_to_zero = TRUE
)
# A summary of the network object
summary(mex_network)
# weight using a variable
mex_network_civ <- netify(
dyad_data = mexico,
actor1 = 'side_a',
actor2 = 'side_b',
weight = 'deaths_civilians',
symmetric = TRUE,
sum_dyads = TRUE,
diag_to_NA = TRUE,
missing_to_zero = TRUE
)
summary(mex_network_civ)
select_names <- rownames(mex_network)
select_names
# Select 10 random indices from 1 to the length of select_names
random_indices <- sample(length(select_names), 10)
# select 10 random names using the random indices
random_names <- select_names[random_indices]
plot(mex_network,
select_text = random_names)
plot(mex_network_civ,
add_text = TRUE)
library(igraph)
i_close = function(x){ ig = prep_for_igraph(x) ; igraph::closeness(ig) }
closeness = i_close(mex_network)
# add to summary
sum_mex <- summary_actor(mex_network, other_stats = list(closeness=closeness))
# add to summary
sum_mex <- summary_actor(mex_network, other_stats = list(closeness=closeness))
sum_mex
random_names <- select_names[random_indices]
plot(mex_network,
add_text = TRUE)
plot(mex_network,
select_text = "random_names")
cabbs
head(cabbs)
plot(mex_network,
select_text = random_names,
select_text_display = cabbs)
plot(mex_network,
select_text = random_names,
select_text_display = random_names)
# select 10 random indices from 1 to the length of select_names
random_indices <- sample(length(select_names), 10)
# select 10 random names using the random indices
random_names <- select_names[random_indices]
plot(mex_network,
add_text = TRUE)
plot(mex_network,
select_text = random_names,
select_text_display = random_names)
# select 10 random indices from 1 to the length of select_names
set.seed(12345)
random_indices <- sample(length(select_names), 10)
# select 10 random names using the random indices
random_names <- select_names[random_indices]
plot(mex_network,
add_text = TRUE)
plot(mex_network,
select_text = random_names,
select_text_display = random_names)
plot(mex_network_civ,
add_text = TRUE)
plot(mex_network_civ,
add_text = TRUE,
select_text = random_names,
select_text_display = random_names))
# different edges, different netify object:
plot(mex_network_civ,
select_text = random_names,
select_text_display = random_names)
load("vignettes/ucdp_ged_mexico.rda")
plot(
mid_long_network,
edge_color='grey',
node_size_var='degree',
node_color_var='v2x_polyarchy1'
) +
scale_color_gradient2()
load("vignettes/ucdp_ged_mexico.rda")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rmarkdown::dirname(rmarkdown::input$file))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = here::here())
set.seed(12345)
random_indices <- sample(length(select_names), 10)
# select 10 random names using the random indices
random_names <- random_indices[random_indices]
plot(mex_network,
add_text = TRUE)
plot(mex_network,
select_text = random_names,
select_text_display = random_names)
random_names
random_indices
elect_names <- rownames(mex_network)
set.seed(12345)
random_indices <- sample(length(select_names), 10)
# select 10 random names using the random indices
random_names <- select_names[random_indices]
plot(mex_network,
add_text = TRUE)
plot(mex_network,
select_text = random_names,
select_text_display = random_names)
# different edges, highlight same actors, different netify object:
plot(mex_network_civ,
select_text = random_names,
select_text_display = random_names)
