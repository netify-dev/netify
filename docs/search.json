[{"path":"/PKGDOWN.html","id":null,"dir":"","previous_headings":"","what":"Instructions for deploying pkgdown website","title":"Instructions for deploying pkgdown website","text":"website netify uses pkgdown package. full manual pkgdown available .","code":""},{"path":[]},{"path":"/articles/netify.html","id":"structuring-data-for-conflictnet","dir":"Articles","previous_headings":"","what":"Structuring data for conflictNet","title":"Introduction to the conflictNet Package","text":"","code":"data(event_data) head(event_data) #>   data_id            cname cowc event_date year #> 1 6714129          Somalia  SOM 2019-12-31 2019 #> 2 7187987 Congo - Kinshasa  DRC 2019-12-31 2019 #> 3 7210326            Sudan  SUD 2019-12-31 2019 #> 4 7122303 Congo - Kinshasa  DRC 2019-12-31 2019 #> 5 7099295      South Sudan  SSD 2019-12-31 2019 #> 6 6714017          Somalia  SOM 2019-12-31 2019 #>                                                                 actor1 #> 1                                                           Al Shabaab #> 2          Military Forces of the Democratic Republic of Congo (2019-) #> 3                       Awlad Mansour Misseriya Ethnic Militia (Sudan) #> 4          Military Forces of the Democratic Republic of Congo (2019-) #> 5 SPLM-In Opposition: Sudan People's Liberation Movement-In Opposition #> 6                                                           Al Shabaab #>                                                                                    actor2 #> 1                                                      Military Forces of Somalia (2017-) #> 2                                                           ADF: Allied Democratic Forces #> 3                                             Awlad Gaid Misseriya Ethnic Militia (Sudan) #> 4                                                             Mayi Mayi Militia (Charles) #> 5 SPLM-In Opposition: Sudan People's Liberation Movement-In Opposition (Splinter Faction) #> 6                              AMISOM: African Union Mission in Somalia (2007-) (Burundi) #>           admin1   admin2 latitude longitude fatalities source #> 1 Lower Shabelle  Afgooye   2.3963   45.0159          0  acled #> 2      Nord-Kivu     Beni   0.6287   29.9411          1  acled #> 3   South Darfur   Bielel  12.2443   25.1096          3  acled #> 4      Nord-Kivu Rutshuru  -1.1869   29.4461          0  acled #> 5     Upper Nile   Maiwut   8.3833   33.7833          4  acled #> 6 Lower Shabelle    Marka   1.7493   44.7437          0  acled"},{"path":"/articles/netify.html","id":"conflictnetget_adjacency","dir":"Articles","previous_headings":"Structuring data for conflictNet","what":"conflictNet::get_adjacency()","title":"Introduction to the conflictNet Package","text":"Using get_adjacency(), can convert dyadic data network various formats including cross-sectional, undirected unweighted network cross-sectional, undirected weighted network","code":""},{"path":"/articles/netify.html","id":"arguments","dir":"Articles","previous_headings":"Structuring data for conflictNet > conflictNet::get_adjacency()","what":"Arguments","title":"Introduction to the conflictNet Package","text":"function takes single data.frame: dyad_data. dyad_data dyadic data.frame least following variables: actor1: character indicating actor 1 variable data actor2: character indicating actor 2 variable data Others: weight: character indicating whether weighted edges, default weight=NULL. symmetric: logical indicating whether ties symmetric, default TRUE isolates: logical indicating whether include isolates diag_to_NA: logical indicating whether diagonals set NA, default TRUE missing_to_zero logical indicating whether missing values set zero, default TRUE returns adjacency matrix using R’s matrix class.","code":"get_adjacency(   dyad_data,   actor1, actor2,   weight=NULL, symmetric=TRUE,   isolates=FALSE, diag_to_NA=TRUE, missing_to_zero=TRUE )"},{"path":"/articles/netify.html","id":"longitudinal-variants-of-get_adjacency","dir":"Articles","previous_headings":"Structuring data for conflictNet > conflictNet::get_adjacency()","what":"Longitudinal variants of get_adjacency()","title":"Introduction to the conflictNet Package","text":"longitudinal networks two variants function:","code":""},{"path":"/articles/netify.html","id":"conflictnetget_adjacency_list","dir":"Articles","previous_headings":"Structuring data for conflictNet > conflictNet::get_adjacency() > Longitudinal variants of get_adjacency()","what":"conflictNet::get_adjacency_list()","title":"Introduction to the conflictNet Package","text":"get_adjacency_list returns list adjacency matrices actor composition network can vary time. function additional parameters: time: character indicating time variable data actor_time_uniform: logical indicating whether assume actors across full time series observed data TRUE means actors across full time series observed data. FALSE means actors come observed data “existence” determined data, meaning first year existence determined time point first event last year existence time point last event. actor_years: data.frame indicating start end time point every actor, can created using get_actor_time_info.R, unless provided estimated user based choice actor_time_uniform.","code":"get_adjacency_list(   dyad_data,   actor1, actor2,     time,     actor_time_uniform=TRUE,     actor_years=NULL,     weight=NULL, symmetric=TRUE,   isolates=FALSE, diag_to_NA=TRUE, missing_to_zero=TRUE )"},{"path":"/articles/netify.html","id":"conflictnetget_adjacency_array","dir":"Articles","previous_headings":"Structuring data for conflictNet > conflictNet::get_adjacency() > Longitudinal variants of get_adjacency()","what":"conflictNet::get_adjacency_array()","title":"Introduction to the conflictNet Package","text":"get_adjacency_array returns three-dimensional array first two dimensions correspond actors third time. function used actor composition static time.","code":"get_adjacency_array <- function(   dyad_data,   actor1, actor2,     time,     weight=NULL, symmetric=TRUE,   isolates=FALSE, diag_to_NA=TRUE, missing_to_zero=TRUE )"},{"path":"/articles/netify.html","id":"example-data","dir":"Articles","previous_headings":"Structuring data for conflictNet","what":"Example data","title":"Introduction to the conflictNet Package","text":"basic example shows convert dyadic dataset network format using yearly dataset conflictual events Nigeria ACLED. Note `get_adjacency()’ support tibbles. Please convert tibble data frame first.","code":"library(tidyverse) library(igraph) conflict_nigeria <- event_data %>% filter(cname == 'Nigeria') %>% as.data.frame() head(conflict_nigeria) #>   data_id   cname cowc event_date year #> 1 6713513 Nigeria  NIG 2019-12-28 2019 #> 2 6713514 Nigeria  NIG 2019-12-28 2019 #> 3 7073765 Nigeria  NIG 2019-12-27 2019 #> 4 7073766 Nigeria  NIG 2019-12-25 2019 #> 5 7261566 Nigeria  NIG 2019-12-24 2019 #> 6 6713511 Nigeria  NIG 2019-12-24 2019 #>                                                                                        actor1 #> 1                                                         Imiakabu Communal Militia (Nigeria) #> 2                                                         Imiakabu Communal Militia (Nigeria) #> 3                                                          Military Forces of Nigeria (2015-) #> 4                                                          Military Forces of Nigeria (2015-) #> 5                                                          Unidentified Armed Group (Nigeria) #> 6 Islamic State (West Africa) and/or Boko Haram - Jamatu Ahli is-Sunnah lid-Dawatai wal-Jihad #>                                                                                        actor2 #> 1                                                            Police Forces of Nigeria (2015-) #> 2                                                            Police Forces of Nigeria (2015-) #> 3 Islamic State (West Africa) and/or Boko Haram - Jamatu Ahli is-Sunnah lid-Dawatai wal-Jihad #> 4 Islamic State (West Africa) and/or Boko Haram - Jamatu Ahli is-Sunnah lid-Dawatai wal-Jihad #> 5                                                     Civilian JTF: Civilian Joint Task Force #> 6                                                          Military Forces of Nigeria (2015-) #>    admin1      admin2 latitude longitude fatalities source #> 1     Edo Etsako East   7.2118    6.4366          0  acled #> 2     Edo Etsako East   7.2118    6.4366          5  acled #> 3   Borno        Bama  11.5221   13.6856          1  acled #> 4   Borno       Gwoza  11.2500   13.4167         10  acled #> 5 Bayelsa       Ogbia   4.7832    6.3132          1  acled #> 6   Borno         Biu  10.6779   12.1569          2  acled"},{"path":"/articles/netify.html","id":"a-cross-sectional-undirected-and-unweighted-network","dir":"Articles","previous_headings":"Structuring data for conflictNet","what":"A cross-sectional, undirected and unweighted network","title":"Introduction to the conflictNet Package","text":"get_adjacency() return adjacency matrix 1s whenever tie pair actors 0s otherwise point years included data.","code":"df_adj <- get_adjacency(conflict_nigeria, \"actor1\", \"actor2\",                         symmetric = TRUE,                         diag_to_NA = FALSE) #> ! Warning: When `weight` is not supplied, network edges represent binary interactions between actors."},{"path":"/articles/netify.html","id":"a-cross-sectional-undirected-and-weighted-network","dir":"Articles","previous_headings":"Structuring data for conflictNet","what":"A cross-sectional, undirected and weighted network","title":"Introduction to the conflictNet Package","text":"create weighted network, need specify weight. example, use fatalities weight variable begin generating sum fatalities across dataset using dplyr. Specify parameter weight = \"fatalities\" everything else .","code":"conflict_nigeria_weighted <- conflict_nigeria %>%   group_by(actor1, actor2) %>%   summarise(fatalities=sum(fatalities),             year = unique(year)) %>%   data.frame() #> `summarise()` has grouped output by 'actor1', 'actor2'. You can override using #> the `.groups` argument.  head(conflict_nigeria_weighted) #>                              actor1                              actor2 #> 1 Abogbe Communal Militia (Nigeria) Agbaduma Communal Militia (Nigeria) #> 2                    Abugbe (Agatu)                    Agbaduma (Agatu) #> 3               AC: Action Congress          AD: Alliance for Democracy #> 4               AC: Action Congress                        Labour Party #> 5               AC: Action Congress       PDP: Peoples Democratic Party #> 6               AC: Action Congress       PDP: Peoples Democratic Party #>   fatalities year #> 1          3 2019 #> 2         25 2019 #> 3          0 2013 #> 4          0 2013 #> 5          4 2013 #> 6          4 2012 df_fatal_adj <- get_adjacency(conflict_nigeria_weighted, \"actor1\", \"actor2\",                               weight=\"fatalities\", symmetric = TRUE,                               diag_to_NA = FALSE) #> ! Warning: repeating dyads in the dataset. Set `sumDyad = TRUE` to sum the `weight` variable across multiple repeating dyads."},{"path":"/articles/netify.html","id":"a-longitudinal-undirected-and-unweighted-network","dir":"Articles","previous_headings":"Structuring data for conflictNet","what":"A longitudinal, undirected and unweighted network","title":"Introduction to the conflictNet Package","text":"setting longitudinal = TRUE, function returns list adjacency matrices time points (.e. years) dataset. important choice user needs make actor composition network time. default assumptions get_adjacency_list actors static time. , however, actor_time_uniform set FALSE function actors exist time points including first last recorded interaction. Users can also specify actors enter exit network creating data.frame three columns: actor, ‘min_time’, max_time. example data.frame look like: construct list adjacency matrices assuming actor exists across duration data.","code":"#>                                    actor min_time max_time #> 1 Abakpa Nike Communal Militia (Nigeria)     2018     2018 #> 2     Abanwan Communal Militia (Nigeria)     2018     2018 #> 3  Abba-Omega Communal Militia (Nigeria)     2019     2019 #> 4      Abogbe Communal Militia (Nigeria)     2019     2019 #> 5                         Abugbe (Agatu)     2019     2019 #> 6                    AC: Action Congress     2008     2013 long_adj <- get_adjacency_list(conflict_nigeria, \"actor1\", \"actor2\",                                 time = \"year\",                      weight=NULL, symmetric = TRUE,                                          actor_time_uniform=TRUE,                      diag_to_NA = FALSE) #> ! Warning: `actor_time_uniform` is set to TRUE. If the number of actors DO NOT change over time in your network, use `get_adjacency_array` (see documentation). #> ! Warning: repeating dyads in the dataset. Supply `weight` variable AND set `sumDyads=TRUE` (see documentation section XX)."},{"path":"/articles/netify.html","id":"a-longitudinal-undirected-and-weighted-network","dir":"Articles","previous_headings":"Structuring data for conflictNet","what":"A longitudinal, undirected and weighted network","title":"Introduction to the conflictNet Package","text":"One additional longitudinal example weighted network.","code":"long_conflict_nigeria_weighted <- conflict_nigeria %>%   group_by(actor1, actor2, year) %>%   summarise(fatalities=sum(fatalities)) %>%   data.frame() #> `summarise()` has grouped output by 'actor1', 'actor2'. You can override using #> the `.groups` argument. head(long_conflict_nigeria_weighted) #>                              actor1                              actor2 year #> 1 Abogbe Communal Militia (Nigeria) Agbaduma Communal Militia (Nigeria) 2019 #> 2                    Abugbe (Agatu)                    Agbaduma (Agatu) 2019 #> 3               AC: Action Congress          AD: Alliance for Democracy 2013 #> 4               AC: Action Congress                        Labour Party 2013 #> 5               AC: Action Congress       PDP: Peoples Democratic Party 2012 #> 6               AC: Action Congress       PDP: Peoples Democratic Party 2013 #>   fatalities #> 1          3 #> 2         25 #> 3          0 #> 4          0 #> 5          0 #> 6          4 df_long_unweight_adj <- get_adjacency_list(     long_conflict_nigeria_weighted, \"actor1\", \"actor2\", time = \"year\", weight=\"fatalities\") #> ! Warning: repeating dyads in the dataset. Supply `weight` variable AND set `sumDyads=TRUE` (see documentation section XX)."},{"path":"/articles/netify.html","id":"network-visualization","dir":"Articles","previous_headings":"Structuring data for conflictNet","what":"Network visualization","title":"Introduction to the conflictNet Package","text":"Using adjacency matrix matrices, can create nice-looking(??) network visualization. use igraph:: visualize network.","code":""},{"path":"/articles/netify.html","id":"network-graph","dir":"Articles","previous_headings":"Structuring data for conflictNet","what":"Network graph","title":"Introduction to the conflictNet Package","text":"cross-sectional, undirected, unweighted network visualization:  cross-sectional, undirected, weighted network visualization:","code":"# convert into an igraph object N <- graph_from_adjacency_matrix(df_adj, mode = \"undirected\") # delete isolates N <- delete.vertices(N, which(degree(N)==0)) #set layout l = layout_with_fr(N) par(mar=c(0,0,0,0)) plot(simplify(N), # remove loops and multiple edges      vertex.color=adjustcolor(\"#cc5500\", alpha.f=.5),      vertex.size=5*(degree(N)/10), vertex.frame.color = NA, vertex.label = \"\",      edge.color=\"grey80\", layout = l) N2 <- graph_from_adjacency_matrix(df_fatal_adj, mode = \"undirected\", weighted = TRUE) N2 <- delete.vertices(N2, which(degree(N2)==0))  l = layout_with_fr(N2) par(mar=c(0,0,0,0)) plot(simplify(N2), vertex.color=adjustcolor(\"#cc5500\", alpha.f=.5),      vertex.size=5*(degree(N2)/10), vertex.frame.color = NA, vertex.label = \"\",      edge.width=log(E(N2)$weight/10),      edge.color=\"grey80\",      layout=l)"},{"path":"/articles/netify.html","id":"centrality-measures","dir":"Articles","previous_headings":"Structuring data for conflictNet","what":"Centrality measures","title":"Introduction to the conflictNet Package","text":"top 20 actors based eigenvector centrality scores.  List object like long_adj longitudinal, undirected unweighted network needs bit work: shows transitivity, average degree, average distance scores Nigerian conflict network 2001 2019.","code":"V(N)$degree <- degree(N)                        # Degree centrality V(N)$eig <- eigen_centrality(N)$vector          # Eigenvector centrality  centrality <- data.frame(row.names   = V(N)$name,                          degree      = V(N)$degree,                          eigenvector = V(N)$eig)  centrality <- centrality[order(row.names(centrality)),] eigen_top20 <- head(centrality[order(-centrality$eigenvector),], n=20) head(eigen_top20) #>                                         degree eigenvector #> Pastoralists (Nigeria)                      81   1.0000000 #> Unidentified Armed Group (Nigeria)          72   0.9562966 #> Fulani Ethnic Militia (Nigeria)             74   0.9364504 #> Police Forces of Nigeria (1999-2015)        54   0.7512722 #> Military Forces of Nigeria (1999-2015)      39   0.6530462 #> Unidentified Communal Militia (Nigeria)     19   0.5598625 eigen_p <- eigen_top20 %>%   rownames_to_column('actor') %>%   ggplot(aes(x = reorder(actor, eigenvector), y = eigenvector)) +   geom_bar(stat = \"identity\", position=position_dodge()) +   labs(     x = \"\",     y = \"Eigenvector Centrality Score\",     title = \"\",     color = \"\") +     coord_flip() +   theme_bw() +   theme(     panel.border = element_blank(),     axis.ticks = element_blank())  eigen_p # convert into igraph format using lapply graph_list = lapply(long_adj, function(x){ graph_from_adjacency_matrix(x) } )  # create a function for transitivity, average degree, and average distance centrality_funcs <- function(x) {   c(transitivity = transitivity(x),     average_degree = mean(degree(x)),     distance = mean_distance(x)) }  # put graph_list into a centrality_funcs centrality_list = lapply(graph_list, centrality_funcs) # convert centrality_list into a matrix centrality_scores = t(do.call(cbind, centrality_list)) # convert into a data.frame centrality_scores = as.data.frame(centrality_scores) # manually create a year variable centrality_scores$year = 2001:2019 # reshape the data.frame for plotting centrality_scores <- centrality_scores %>%   pivot_longer(     cols = c(\"transitivity\", \"average_degree\", \"distance\")) head(centrality_scores) #> # A tibble: 6 × 3 #>    year name            value #>   <int> <chr>           <dbl> #> 1  2001 transitivity   0.0517 #> 2  2001 average_degree 0.258  #> 3  2001 distance       1.78   #> 4  2002 transitivity   0.0273 #> 5  2002 average_degree 0.330  #> 6  2002 distance       3.30 central_plot <- ggplot(centrality_scores, aes(x = year,            y = value)) +   geom_line() +   geom_point() +   labs(     x = \"\",     y = \"\",     title = \"\",     color = \"\") +   theme_bw() +   theme(     panel.border = element_blank(),     axis.ticks = element_blank()) +   facet_wrap(name~., scales = \"free\", ncol = 1) central_plot"},{"path":"/articles/netify_bridge.html","id":"using-netify-as-a-bridge-to-other-network-packages","dir":"Articles","previous_headings":"","what":"Using netify as a bridge to other network packages","title":"Using a netify as a bridge to other network packages","text":"netify allows us analyze network data network packages. example, can simply use netlet object use amen functions build additive multiplicative effects network models (AMEN models). network packages, netfiy provides prep functions reshape netlet object make ready analysis: - prep_for_igraph: igraph - prep_for_network: network need simply providing netlet object prep functions! igraph: network:","code":"igraph_obj <- prep_for_igraph(event_mat) igraph_obj #> IGRAPH 3737fba UNW- 3205 5351 --  #> + attr: name (v/c), weight (e/n) #> + edges from 3737fba (vertex names): #> [1] 'Al Shabaab' Militia                  --Military Forces of the Democratic Republic of Congo (2001-2019) #> [2] 3R                                    --anti-Balaka                                                     #> [3] Aaro Aaro                             --Al-Shabaab                                                      #> [4] Aasi Clan Militia (Somalia)           --Abtisame Clan Militia (Somalia)                                 #> [5] Abakpa Nike Communal Militia (Nigeria)--Ezza Ethnic Militia (Nigeria)                                   #> + ... omitted several edges network_obj <- prep_for_network(event_mat) network_obj #>  Network attributes: #>   vertices = 3205  #>   directed = FALSE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   total edges= 5351  #>     missing edges= 0  #>     non-missing edges= 5351  #>  #>  Vertex attribute names:  #>     vertex.names  #>  #>  Edge attribute names not shown"},{"path":"/articles/netify_introduction.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to the netify Package","text":"goal vignette provide wholistic overview use netify package. netify set network analysis tools. package creates network objects, summarizes graphs, analyzes objects. netify also provides bridge major network modeling packages users can seamlessly continue work available statistical modeling packages. netify provides suite primary functions help achieve goals: netify() add_dyad() add_nodal() peek() summary() addition, netify includes additional functions help users bridge netify network packages: prep_for_amen() prep_for_igraph() prep_for_network()","code":""},{"path":"/articles/netify_introduction.html","id":"install","dir":"Articles","previous_headings":"Overview","what":"Install","title":"Introduction to the netify Package","text":"document, provide brief tutorial get started using netify package. netify can installed via devtools:","code":"library(devtools) library(netify)"},{"path":"/articles/netify_introduction.html","id":"starting-with-dyadic-data","dir":"Articles","previous_headings":"Overview","what":"Starting with dyadic data","title":"Introduction to the netify Package","text":"netify package allows users begin dyadic data wherein row data represents event exchange actors, entities, groups. dyadic data, row typically contains information actors involved event. can transform data matrix actor represents rows columns exchanges actors fill values matrix. learn network analysis (emphasis conflict networks) see suggested reading: Cranmer, S. J., Desmarais, B. ., & Morgan, J. W. (2020). Inferential network analysis. Cambridge University Press. Dorff, C., & Ward, M. D. (2013). Networks, dyads, social relations model. Political Science Research Methods, 1(2), 159-178. Dorff, C., Gallop, M., & Minhas, S. (2020). Networks violence: Predicting conflict Nigeria. Journal Politics, 82(2), 476-493. Larson, J. M. (2021). Networks conflict cooperation. Annual Review Political Science, 24, 89-107. Minhas, S., Dorff, C., Gallop, M. B., Foster, M., Liu, H., Tellez, J., & Ward, M. D. (2022). Taking dyads seriously. Political Science Research Methods, 10(4), 703-721.","code":""},{"path":"/articles/netify_introduction.html","id":"what-data-is-in-the-netify-package","dir":"Articles","previous_headings":"Overview > Starting with dyadic data","what":"What data is in the netify package?","title":"Introduction to the netify Package","text":"include data examples drawn peacesciencer package ICEWS data. peacesciencer package provides tools constructing datasets peace science scholarship. See information. Users need install package run examples . ICEWS (Integrated Crisis Early Warning Systems) data example sample interstate conflict cooperation counts 2002 2014. dataset illustration purposes . used research inference. data dyad-year data information structured yearly edgelists. Boschee, Elizabeth; Lautenschlager, Jennifer; O’Brien, Sean; Shellman, Steve; Starz, James, 2018, “ICEWS Weekly Event Data”, https://doi.org/10.7910/DVN/QI2T9A, Harvard Dataverse, V359. begin, let’s create dyadic dataset work .","code":"#> {peacesciencer} includes additional remote data for separate download. Please type ?download_extdata() for more information. #> This message disappears on load when these data are downloaded and in the package's `extdata` directory. #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.3     ✔ readr     2.1.4 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.4.4     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.3     ✔ tidyr     1.3.0 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors #> Joining with `by = join_by(ccode1, ccode2, year)` #> Joining with `by = join_by(ccode1, ccode2, year)` #> add_cow_mids() IMPORTANT MESSAGE: By default, this function whittles dispute-year data into dyad-year data by first selecting on unique onsets. Thereafter, where duplicates remain, it whittles dispute-year data into dyad-year data in the following order: 1) retaining highest `fatality`, 2) retaining highest `hostlev`, 3) retaining highest estimated `mindur`, 4) retaining highest estimated `maxdur`, 5) retaining reciprocated over non-reciprocated observations, 6) retaining the observation with the lowest start month, and, where duplicates still remained (and they don't), 7) forcibly dropping all duplicates for observations that are otherwise very similar. #> See: http://svmiller.com/peacesciencer/articles/coerce-dispute-year-dyad-year.html"},{"path":[]},{"path":"/articles/netify_introduction.html","id":"cross-sectional-networks","dir":"Articles","previous_headings":"Overview > Using netify()","what":"cross-sectional networks","title":"Introduction to the netify Package","text":"Dyadic data like represents exchanges actors entities can thought network data. analyze dyadic data network, can first transform dyadic data adjacency matrix using netify(). Using netify(), can convert dyadic data different network formats: cross-sectional, symmetric, weighted network cross-sectional, unsymmetric, weighted network cross-sectional, symmetric, unweighted network cross-sectional, unsymmetric, unweighted network illustration purposes, let’s think cross-sectional network one time point network, aggregated network (example, several years dyadic data aggregated one time period). Later, show create longitudinal network. function netify() takes single data.frame: dyad_data. returns netlet object. dyad_data dyadic data.frame least following variables used specify actors: actor1: character indicating actor 1 variable data actor2: character indicating actor 2 variable data netify_type type netlet object (‘cross-sec’, ‘longit_list’, ‘longit_array’). data symmetric, order actors matter. data symmetric, can think actor 1 ‘sender’ actor 2 ‘receiver’ given exchange. arguments: weight: character indicating weighted edge variable data, default weight=NULL sum_dyads: logical indicating whether sum weight value exists repeating dyads. symmetric: logical indicating whether ties symmetric, default TRUE nodal_vars: vector variables nodeData merged dyad_vars: vector variables nodeData merged dyad_vars_symmetric: logical vector indicating whether ties symmetric, default TRUE isolates: logical indicating whether include isolates, default FALSE diag_to_NA: logical indicating whether diagonals set NA, default TRUE missing_to_zero logical indicating whether missing values set zero, default TRUE nodal_data: nodal data attribute dyad_data: dyad data attribute graph_data: graph data attribute Let’s transform dyadic dataset, cow_dyads, adjacency matrix analysis. important give object name. case, creating aggregated matrix across years summing repeating dyads. code creates basic network using conflict states (MIDs) weight variable characterizes links edges (links) network. resulting network object core netify package pass functions. successfully made new adjacency matrix dyadic data, netify returns helpful message. output tells us number important features network: symmetric, number actors, number edges (links ties) actors. Note provided weight value (must supply weight chose sum dyadic interactions). case, output tells us network ‘cross-sectional’ aggregated years one time slice. repeating dyads, function returns weight ,j. repeating dyads like example want sum weight variable every time ,j interact data (example, appear multiple times across ‘years’), need set sum_dyads=TRUE). wanted network represented conflict count interactions binary outcome? First, subset original data create edgelist like format. include edges zero (.e., conflict). Next use netify create matrix. specify weight value sum dyads. Now basic network inspect, let’s take look resulting network object. quickest easiest way using peek function.","code":"netify(   dyad_data,    actor1=NULL, actor2=NULL, time=NULL,   symmetric=TRUE,    mode='unipartite',     weight=NULL,    sum_dyads=TRUE,    actor_time_uniform=TRUE,   actor_pds=NULL,   diag_to_NA=TRUE,   missing_to_zero=TRUE,   output_format = ifelse(is.null(time), \"cross_sec\", \"longit_list\"),   nodal_vars=NULL,dyad_vars=NULL, dyad_vars_symmetric=NULL   ) mid_network <- netify(    cow_dyads,    actor1='ccode1', actor2='ccode2',    weight='cowmidonset',     sum_dyads=TRUE, symmetric=TRUE,    diag_to_NA=TRUE, missing_to_zero=TRUE) #> ! Warning: Converting `actor1` and/or `actor2` to character vector(s).    mid_network  #> ✔ Hello, you have created network data, yay! #> • Cross-Sectional #> • Unipartite #> • Symmetric #> • Sum of Weights from `cowmidonset` #> • No Loops Allowed #> • Cross-Sectional #> • # Unique Row Actors: 195 #> • # Unique Column Actors: 195 #> • # Unique Actors: 195 #>               nLoops nEdges    density recip propNA #> 1 cowmidonset    N/A    646 0.08173407   N/A    N/A #> • Nodal Features: None #> • Dyad Features: None #> • Graph Features: None cow_dyad_conflict_onset <- cow_dyads %>%         filter(         cowmidonset > 0         )  any_mid_network <- netify(    cow_dyad_conflict_onset,    actor1='ccode1', actor2='ccode2',    sum_dyads=FALSE, symmetric=TRUE,    diag_to_NA=TRUE, missing_to_zero=TRUE) #> ! Warning: Converting `actor1` and/or `actor2` to character vector(s). #> ! Warning: there are repeating dyads within time periods in the dataset. When `weight` is not supplied and `sum_dyads` is set to FALSE, edges in the outputted adjacency matrix will represent binary interactions between actors. any_mid_network #> ✔ Hello, you have created network data, yay! #> • Cross-Sectional #> • Unipartite #> • Symmetric #> • Binary Weights #> • No Loops Allowed #> • Cross-Sectional #> • # Unique Row Actors: 148 #> • # Unique Column Actors: 148 #> • # Unique Actors: 148 #>           nLoops nEdges    density recip propNA #> 1 weight1    N/A    646 0.02969296   N/A    N/A #> • Nodal Features: None #> • Dyad Features: None #> • Graph Features: None peek(mid_network, 20) #>     100 101 110 115 130 135 140 145 150 155 160 165  2 20 200 205 210 211 212 #> 100  NA  16   0   0  10   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 101  16  NA   4   0   0   0   0   0   0   0   0   0  4  0   0   0   0   0   0 #> 110   0   4  NA   2   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 115   0   0   2  NA   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 130  10   0   0   0  NA   6   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 135   0   0   0   0   6  NA   2   0   0   0   0   0  0  0   0   0   0   0   0 #> 140   0   0   0   0   0   2  NA   0   0   0   0   0  0  0   0   0   0   0   0 #> 145   0   0   0   0   0   0   0  NA   0   0   0   0  0  0   0   0   0   0   0 #> 150   0   0   0   0   0   0   0   0  NA   0   0   0  0  0   0   0   0   0   0 #> 155   0   0   0   0   0   0   0   0   0  NA   0   0  0  0   2   0   0   0   0 #> 160   0   0   0   0   0   0   0   0   0   0  NA   0  0  0   2   0   0   0   0 #> 165   0   0   0   0   0   0   0   0   0   0   0  NA  0  0   0   0   0   0   0 #> 2     0   4   0   0   0   0   0   0   0   0   0   0 NA  2   0   0   0   0   0 #> 20    0   0   0   0   0   0   0   0   0   0   0   0  2 NA   0   0   0   0   0 #> 200   0   0   0   0   0   0   0   0   0   2   2   0  0  0  NA   0   0   0   0 #> 205   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0  NA   0   0   0 #> 210   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0  NA   0   0 #> 211   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0  NA   0 #> 212   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0  NA #> 220   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #>     220 #> 100   0 #> 101   0 #> 110   0 #> 115   0 #> 130   0 #> 135   0 #> 140   0 #> 145   0 #> 150   0 #> 155   0 #> 160   0 #> 165   0 #> 2     0 #> 20    0 #> 200   0 #> 205   0 #> 210   0 #> 211   0 #> 212   0 #> 220  NA peek(any_mid_network, 20) #>     100 101 110 115 130 135 140 155 160  2 20 200 205 210 211 212 220 225 230 #> 100  NA   1   0   0   1   0   0   0   0  0  0   0   0   0   0   0   0   0   0 #> 101   1  NA   1   0   0   0   0   0   0  1  0   0   0   0   0   0   0   0   0 #> 110   0   1  NA   1   0   0   0   0   0  0  0   0   0   0   0   0   0   0   0 #> 115   0   0   1  NA   0   0   0   0   0  0  0   0   0   0   0   0   0   0   0 #> 130   1   0   0   0  NA   1   0   0   0  0  0   0   0   0   0   0   0   0   0 #> 135   0   0   0   0   1  NA   1   0   0  0  0   0   0   0   0   0   0   0   0 #> 140   0   0   0   0   0   1  NA   0   0  0  0   0   0   0   0   0   0   0   0 #> 155   0   0   0   0   0   0   0  NA   0  0  0   1   0   0   0   0   0   0   0 #> 160   0   0   0   0   0   0   0   0  NA  0  0   1   0   0   0   0   0   0   0 #> 2     0   1   0   0   0   0   0   0   0 NA  1   0   0   0   0   0   0   0   0 #> 20    0   0   0   0   0   0   0   0   0  1 NA   0   0   0   0   0   0   0   1 #> 200   0   0   0   0   0   0   0   1   1  0  0  NA   0   0   0   0   0   0   1 #> 205   0   0   0   0   0   0   0   0   0  0  0   0  NA   0   0   0   0   0   0 #> 210   0   0   0   0   0   0   0   0   0  0  0   0   0  NA   0   0   0   0   0 #> 211   0   0   0   0   0   0   0   0   0  0  0   0   0   0  NA   0   0   0   0 #> 212   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0  NA   0   0   0 #> 220   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0  NA   0   0 #> 225   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0   0  NA   0 #> 230   0   0   0   0   0   0   0   0   0  0  1   1   0   0   0   0   0   0  NA #> 235   0   0   0   0   0   0   0   0   0  0  1   0   0   0   0   0   0   0   0 #>     235 #> 100   0 #> 101   0 #> 110   0 #> 115   0 #> 130   0 #> 135   0 #> 140   0 #> 155   0 #> 160   0 #> 2     0 #> 20    1 #> 200   0 #> 205   0 #> 210   0 #> 211   0 #> 212   0 #> 220   0 #> 225   0 #> 230   0 #> 235  NA"},{"path":"/articles/netify_introduction.html","id":"longitudinal-networks","dir":"Articles","previous_headings":"Overview > Using netify()","what":"Longitudinal networks","title":"Introduction to the netify Package","text":"Sometimes data contains information time perserve temporal information create longitudinal networks. want create object wherein network represents single time period data need create longitudinal network. can using netify() function. Relevant arguments: netify_type type netlet object (‘cross-sec’, ‘longit_list’, ‘longit_array’). longitudinal network, ‘longit_list’, ‘longit_array’ given. sum_dyads: logical indicating whether assume actors network (nodes) across entire time series. relevant time series data. time: character indicating variable representing time data. none provided, function assumes network cross-sectional. actor_time_uniform: logical indicating whether assume actors across full time series observed data. TRUE means actors across full time series observed data. FALSE means actors come observed data “existence” determined data, meaning first year existence determined time point first event last year existence time point last event. actor_pds: data.frame indicating start end time point every actor, can created using get_actor_time_info.R, unless provided estimated user based choice actor_time_uniform. Two key arguments help us understand kind longitudinal network want create. time denotes variable data represents time. actor_time_uniform indicates whether actors network change time. actors change, set actor_time_uniform=TRUE, netify returns three-dimensional array first two dimensions correspond actors third corresponds time. actors change, set actor_time_uniform = FALSE function returns list object. object list matrix given time point. dimensions matrix inside list depend many actors (nodes) “exist” time slice. Let’s try create -time network using year variable cow_dyads. longitudinal networks, also need consider whether nodes, actors, change overtime network. case, countries exit enter international system set actor_time_uniform=FALSE. dataset also includes information actors dyadic relationships. netify function also allows users add nodal dyadic variables network object. , add covariate information regime type actors (nodes) network using nodal_vars parameter. also add information geographical distance country given dyads using dyad_vars parameter. now longitudinal network reflected output notes 23 time periods. netlet object now list element reflects time period network. point might wonder, happened set actor_time_uniform=FALSE? want set parameter TRUE number actors, nodes, network changes time false . Since previously told function actors change time, let’s see number actors changes timeslice. actors changing time! resulting object organized list networks time. can inspect outputs . can use netify’s helper functions. Note, choose specific time point, year, must pass parameter using quotations. example, take peek network different time points: Finally, might want supply set actors custom start end years. , use actors_pds argument allows us pass data.frame netify actors’ start end years.","code":"netify(   dyad_data,   actor1, actor2,   sum_dyads,     time,     actor_time_uniform=TRUE,     actor_pds=NULL,     nodal_vars=NULL,dyad_vars=NULL, dyad_vars_symmetric=NULL,   diag_to_NA=TRUE, missing_to_zero=TRUE ) mid_long_network <- netify(   cow_dyads,   actor1='ccode1', actor2='ccode2', time='year',   weight='cowmidonset',    actor_time_uniform=FALSE,   sum_dyads=FALSE, symmetric=TRUE,   diag_to_NA=TRUE, missing_to_zero=FALSE,   nodal_vars = c('v2x_polyarchy1', 'v2x_polyarchy2'),   dyad_vars = c('capdist'),   dyad_vars_symmetric = c(TRUE, FALSE)   ) #> ! Warning: Converting `actor1` and/or `actor2` to character vector(s). mid_long_network #> ✔ Hello, you have created network data, yay! #> • Longitudinal #> • Unipartite #> • Symmetric #> • Weights from `cowmidonset` #> • No Loops Allowed #> • Longitudinal: 20 Periods #> • # Unique Row Actors: 195 #> • # Unique Column Actors: 195 #> • # Unique Actors: 195 #>               nLoops nEdges     density recip propNA #> 1 cowmidonset    N/A   1546 0.002111837   N/A      0 #> • Nodal Features: v2x_polyarchy1, v2x_polyarchy2 #> • Dyad Features: capdist #> • Graph Features: None head(lapply(mid_long_network, dim)) #> $`1995` #> [1] 187 187 #>  #> $`1996` #> [1] 187 187 #>  #> $`1997` #> [1] 187 187 #>  #> $`1998` #> [1] 187 187 #>  #> $`1999` #> [1] 190 190 #>  #> $`2000` #> [1] 191 191 is.list(mid_long_network) #> [1] TRUE # use the index location peek(mid_long_network, when_to_peek = c(20,23), what_to_peek = 10) #> $`2014` #>     100 101 110 115 130 135 140 145 150 155 #> 100  NA   0   0   0   0   0   0   0   0   0 #> 101   0  NA   0   0   0   0   0   0   0   0 #> 110   0   0  NA   0   0   0   0   0   0   0 #> 115   0   0   0  NA   0   0   0   0   0   0 #> 130   0   0   0   0  NA   0   0   0   0   0 #> 135   0   0   0   0   0  NA   0   0   0   0 #> 140   0   0   0   0   0   0  NA   0   0   0 #> 145   0   0   0   0   0   0   0  NA   0   0 #> 150   0   0   0   0   0   0   0   0  NA   0 #> 155   0   0   0   0   0   0   0   0   0  NA peek(mid_long_network, when_to_peek = c('2012'), what_to_peek = 30) #> $`2012` #>     100 101 110 115 130 135 140 145 150 155 160 165  2 20 200 205 210 211 212 #> 100  NA   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 101   0  NA   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 110   0   0  NA   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 115   0   0   0  NA   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 130   0   0   0   0  NA   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 135   0   0   0   0   0  NA   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 140   0   0   0   0   0   0  NA   0   0   0   0   0  0  0   0   0   0   0   0 #> 145   0   0   0   0   0   0   0  NA   0   0   0   0  0  0   0   0   0   0   0 #> 150   0   0   0   0   0   0   0   0  NA   0   0   0  0  0   0   0   0   0   0 #> 155   0   0   0   0   0   0   0   0   0  NA   0   0  0  0   0   0   0   0   0 #> 160   0   0   0   0   0   0   0   0   0   0  NA   0  0  0   1   0   0   0   0 #> 165   0   0   0   0   0   0   0   0   0   0   0  NA  0  0   0   0   0   0   0 #> 2     0   0   0   0   0   0   0   0   0   0   0   0 NA  0   0   0   0   0   0 #> 20    0   0   0   0   0   0   0   0   0   0   0   0  0 NA   0   0   0   0   0 #> 200   0   0   0   0   0   0   0   0   0   0   1   0  0  0  NA   0   0   0   0 #> 205   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0  NA   0   0   0 #> 210   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0  NA   0   0 #> 211   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0  NA   0 #> 212   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0  NA #> 220   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 221   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 223   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 225   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 230   0   0   0   0   0   0   0   0   0   0   0   0  0  0   1   0   0   0   0 #> 232   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 235   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 255   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 290   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 305   0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #> 31    0   0   0   0   0   0   0   0   0   0   0   0  0  0   0   0   0   0   0 #>     220 221 223 225 230 232 235 255 290 305 31 #> 100   0   0   0   0   0   0   0   0   0   0  0 #> 101   0   0   0   0   0   0   0   0   0   0  0 #> 110   0   0   0   0   0   0   0   0   0   0  0 #> 115   0   0   0   0   0   0   0   0   0   0  0 #> 130   0   0   0   0   0   0   0   0   0   0  0 #> 135   0   0   0   0   0   0   0   0   0   0  0 #> 140   0   0   0   0   0   0   0   0   0   0  0 #> 145   0   0   0   0   0   0   0   0   0   0  0 #> 150   0   0   0   0   0   0   0   0   0   0  0 #> 155   0   0   0   0   0   0   0   0   0   0  0 #> 160   0   0   0   0   0   0   0   0   0   0  0 #> 165   0   0   0   0   0   0   0   0   0   0  0 #> 2     0   0   0   0   0   0   0   0   0   0  0 #> 20    0   0   0   0   0   0   0   0   0   0  0 #> 200   0   0   0   0   1   0   0   0   0   0  0 #> 205   0   0   0   0   0   0   0   0   0   0  0 #> 210   0   0   0   0   0   0   0   0   0   0  0 #> 211   0   0   0   0   0   0   0   0   0   0  0 #> 212   0   0   0   0   0   0   0   0   0   0  0 #> 220  NA   0   0   0   0   0   0   0   0   0  0 #> 221   0  NA   0   0   0   0   0   0   0   0  0 #> 223   0   0  NA   0   0   0   0   0   0   0  0 #> 225   0   0   0  NA   0   0   0   0   0   0  0 #> 230   0   0   0   0  NA   0   0   0   0   0  0 #> 232   0   0   0   0   0  NA   0   0   0   0  0 #> 235   0   0   0   0   0   0  NA   0   0   0  0 #> 255   0   0   0   0   0   0   0  NA   0   0  0 #> 290   0   0   0   0   0   0   0   0  NA   0  0 #> 305   0   0   0   0   0   0   0   0   0  NA  0 #> 31    0   0   0   0   0   0   0   0   0   0 NA actor_comp <- data.frame(     actor = c(2, 365, 220, 710),     min_time = c(1980, 1980, 1991, 1980),     max_time = c(2001, 2001, 2001, 2001) )  # pass actor composition to netify mid_network_actors <- netify(   cow_dyads,   actor1='ccode1', actor2='ccode2', time='year',   weight='cowmidonset',    actor_pds=actor_comp,   sum_dyads=FALSE, symmetric=TRUE,   diag_to_NA=TRUE, missing_to_zero=TRUE) #> ! Warning: Converting `actor1` and/or `actor2` to character vector(s). mid_network_actors #> ✔ Hello, you have created network data, yay! #> • Longitudinal #> • Unipartite #> • Symmetric #> • Weights from `cowmidonset` #> • No Loops Allowed #> • Longitudinal: 3 Periods #> • # Unique Row Actors: 4 #> • # Unique Column Actors: 4 #> • # Unique Actors: 4 #>               nLoops nEdges    density recip propNA #> 1 cowmidonset    N/A      2 0.06666667   N/A    N/A #> • Nodal Features: None #> • Dyad Features: None #> • Graph Features: None"},{"path":"/articles/netify_introduction.html","id":"summary-functions","dir":"Articles","previous_headings":"Overview","what":"Summary Functions","title":"Introduction to the netify Package","text":"made netify object fit needs, can inspect object three main ways using package functions. already seen, object printed, receive message basic information network. also seen inspect object turning peek function. explore use netify’s summary functions. summary() function returns valuable summary information network: numActors: Number actors network dens: network density recip: reciprocity sdSendEff: sender effects sdRecEff: sender effects srCov: sender receiver covariance Users can also supply summary functions. output easy digest dataframe. second summary function called summary_actor. summary_actor() function returns useful actor level statistics network object. function returns data frame object N equals number actors network.","code":"sum_event_mat <- summary(mid_network) sum_event_mat #>   net numActors       dens recip sdSendEff  sdRecEff srCov #> 1   1       195 0.08173407     1 0.1405238 0.1405238     1 transitivity = function(mat){   E <- mat-mean(mat,na.rm=TRUE)   D <- 1*(!is.na(E))   E[is.na(E)] <- 0   trans <- sum(diag(E%*%t(E)%*%E))/( sum(diag(D%*%t(D)%*%D))*sd(c(mat),na.rm=TRUE)^3)   return(trans) }  cycles = function(mat){   E <- mat-mean(mat,na.rm=TRUE)   D <- 1*(!is.na(E))   E[is.na(E)] <- 0   cycles <- sum(diag(E%*%E%*%E))/( sum(diag(D%*%D%*%D))*sd(c(mat),na.rm=TRUE)^3)   return(cycles) }  sum_event_mat <- summary(mid_network, cycles=cycles, transitivity=transitivity) sum_event_mat #>   net numActors       dens recip sdSendEff  sdRecEff srCov     cycles #> 1   1       195 0.08173407     1 0.1405238 0.1405238     1 0.06662241 #>   transitivity #> 1   0.06662241 network_sum <- summary_actor(mid_network) head(network_sum)"},{"path":"/articles/netify_introduction.html","id":"visualization","dir":"Articles","previous_headings":"Overview","what":"Visualization","title":"Introduction to the netify Package","text":"Netify provides plotting functions network- actor-level statistics netify objects. first plotting function called plot_networkStats. plot_networkStats() function returns graph object summarizing network-level statistics longitudinal. three main parameter: netlet, logitudinal, net_stat. Since plots network-level visualization, logitudianl always set TRUE. net_stat, can pick summary statistics interest netlet object created summary function. default “dens”. Next, can use ggplot visualize statistics.  second plotting function called plot_actorStats. plot_actorStats() function returns actor-level visualization. five main parameter: netlet, logitudinal, net_stat, actor_names, toplist_n. Using actor_names toplist_n can pick actors network number actors listed top n actors visualization. specifically, actor_names character indicating actor name(s) network, toplist_n numeric indicating number actors listed top n actors.","code":"library(ggplot2) plot_networkStats(nets_time_sum, longitudinal = TRUE, net_stat=c(\"sdSendEff\", \"sdRecEff\")) +   labs(title = \"Network-level Statistics\") +   theme_bw() # compare USA (2), China (710), Russia (365) plot_actorStats(network_sum, longitudinal=FALSE, net_stat=c('average_degree_in','average_degree_out'), actor_names=c('2', '710', '365'), toplist_n=NULL) plot_actorStats(network_sum, longitudinal=FALSE, net_stat='average_degree_in', toplist_n=10)"},{"path":"/articles/netify_introduction.html","id":"using-netify-as-a-bridge-to-other-network-packages","dir":"Articles","previous_headings":"Overview","what":"Using netify as a bridge to other network packages","title":"Introduction to the netify Package","text":"Netify provides prep functions allow users reshape netlet object make ready analysis following two packages: prep_for_igraph: igraph prep_for_network: network prep_for_amen:amen can simply provide netlet object prep functions get data ready igraph network functions. Many researchers users want use network package analysis using statnet ERGM models packages. netify package includes functions take network object (netlet) quickly prepare data use packages. See network related packages documentation information. Similarly, users can employ prep_for_amen function take netlet object transform list object necessary components pass AME function.","code":"# library(igraph) # return to*** # do i have to subset and then make a netify again? or can peek do that? # netplot is a matrix not netlet obj # net_plot <- peek(mid_network, 20)  # igraph_obj <- prep_for_igraph(net_plot) # igraph_obj  # rm_iso = which(degree(igraph_obj)==0) # igraph_obj = delete.vertices(igraph_obj, rm_iso) # graph_attr(igraph_obj, \"layout\") <- layout.random  # plot(igraph_obj, edge.arrow.size=.1,vertex.label=NA) # network_obj <- prep_for_network(mid_long_network) # network_obj # amen_obj <- prep_for_amen(mid_long_network) # amen_obj"},{"path":"/articles/netify_investigating.html","id":"investigating-a-netify-object","dir":"Articles","previous_headings":"","what":"Investigating a netify object","title":"Investigating a netify object","text":"made netify object fit needs, can inspect object three main ways using package functions. (1) already seen, object printed, user receives message basic information network. (2) can inspect object turning peek summary functions. Notes: notes peek function: add option people specify specific actors display c(‘Boko Haram’, ‘ISIS’)? notes peek function: add option users specify multiple time points? => HC: don’t options yet.","code":"# cross sectional peek peek(event_mat) #>                                        'Al Shabaab' Militia 3R Aaro Aaro #> 'Al Shabaab' Militia                                     NA  0         0 #> 3R                                                        0 NA         0 #> Aaro Aaro                                                 0  0        NA #> Aasi Clan Militia (Somalia)                               0  0         0 #> Abakpa Nike Communal Militia (Nigeria)                    0  0         0 #>                                        Aasi Clan Militia (Somalia) #> 'Al Shabaab' Militia                                             0 #> 3R                                                               0 #> Aaro Aaro                                                        0 #> Aasi Clan Militia (Somalia)                                     NA #> Abakpa Nike Communal Militia (Nigeria)                           0 #>                                        Abakpa Nike Communal Militia (Nigeria) #> 'Al Shabaab' Militia                                                        0 #> 3R                                                                          0 #> Aaro Aaro                                                                   0 #> Aasi Clan Militia (Somalia)                                                 0 #> Abakpa Nike Communal Militia (Nigeria)                                     NA  # changing actors peek peek(event_data_time_actors, tIndex = 3) #> Error in \"netify\" %in% class(x): object 'event_data_time_actors' not found"},{"path":"/articles/netify_investigating.html","id":"summary-functions","dir":"Articles","previous_headings":"","what":"Summary Functions","title":"Investigating a netify object","text":"summary() function returns valuable information network: numActors: Number actors network dens: network density recip: reciprocity sdSendEff: sender effects sdRecEff: sender effects srCov: sender receiver covariance Users can also supply summary functions. awesome! output easy digest dataframe. second summary function called summary_actor. summary_actor() function returns useful actor level statistics network object. function returns data frame object N equals number actors network. Error: line 17 summary_actor.R, netify_check(object) netify_check(netlet)","code":"sum_event_mat <- summary(event_mat) sum_event_mat #>   net numActors        dens recip   sdSendEff    sdRecEff srCov #> 1   1      3205 0.001042184     1 0.002634784 0.002634784     1 transitivity = function(mat){   E <- mat-mean(mat,na.rm=TRUE)   D <- 1*(!is.na(E))   E[is.na(E)] <- 0   trans <- sum(diag(E%*%t(E)%*%E))/( sum(diag(D%*%t(D)%*%D))*sd(c(mat),na.rm=TRUE)^3)   return(trans) }  cycles = function(mat){   E <- mat-mean(mat,na.rm=TRUE)   D <- 1*(!is.na(E))   E[is.na(E)] <- 0   cycles <- sum(diag(E%*%E%*%E))/( sum(diag(D%*%D%*%D))*sd(c(mat),na.rm=TRUE)^3)   return(cycles) }  sum_event_mat <- summary(event_mat, cycles=cycles, transitivity=transitivity) sum_event_mat #>   net numActors        dens recip   sdSendEff    sdRecEff srCov     cycles #> 1   1      3205 0.001042184     1 0.002634784 0.002634784     1 0.01815067 #>   transitivity #> 1   0.01815067 network_sum <- summary_actor(event_mat) network_sum"},{"path":"/articles/netify_investigating.html","id":"plotting-functions","dir":"Articles","previous_headings":"","what":"Plotting functions","title":"Investigating a netify object","text":"Netify provides plotting functions network- actor-level statistics netify objects. first plotting function called plot_networkStats. plot_networkStats() function returns graph object summarizing network-level statistics longitudinal. three main parameter: netlet, logitudinal, net_stat. Since plots network-level visualization, logitudianl always set TRUE. net_stat, can pick summary statistics interest netlet object created summary function. default “dens”.  second plotting function called plot_actorStats. plot_actorStats() function returns actor-level visualization.. five main parameter: netlet, logitudinal, net_stat, actor_names, toplist_n. Using actor_names toplist_n can pick actors network number actors listed top n actors visualization. specifically, actor_names character indicating actor name(s) network, toplist_n numeric indicating number actors listed top n actors. => HC: just picked random actors please change think better examples","code":"library(ggplot2) plot_networkStats(nets_time_sum, longitudinal = TRUE, net_stat=c(\"sdSendEff\", \"sdRecEff\")) +   labs(title = \"Network-level Statistics\") +   theme_bw() # you can overwrite the theme and other ggplot functions plot_actorStats(network_sum, longitudinal=FALSE, net_stat=c('average_degree_in','average_degree_out'), actor_names=c('Government of Nigeria', 'Marwa Ethnic Militia (Nigeria)'), toplist_n=NULL) plot_actorStats(network_sum, longitudinal=FALSE, net_stat='average_degree_in', toplist_n=10)"},{"path":"/articles/netify_netify.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to the netify Package - netify()","text":"netify set network analysis tools. package creates network objects summarizes, graphs, analyzes objects. netify also provides bridge major network modeling packages users can seamlessly continue work available statistical modeling packages. netify provides suite primary functions help achieve goals: netify() add_dyad() add_nodal() peek() summary() addition, netify includes additional functions help users bridge netify network packages: prep_for_amen() prep_for_igraph() prep_for_network()","code":""},{"path":"/articles/netify_netify.html","id":"install","dir":"Articles","previous_headings":"Overview","what":"Install","title":"Introduction to the netify Package - netify()","text":"document, provide brief tutorial use netify package. netify can installed via devtools:","code":"library(devtools) library(netify)"},{"path":"/articles/netify_netify.html","id":"starting-with-dyadic-data","dir":"Articles","previous_headings":"Overview","what":"Starting with dyadic data","title":"Introduction to the netify Package - netify()","text":"netify package allows users begin dyadic data wherein row data represents event exchange actors, entities, groups. dyadic data, row typically contains information actors involved event. can transform data matrix actor represents rows columns exchanges actors fill values matrix. Vignette note: add citations dyadic data--networks unfamiliar ?","code":""},{"path":"/articles/netify_netify.html","id":"what-data-is-in-the-netify-package","dir":"Articles","previous_headings":"Overview > Starting with dyadic data","what":"What data is in the netify package?","title":"Introduction to the netify Package - netify()","text":"include data examples drawn four different data sources: ICEWS, UCDP, ACLED mysteriously labeled event data. can see looking sample data event_data longitudinal dyadic data. Vignette note: need information data, since event_type excluded unclear user looking . Also, reminder see sourcing requirements ACLED.","code":"data(package=\"netify\") data(event_data) head(event_data) #>   data_id            cname cowc event_date year #> 1 6714129          Somalia  SOM 2019-12-31 2019 #> 2 7187987 Congo - Kinshasa  DRC 2019-12-31 2019 #> 3 7210326            Sudan  SUD 2019-12-31 2019 #> 4 7122303 Congo - Kinshasa  DRC 2019-12-31 2019 #> 5 7099295      South Sudan  SSD 2019-12-31 2019 #> 6 6714017          Somalia  SOM 2019-12-31 2019 #>                                                                 actor1 #> 1                                                           Al Shabaab #> 2          Military Forces of the Democratic Republic of Congo (2019-) #> 3                       Awlad Mansour Misseriya Ethnic Militia (Sudan) #> 4          Military Forces of the Democratic Republic of Congo (2019-) #> 5 SPLM-In Opposition: Sudan People's Liberation Movement-In Opposition #> 6                                                           Al Shabaab #>                                                                                    actor2 #> 1                                                      Military Forces of Somalia (2017-) #> 2                                                           ADF: Allied Democratic Forces #> 3                                             Awlad Gaid Misseriya Ethnic Militia (Sudan) #> 4                                                             Mayi Mayi Militia (Charles) #> 5 SPLM-In Opposition: Sudan People's Liberation Movement-In Opposition (Splinter Faction) #> 6                              AMISOM: African Union Mission in Somalia (2007-) (Burundi) #>           admin1   admin2 latitude longitude fatalities source #> 1 Lower Shabelle  Afgooye   2.3963   45.0159          0  acled #> 2      Nord-Kivu     Beni   0.6287   29.9411          1  acled #> 3   South Darfur   Bielel  12.2443   25.1096          3  acled #> 4      Nord-Kivu Rutshuru  -1.1869   29.4461          0  acled #> 5     Upper Nile   Maiwut   8.3833   33.7833          4  acled #> 6 Lower Shabelle    Marka   1.7493   44.7437          0  acled"},{"path":[]},{"path":"/articles/netify_netify.html","id":"cross-sectional-networks","dir":"Articles","previous_headings":"Overview > Using netify()","what":"cross-sectional networks","title":"Introduction to the netify Package - netify()","text":"Dyadic data like represents exchanges actors entities can thought network data. analyze dyadic data network, first transform data adjacency matrix using netify(). Using netify(), can convert dyadic data different network formats: cross-sectional, symmetric, weighted network cross-sectional, unsymmetric, weighted network cross-sectional, symmetric, unweighted network cross-sectional, unsymmetric, unweighted network , can think cross-sectional network one time point network, aggregated network (example, several years dyadic data aggregated one time period). Later, show create longitudinal network. function netify() takes single data.frame: dyad_data. returns netlet object. Error: 1) reorder weight netify function netify.R => HC: fixed 2) default weight=list(NULL) produces error saying: “Error weight_check(weight) :” works fine weight=NULL. CD gets full error : “Error: check data type. weight left NULL character value referring variable dyad_data object provided.” => HC: issue 3) *Fix warning make simple “! Warning: repeating dyads within time periods dataset.”” dyad_data dyadic data.frame least following variables used specify actors: actor1: character indicating actor 1 variable data actor2: character indicating actor 2 variable data netify_type type netlet object (‘cross-sec’, ‘longit_list’, ‘longit_array’). cross-sectional network, ‘cross-sec’ given. data symmetric, order actors matter. data symmetric, can think actor 1 ‘sender’ actor 2 ‘receiver’ given exchange. arguments: weight: character indicating weighted edge variable data, default weight=NULL sum_dyads: logical indicating whether sum weight value exists repeating dyads. symmetric: logical indicating whether ties symmetric, default TRUE nodal_vars: vector variables nodeData merged dyad_vars: vector variables nodeData merged dyad_vars_symmetric: logical vector indicating whether ties symmetric, default TRUE isolates: logical indicating whether include isolates, default FALSE diag_to_NA: logical indicating whether diagonals set NA, default TRUE missing_to_zero logical indicating whether missing values set zero, default TRUE nodal_data: nodal data attribute dyad_data: dyad data attribute graph_data: graph data attribute Let’s transform dyadic dataset adjacency matrix analysis. important give object name. get error? actor1 actor2 need character vectors. successfully made new adjacency matrix dyadic data, netify returns helpful message. message tells us network symmetric also tells us number actors number edges (links ties) actors. Note repeated dyads data, function warns . change , might want sum interactions supplying weight value (must supply weight chose sum dyadic interactions). resulting network object core netify package pass functions.","code":"netify(   data = dyad_data,    netify_type = NULL,    actor1=NULL, actor2=NULL,    weight=list(NULL),    sum_dyads=TRUE,    symmetric=TRUE,   nodal_vars=NULL,dyad_vars=NULL, dyad_vars_symmetric=NULL,   isolates=FALSE, diag_to_NA=TRUE, missing_to_zero=TRUE,   nodal_data = list(NULL), dyad_data = list(NULL), graph_data = list(NULL),    ...   ) event_mat <- netify(event_data,                     \"cross_sec\",                     actor1, actor2,                     weight=NULL, sum_dyads=FALSE, symmetric=TRUE,                     isolates=FALSE, diag_to_NA=TRUE, missing_to_zero=TRUE) #> Error in actor_check(actor1, actor2, dyad_data): object 'actor1' not found event_mat <- netify(event_data,                     netify_type='cross-sec',                     actor1='actor1', actor2='actor2',                     weight=NULL, sum_dyads=FALSE, symmetric=TRUE,                     isolates=FALSE, diag_to_NA=TRUE, missing_to_zero=TRUE) #> ! Warning: there are repeating dyads within time periods in the dataset. When `weight` is not supplied and `sum_dyads` is set to FALSE, edges in the outputted adjacency matrix will represent binary interactions between actors. event_mat #> ✔ Hello, you have created network data, yay! #> • Symmetric: Yes #> • Weighted: Yes #> • Number of Unique Actors: 3205 #> • Number of Edges: 10702 #> • Number of Time Points: N/A #> • Average Number of Actors: 3205 #> • Nodal Attributes: N/A"},{"path":"/articles/netify_netify.html","id":"cross-sectional-weighted-network","dir":"Articles","previous_headings":"Overview > Using netify()","what":"cross-sectional weighted network","title":"Introduction to the netify Package - netify()","text":"previous use netify function allows us create unweighted cross-sectional matrix binary edges. Now want use variable fatalities represent edges network? can specifying weight = fatalities. Note, repeating dyads, function returns weight ,j. repeating dyads want sum weight variable every time ,j interact data (example, appear multiple times across ‘years’), need set sum_dyads=TRUE. Error => HC: fixed understand difference, compare two examples: Notes: calculate edges weight without repeating dyads (cross-sectional) calculate edges weight without repeating dyads (cross-sectional) calculate edges weight repeating dyads (time) calculate edges weight repeating dyads (time) => HC: think covered now, make separate vignette ?","code":"fatality_mat <- netify(event_data,                        netify_type='cross-sec',                        actor1='actor1', actor2='actor2',                        weight='fatalities', sum_dyads=FALSE, symmetric=TRUE,                        isolates=FALSE, diag_to_NA=TRUE, missing_to_zero=TRUE) #> ! Warning: there are repeating dyads within time periods in the dataset. Since `sum_dyads = FALSE` and `weight` variable is provided the edges in the outputted adjacency matrix will represent the sum of the weight across repeating dyads.  fatality_mat #> ✔ Hello, you have created network data, yay! #> • Symmetric: Yes #> • Weighted: Yes #> • Number of Unique Actors: 3205 #> • Number of Edges: 538828 #> • Number of Time Points: N/A #> • Average Number of Actors: 3205 #> • Nodal Attributes: N/A fatality_mat_rep <- netify(event_data,                            netify_type='cross-sec',                            actor1='actor1', actor2='actor2',                            weight='fatalities', sum_dyads=TRUE, symmetric=TRUE,                            isolates=FALSE, diag_to_NA=TRUE, missing_to_zero=TRUE)  fatality_mat_rep fatality_mat[20:24, 20:24] fatality_mat_rep[20:24, 20:24]"},{"path":"/articles/netify_netify.html","id":"longitudinal-networks","dir":"Articles","previous_headings":"Overview > Using netify()","what":"longitudinal networks","title":"Introduction to the netify Package - netify()","text":"Sometimes might data contains information time. want create network represents time period data need create longitudinal network. can using netify() function. Relevant arguments: netify_type type netlet object (‘cross-sec’, ‘longit_list’, ‘longit_array’). longitudinal network, ‘longit_list’, ‘longit_array’ given. sum_dyads: logical indicating whether assume actors network (nodes) across entire time series. relevant time series data. time: character indicating variable representing time data. none provided, function assumes network cross-sectional. actor_time_uniform: logical indicating whether assume actors across full time series observed data. TRUE means actors across full time series observed data. FALSE means actors come observed data “existence” determined data, meaning first year existence determined time point first event last year existence time point last event. actor_pds: data.frame indicating start end time point every actor, can created using get_actor_time_info.R, unless provided estimated user based choice actor_time_uniform. Two key arguments help us understand kind longitudinal network want create. time denotes variable data represents time. actor_time_uniform indicates whether actors network change time. actors change, set actor_time_uniform=TRUE, netify returns three-dimensional array first two dimensions correspond actors third corresponds time. actors change, set actor_time_uniform = FALSE function returns list object. object list matrix given time point. dimensions matrix inside list depend many actors (nodes) “exist” time slice. Let’s try create -time network using year variable event_data. can double check outputs . can use netify’s helper functions. example, might want take peek network different time points: Error: error occurs netifyType assigned example, attributes(event_mat_time)$netifyType returns NULL therefore peek stops running identify netify type event_mat_time object => HC: fixed point might wonder, happened set actor_time_uniform=FALSE? Notes: sure , change netify_type longit_list instead longit_array get two warnings instead 1. Now told function actors change time, let’s see number actors changes timeslice. Cool! actors definitely changing time! resulting object list?","code":"netify(   dyad_data,   netify_type,   actor1, actor2,   sum_dyads,     time,     actor_time_uniform=TRUE,     actor_years=NULL,     nodal_vars=NULL,dyad_vars=NULL, dyad_vars_symmetric=NULL,   isolates=FALSE, diag_to_NA=TRUE, missing_to_zero=TRUE,   nodal_data = list(NULL), dyad_data = list(NULL), graph_data = list(NULL) ) event_mat_time <-   netify(   event_data,   netify_type='longit_array',   actor1=\"actor1\",actor2= \"actor2\",     time = \"year\",     actor_time_uniform=TRUE,     actor_years=NULL,     weight=NULL, symmetric=TRUE,   isolates=FALSE, diag_to_NA=TRUE, missing_to_zero=TRUE ) #> ! Warning: there are repeating dyads within time periods in the dataset. When `weight` is not supplied and `sum_dyads` is set to FALSE, edges in the outputted adjacency matrix will represent binary interactions between actors.  event_mat_time #> ✔ Hello, you have created network data, yay! #> • Symmetric: Yes #> • Weighted: Yes #> • Number of Unique Actors: 3205 #> • Number of Edges: 17134 #> • Number of Time Points: 19 #> • Average Number of Actors: 3205 #> • Nodal Attributes: N/A #use the index location peek(event_mat_time, tIndex = 18) #> Showing head for 2018 #>                                        'Al Shabaab' Militia 3R Aaro Aaro #> 'Al Shabaab' Militia                                     NA  0         0 #> 3R                                                        0 NA         0 #> Aaro Aaro                                                 0  0        NA #> Aasi Clan Militia (Somalia)                               0  0         0 #> Abakpa Nike Communal Militia (Nigeria)                    0  0         0 #>                                        Aasi Clan Militia (Somalia) #> 'Al Shabaab' Militia                                             0 #> 3R                                                               0 #> Aaro Aaro                                                        0 #> Aasi Clan Militia (Somalia)                                     NA #> Abakpa Nike Communal Militia (Nigeria)                           0 #>                                        Abakpa Nike Communal Militia (Nigeria) #> 'Al Shabaab' Militia                                                        0 #> 3R                                                                          0 #> Aaro Aaro                                                                   0 #> Aasi Clan Militia (Somalia)                                                 0 #> Abakpa Nike Communal Militia (Nigeria)                                     NA event_data_time_actors <-   netify(   event_data,   netify_type='longit_list',   actor1=\"actor1\",actor2= \"actor2\",     time = \"year\",     actor_time_uniform=FALSE,     actor_pds=NULL,     weight=NULL, symmetric=TRUE,   isolates=FALSE, diag_to_NA=TRUE, missing_to_zero=TRUE ) #> ! Warning: there are repeating dyads within time periods in the dataset. When `weight` is not supplied and `sum_dyads` is set to FALSE, edges in the outputted adjacency matrix will represent binary interactions between actors.  event_data_time_actors #> ✔ Hello, you have created network data, yay! #> • Symmetric: Yes #> • Weighted: Yes #> • Number of Unique Actors: 3205 #> • Number of Edges: 17134 #> • Number of Time Points: 19 #> • Average Number of Actors: 592.21 #> • Nodal Attributes: N/A head(lapply(event_data_time_actors, dim)) #> $`2001` #> [1] 188 188 #>  #> $`2002` #> [1] 259 259 #>  #> $`2003` #> [1] 291 291 #>  #> $`2004` #> [1] 319 319 #>  #> $`2005` #> [1] 379 379 #>  #> $`2006` #> [1] 439 439 is.list(event_data_time_actors) #> [1] TRUE"},{"path":"/articles/netify_objectFactory.html","id":"using-netify-as-an-object-factory","dir":"Articles","previous_headings":"","what":"Using netify as an object factory","title":"Using netify as an object factory","text":"netify object factory. can take matrix, array, list data build netlet scratch. can also return empty netlet objects can filled later. can useful complex coding projects want integrate network data structures access functions netify package. First, let’s start creating matrix data. chunk creates object weighted adjacency matrix structure. Nodes , b, c weighted edges connecting . Now, can convert netify object calling get_netify function. adjacency matrix weighted, need tell function network weighted naming weight variable. Great! can see, ’ve created netify network object adjacency matrix attributes typical netify object set default values.","code":"mat <- matrix( rnorm(9), nrow = 3, ncol = 3, dimnames = list(letters[1:3],letters[1:3]) ) mat #>             a          b           c #> a -1.07537435 -1.3191081  0.95826542 #> b  0.86915143 -0.8009156  0.50820268 #> c -0.06747536  0.6507051 -0.01255918 netlet <- netify(mat, weight = 'the_weight_var') netlet #> ✔ Hello, you have created network data, yay! #> • Symmetric: Yes #> • Weighted: Yes #> • Number of Unique Actors: 3 #> • Number of Edges: -0.289107884008562 #> • Number of Time Points: N/A #> • Average Number of Actors: 3 #> • Nodal Attributes: N/A attributes(netlet) #> $dim #> [1] 3 3 #>  #> $dimnames #> $dimnames[[1]] #> [1] \"a\" \"b\" \"c\" #>  #> $dimnames[[2]] #> [1] \"a\" \"b\" \"c\" #>  #>  #> $actor_pds #> $actor_pds[[1]] #> NULL #>  #>  #> $actor_time_uniform #> [1] TRUE #>  #> $weight #> [1] \"the_weight_var\" #>  #> $symmetric #> [1] TRUE #>  #> $isolates #> [1] FALSE #>  #> $diag_to_NA #> [1] TRUE #>  #> $missing_to_zero #> [1] TRUE #>  #> $nodal_data #> $nodal_data[[1]] #> NULL #>  #>  #> $dyad_data #> $dyad_data[[1]] #> NULL #>  #>  #> $graph_data #> $graph_data[[1]] #> NULL #>  #>  #> $netify_type #> [1] \"cross_sec\" #>  #> $class #> [1] \"netify\""},{"path":"/articles/netify_objectFactory.html","id":"pre-allocation-using-get_netify","dir":"Articles","previous_headings":"","what":"Pre-allocation using get_netify","title":"Using netify as an object factory","text":"get_netify can also return empty netify objects proper attributes specification later. can make easier incorporate get_netify netify objects larger data generation process. example, can pre-allocate arbitrary number empty netify objects. ’re using replicate function convenience, control flow statement data generation function (e.g., loops lapply) work. may also want pre-allocate netify objects known attributes already filled . example, might know want number empty asymmetric networks even ’re sure yet data make structure netify objects. get_netify, easy including symmetric parameter function. want include attribute isn’t part usual netify object structure? ’s okay, ! netify objects S3 classes R, ’s easy add arbitrary attributes netify network without breaking functionality. example, let’s name one empty netify objects. ’s limit get_netify object factory can used arbitrary attributes! Let’s add netify object subnet another netify object see happens.","code":"empty_netlet <- netify() attributes(empty_netlet) #> $dim #> [1] 1 1 #>  #> $actor_pds #> $actor_pds[[1]] #> NULL #>  #>  #> $actor_time_uniform #> [1] TRUE #>  #> $weight #> $weight[[1]] #> NULL #>  #>  #> $symmetric #> [1] TRUE #>  #> $isolates #> [1] FALSE #>  #> $diag_to_NA #> [1] TRUE #>  #> $missing_to_zero #> [1] TRUE #>  #> $nodal_data #> $nodal_data[[1]] #> NULL #>  #>  #> $dyad_data #> $dyad_data[[1]] #> NULL #>  #>  #> $graph_data #> $graph_data[[1]] #> NULL #>  #>  #> $netify_type #> [1] \"cross_sec\" #>  #> $class #> [1] \"netify\" allocated_netlet <- replicate(5, netify(), simplify = FALSE) allocated_netlet #> [[1]] #> ✔ Hello, you have created network data, yay! #> • Symmetric: Yes #> • Weighted: No #> • Number of Unique Actors: 1 #> • Number of Edges: 0 #> • Number of Time Points: N/A #> • Average Number of Actors: 1 #> • Nodal Attributes: N/A #>  #> [[2]] #> ✔ Hello, you have created network data, yay! #> • Symmetric: Yes #> • Weighted: No #> • Number of Unique Actors: 1 #> • Number of Edges: 0 #> • Number of Time Points: N/A #> • Average Number of Actors: 1 #> • Nodal Attributes: N/A #>  #> [[3]] #> ✔ Hello, you have created network data, yay! #> • Symmetric: Yes #> • Weighted: No #> • Number of Unique Actors: 1 #> • Number of Edges: 0 #> • Number of Time Points: N/A #> • Average Number of Actors: 1 #> • Nodal Attributes: N/A #>  #> [[4]] #> ✔ Hello, you have created network data, yay! #> • Symmetric: Yes #> • Weighted: No #> • Number of Unique Actors: 1 #> • Number of Edges: 0 #> • Number of Time Points: N/A #> • Average Number of Actors: 1 #> • Nodal Attributes: N/A #>  #> [[5]] #> ✔ Hello, you have created network data, yay! #> • Symmetric: Yes #> • Weighted: No #> • Number of Unique Actors: 1 #> • Number of Edges: 0 #> • Number of Time Points: N/A #> • Average Number of Actors: 1 #> • Nodal Attributes: N/A allocated_weighted_netlet <- replicate(5, netify(symmetric = FALSE), simplify = FALSE) allocated_weighted_netlet #> [[1]] #> ✔ Hello, you have created network data, yay! #> • Symmetric: No #> • Weighted: No #> • Number of Unique Actors: 1 #> • Number of Edges: 0 #> • Number of Time Points: N/A #> • Average Number of Actors: 1 #> • Nodal Attributes: N/A #>  #> [[2]] #> ✔ Hello, you have created network data, yay! #> • Symmetric: No #> • Weighted: No #> • Number of Unique Actors: 1 #> • Number of Edges: 0 #> • Number of Time Points: N/A #> • Average Number of Actors: 1 #> • Nodal Attributes: N/A #>  #> [[3]] #> ✔ Hello, you have created network data, yay! #> • Symmetric: No #> • Weighted: No #> • Number of Unique Actors: 1 #> • Number of Edges: 0 #> • Number of Time Points: N/A #> • Average Number of Actors: 1 #> • Nodal Attributes: N/A #>  #> [[4]] #> ✔ Hello, you have created network data, yay! #> • Symmetric: No #> • Weighted: No #> • Number of Unique Actors: 1 #> • Number of Edges: 0 #> • Number of Time Points: N/A #> • Average Number of Actors: 1 #> • Nodal Attributes: N/A #>  #> [[5]] #> ✔ Hello, you have created network data, yay! #> • Symmetric: No #> • Weighted: No #> • Number of Unique Actors: 1 #> • Number of Edges: 0 #> • Number of Time Points: N/A #> • Average Number of Actors: 1 #> • Nodal Attributes: N/A named_netlet <- netify(name = 'Bob') attributes(named_netlet) #> $dim #> [1] 1 1 #>  #> $actor_pds #> $actor_pds[[1]] #> NULL #>  #>  #> $actor_time_uniform #> [1] TRUE #>  #> $weight #> $weight[[1]] #> NULL #>  #>  #> $symmetric #> [1] TRUE #>  #> $isolates #> [1] FALSE #>  #> $diag_to_NA #> [1] TRUE #>  #> $missing_to_zero #> [1] TRUE #>  #> $nodal_data #> $nodal_data[[1]] #> NULL #>  #>  #> $dyad_data #> $dyad_data[[1]] #> NULL #>  #>  #> $graph_data #> $graph_data[[1]] #> NULL #>  #>  #> $name #> [1] \"Bob\" #>  #> $netify_type #> [1] \"cross_sec\" #>  #> $class #> [1] \"netify\" nested_netlet <- netify(sub_net = netify(name = 'subnet1'),   name = 'parentnet1') attributes(nested_netlet) #> $dim #> [1] 1 1 #>  #> $actor_pds #> $actor_pds[[1]] #> NULL #>  #>  #> $actor_time_uniform #> [1] TRUE #>  #> $weight #> $weight[[1]] #> NULL #>  #>  #> $symmetric #> [1] TRUE #>  #> $isolates #> [1] FALSE #>  #> $diag_to_NA #> [1] TRUE #>  #> $missing_to_zero #> [1] TRUE #>  #> $nodal_data #> $nodal_data[[1]] #> NULL #>  #>  #> $dyad_data #> $dyad_data[[1]] #> NULL #>  #>  #> $graph_data #> $graph_data[[1]] #> NULL #>  #>  #> $sub_net #> ✔ Hello, you have created network data, yay! #> • Symmetric: Yes #> • Weighted: No #> • Number of Unique Actors: 1 #> • Number of Edges: 0 #> • Number of Time Points: N/A #> • Average Number of Actors: 1 #> • Nodal Attributes: N/A #>  #> $name #> [1] \"parentnet1\" #>  #> $netify_type #> [1] \"cross_sec\" #>  #> $class #> [1] \"netify\""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ha Eun Choi. Author. Cassy Dorff. Author. Colin Henry. Author. Shahryar Minhas. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Choi H, Dorff C, Henry C, Minhas S (2023). netify: network stuff. R package version 0.1.0.","code":"@Manual{,   title = {netify: network stuff},   author = {Ha Eun Choi and Cassy Dorff and Colin Henry and Shahryar Minhas},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":"/index.html","id":"overview-","dir":"","previous_headings":"","what":"Overview","title":"Build smart networks","text":"Netify makes networks! supply data netify transforms easy work network data. goal netify provide R functions simplify facilitate common tasks related network creation, summary, visualization, modeling. Although package built social scientists (especially peace science scholars) mind, anyone can use !","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Build smart networks","text":"via devtools + github","code":"install.packages(\"netify\") # install devtools   if (!require(devtools)) {     install.packages(\"devtools\")   }   library(devtools)    install_github(\"netify-dev/netify\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Build smart networks","text":"See netify_introduction information. get started, supply dyadic data set (edgelist) netify. can add information nodal dyadic covariates, time, well specify weights edges network. example, generate longitudional, directed weighted network use code :","code":"library(netify)   data(icews)    icews_conflict <- netify(     dyad_data=icews,     actor1='i', actor2='j',     time='year',     symmetric=FALSE, weight='matlConf')    icews_conflict"},{"path":"/reference/acled.html","id":null,"dir":"Reference","previous_headings":"","what":"Event data slice from ACLED — acled","title":"Event data slice from ACLED — acled","text":"event data ACLED select countries 2001 2019","code":""},{"path":"/reference/acled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event data slice from ACLED — acled","text":"","code":"data(acled)"},{"path":"/reference/acled.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Event data slice from ACLED — acled","text":"acled","code":""},{"path":"/reference/acled.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Event data slice from ACLED — acled","text":"add acled reference (acled)","code":""},{"path":"/reference/acled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Event data slice from ACLED — acled","text":"","code":"data(acled) acled[1:3,] #>    data_id iso event_id_cnty event_id_no_cnty event_date year time_precision #> 6  7395846 706      SOM32683            32683 2020-12-12 2020              1 #> 11 7382796   4      AFG49707            49707 2020-12-12 2020              2 #> 14 7382797   4      AFG49708            49708 2020-12-12 2020              2 #>    event_type                      sub_event_type     actor1 assoc_actor_1 #> 6     Battles Non-state actor overtakes territory Al Shabaab               #> 11    Battles                         Armed clash    Taliban               #> 14    Battles                         Armed clash    Taliban               #>    inter1                                                     actor2 #> 6       2 Military Forces of Somalia (2017-) Puntland Security Force #> 11      2                     Military Forces of Afghanistan (2014-) #> 14      2                       Police Forces of Afghanistan (2014-) #>    assoc_actor_2 inter2 interaction                    region     country #> 6                     1          12            Eastern Africa     Somalia #> 11                    1          12 Caucasus and Central Asia Afghanistan #> 14                    1          12 Caucasus and Central Asia Afghanistan #>    admin1     admin2 admin3 location latitude longitude geo_precision #> 6    Bari Iskushuban           Milxa  10.7712   51.0381             1 #> 11  Balkh      Balkh           Balkh  36.7564   66.8972             2 #> 14  Balkh      Balkh           Balkh  36.7564   66.8972             2 #>            source  source_scale #> 6             VOA International #> 11 Voice of Jihad         Other #> 14 Voice of Jihad         Other #>                                                                                                                                                                                                                                                                      notes #> 6                                                                                        On 12 December 2020, Al Shabaab militants clashed with Puntland security forces and regained control of Milxa village (Iskushuban, Bari). No fatalities and/or injuries reported. #> 11 Around 12 December 2020 (as reported), 1 Afghan security personnel was ambushed and killed by Taliban militants in Balkh district. 2 soldiers were killed and 1 was wounded during a second attack on a check point. Fatalities coded as 0 (VoJ reported 3 fatalities). #> 14                                                                                                                                              Around 12 December 2020 (as reported), 1 policeman was wounded following an attack by Taliban militants in Balkh district. #>    fatalities  timestamp iso3 #> 6           0 1607976279  SOM #> 11          0 1607963814  AFG #> 14          0 1607963814  AFG"},{"path":"/reference/actor_check.html","id":null,"dir":"Reference","previous_headings":"","what":"actor_check — actor_check","title":"actor_check — actor_check","text":"Checks make sure actor fields populated contain NAs non-character values","code":""},{"path":"/reference/actor_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"actor_check — actor_check","text":"","code":"actor_check(actor1, actor2, dyad_data)"},{"path":"/reference/actor_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"actor_check — actor_check","text":"actor1 user inputted object denoting actor1 variable data.frame actor2 user inputted object denoting actor2 variable data.frame dyad_data data.frame actor1 actor2 values located","code":""},{"path":"/reference/actor_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"actor_check — actor_check","text":"returns NULL object stops process error detected","code":""},{"path":"/reference/actor_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"actor_check — actor_check","text":"Ha Eun Choi, Shahryar Minhas","code":""},{"path":"/reference/actor_pds_from_netlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive actor periods attribute from netlet — actor_pds_from_netlet","title":"Derive actor periods attribute from netlet — actor_pds_from_netlet","text":"Derive actor periods attribute netlet","code":""},{"path":"/reference/actor_pds_from_netlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive actor periods attribute from netlet — actor_pds_from_netlet","text":"","code":"actor_pds_from_netlet(netlet)"},{"path":"/reference/actor_pds_from_netlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive actor periods attribute from netlet — actor_pds_from_netlet","text":"netlet multilayer netlet object","code":""},{"path":"/reference/actor_pds_from_netlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive actor periods attribute from netlet — actor_pds_from_netlet","text":"data.frame formatted way actor_pds attribute","code":""},{"path":"/reference/actor_pds_from_netlet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Derive actor periods attribute from netlet — actor_pds_from_netlet","text":"Shahryar Minhas","code":""},{"path":"/reference/actor_pds_to_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"actor_pds_to_frame — actor_pds_to_frame","title":"actor_pds_to_frame — actor_pds_to_frame","text":"function converts actor_pds attribute netify objects data.frame unit observation level","code":""},{"path":"/reference/actor_pds_to_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"actor_pds_to_frame — actor_pds_to_frame","text":"","code":"actor_pds_to_frame(netlet_actor_pds)"},{"path":"/reference/actor_pds_to_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"actor_pds_to_frame — actor_pds_to_frame","text":"netlet_actor_pds actor pds attributes netify object","code":""},{"path":"/reference/actor_pds_to_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"actor_pds_to_frame — actor_pds_to_frame","text":"data.frame object actor pd info actor-time format","code":""},{"path":"/reference/actor_pds_to_frame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"actor_pds_to_frame — actor_pds_to_frame","text":"Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/add_dyad.html","id":null,"dir":"Reference","previous_headings":"","what":"Add dyad data to a netify object — add_dyad","title":"Add dyad data to a netify object — add_dyad","text":"add_dyad takes dataframe outputs netify object.","code":""},{"path":"/reference/add_dyad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add dyad data to a netify object — add_dyad","text":"","code":"add_dyad(   netlet,   dyad_data,   actor1 = NULL,   actor2 = NULL,   time = NULL,   dyad_vars = NULL,   dyad_vars_symmetric = NULL,   replace_existing = FALSE )"},{"path":"/reference/add_dyad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add dyad data to a netify object — add_dyad","text":"netlet netify object dyad_data dataframe object actor1 character: actor 1 data actor2 character: actor 2 data time character object indicating variable dyad_data tracks time dyad_vars vector variables dyad_data merged dyad_vars_symmetric logical vector: whether ties symmetric, default TRUE replace_existing logical indicating whether replace existing nodal data","code":""},{"path":"/reference/add_dyad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add dyad data to a netify object — add_dyad","text":"netify object","code":""},{"path":"/reference/add_dyad.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add dyad data to a netify object — add_dyad","text":"Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/add_dyad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add dyad data to a netify object — add_dyad","text":"","code":"data(icews)  # cross-sectional case icews_10 <- icews[icews$year==2010,]  verbCoop_net <- netify(   dyad_data=icews_10,   actor1 = 'i', actor2 = 'j',    symmetric=FALSE, weight='verbCoop' )  verbCoop_net <- add_dyad(   netlet=verbCoop_net,    dyad_data=icews_10,    actor1='i', actor2='j',    dyad_vars=c('matlCoop', 'verbConf', 'matlConf'),   dyad_vars_symmetric = rep(FALSE, 3) )  # dyadic data is stored in the dyad_data attribute # as an array, it can be accessed in the following way: dyad_array <- attr(verbCoop_net, 'dyad_data')[[1]] dim(dyad_array) #> [1] 152 152   3  # the dimensions of the array are: nr x nc x pd, where # nr is the number of row actors, nc is the number of column actors, # and pd is the number of dyadic variables  # longitudinal case verbCoop_longit_net <- netify(     dyad_data=icews,      actor1='i', actor2='j', time='year',     symmetric=FALSE,     weight='verbCoop' )  verbCoop_longit_net <- add_dyad(     netlet=verbCoop_longit_net,     dyad_data=icews,      actor1='i', actor2='j', time='year',     dyad_vars = c('matlCoop', 'verbConf', 'matlConf'),     dyad_vars_symmetric=rep(FALSE, 3) )  # dyadic data in the longit case is still stored in # the dyad_data attribute but now as a list of arrays,  # it can be accessed in the following way: dyad_array_list <- attr(verbCoop_longit_net, 'dyad_data') dim(dyad_array_list[['2002']]) #> [1] 152 152   3  # the names of the list elements correspond to the time # periods and each array within the list is of the same # dimensions as the array in the cross-sectional case"},{"path":"/reference/add_dyad_to_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"add_dyad_to_igraph — add_dyad_to_igraph","title":"add_dyad_to_igraph — add_dyad_to_igraph","text":"Add dyad attributes igraph object netify object","code":""},{"path":"/reference/add_dyad_to_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_dyad_to_igraph — add_dyad_to_igraph","text":"","code":"add_dyad_to_igraph(netlet, dyad_data_list, igraph_object, time = NULL)"},{"path":"/reference/add_dyad_to_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_dyad_to_igraph — add_dyad_to_igraph","text":"netlet netify object dyad_data_list dyad data netlet object igraph_object igraph object modify time time indicator longit case","code":""},{"path":"/reference/add_dyad_to_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_dyad_to_igraph — add_dyad_to_igraph","text":"igraph object dyad attributes added","code":""},{"path":"/reference/add_dyad_to_igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"add_dyad_to_igraph — add_dyad_to_igraph","text":"Shahryar Minhas","code":""},{"path":"/reference/add_dyad_to_network.html","id":null,"dir":"Reference","previous_headings":"","what":"add_dyad_to_network — add_dyad_to_network","title":"add_dyad_to_network — add_dyad_to_network","text":"Add dyad attributes network object netify object","code":""},{"path":"/reference/add_dyad_to_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_dyad_to_network — add_dyad_to_network","text":"","code":"add_dyad_to_network(netlet, dyad_data_list, network_object, time = NULL)"},{"path":"/reference/add_dyad_to_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_dyad_to_network — add_dyad_to_network","text":"netlet netify object dyad_data_list dyad data netlet object network_object network object modify time time indicator longit case","code":""},{"path":"/reference/add_dyad_to_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_dyad_to_network — add_dyad_to_network","text":"network object dyad attributes added","code":""},{"path":"/reference/add_dyad_to_network.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"add_dyad_to_network — add_dyad_to_network","text":"Shahryar Minhas","code":""},{"path":"/reference/add_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds graph level data to a netify object — add_graph","title":"Adds graph level data to a netify object — add_graph","text":"add_graph takes dataframe outputs netify object.","code":""},{"path":"/reference/add_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds graph level data to a netify object — add_graph","text":"","code":"add_graph(netlet, graph_data, time = NULL, graph_vars = NULL)"},{"path":"/reference/add_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds graph level data to a netify object — add_graph","text":"netlet netify object graph_data dataframe object time character object indicating variable graph_data tracks time graph_vars vector variables graph_data merged","code":""},{"path":"/reference/add_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds graph level data to a netify object — add_graph","text":"netify object","code":""},{"path":"/reference/add_graph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds graph level data to a netify object — add_graph","text":"Shahryar Minhas","code":""},{"path":"/reference/add_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds graph level data to a netify object — add_graph","text":"","code":"data(icews)  # cross-sectional case icews_10 <- icews[icews$year==2010,]   verbCoop_net <- netify(   dyad_data=icews_10,   actor1 = 'i', actor2 = 'j',    symmetric=FALSE, weight='verbCoop' )  # graph data should be a dataframe with one row  # in the cross-sectional case and one row per   # period in the longitudinal case, e.g.: graphData <- summary(verbCoop_net)"},{"path":"/reference/add_nodal.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds nodal data to a netify object — add_nodal","title":"Adds nodal data to a netify object — add_nodal","text":"add_nodal takes dataframe outputs netify object.","code":""},{"path":"/reference/add_nodal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds nodal data to a netify object — add_nodal","text":"","code":"add_nodal(   netlet,   node_data,   actor = NULL,   time = NULL,   node_vars = NULL,   replace_existing = FALSE )"},{"path":"/reference/add_nodal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds nodal data to a netify object — add_nodal","text":"netlet netify object node_data dataframe object actor character object indicating variable node_data uniquely IDs node time character object indicating variable node_data tracks time node_vars vector variables node_data merged replace_existing logical indicating whether replace existing nodal data","code":""},{"path":"/reference/add_nodal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds nodal data to a netify object — add_nodal","text":"netify object","code":""},{"path":"/reference/add_nodal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds nodal data to a netify object — add_nodal","text":"Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/add_nodal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds nodal data to a netify object — add_nodal","text":"","code":"data(icews)  # cross-sectional case icews_10 <- icews[icews$year==2010,]   verbCoop_net <- netify(   dyad_data=icews_10,   actor1 = 'i', actor2 = 'j',    symmetric=FALSE, weight='verbCoop' )  # nodal data should be a dataframe with one row per actor # in the cross-sectional case and one row per actor per  # time period in the longitudinal case, e.g.: nvars = c(   'i_polity2',   'i_gdp', 'i_log_gdp',   'i_pop', 'i_log_pop' ) nodeData <- unique(icews_10[,c('i', nvars)]) head(nodeData) #>                 i i_polity2        i_gdp i_log_gdp    i_pop i_log_pop #> 10    Afghanistan        NA  16047892927  23.49884 28189672  17.15447 #> 2250      Albania         9  10420206418  23.06701  2913021  14.88470 #> 4490      Algeria         2 140977153156  25.67186 35856344  17.39503 #> 6730       Angola        -2  69938841426  24.97089 23364185  16.96671 #> 8970    Argentina         8 552738161802  27.03815 40788453  17.52391 #> 11210     Armenia         5   8513508876  22.86492  2946293  14.89606  verbCoop_net <- add_nodal(    netlet=verbCoop_net, node_data=nodeData,    actor='i', node_vars=nvars )  # nodal data is stored in the nodal_data attribute # as a data.frame, it can be accessed in the following way: node_data <- attr(verbCoop_net, 'nodal_data') head(node_data) #>         actor i_polity2        i_gdp i_log_gdp    i_pop i_log_pop #> 1 Afghanistan        NA  16047892927  23.49884 28189672  17.15447 #> 2     Albania         9  10420206418  23.06701  2913021  14.88470 #> 3     Algeria         2 140977153156  25.67186 35856344  17.39503 #> 4      Angola        -2  69938841426  24.97089 23364185  16.96671 #> 5   Argentina         8 552738161802  27.03815 40788453  17.52391 #> 6     Armenia         5   8513508876  22.86492  2946293  14.89606  # longitudinal case verbCoop_longit_net <- netify(     dyad_data=icews,      actor1='i', actor2='j', time='year',     symmetric=FALSE,     weight='verbCoop' )  nodeData <- unique(icews[,c('i', 'year', nvars)])  verbCoop_longit_net <- add_nodal(   netlet=verbCoop_longit_net,   node_data=nodeData,    actor='i', time='year',   node_vars = nvars )  # and in the longitudinal case, it can be accessed # in the same way node_data <- attr(verbCoop_longit_net, 'nodal_data') head(node_data) #>         actor time i_polity2       i_gdp i_log_gdp    i_pop i_log_pop #> 1 Afghanistan 2002        NA  7555185296  22.74550 21000256  16.86005 #> 2 Afghanistan 2003        NA  8222480251  22.83014 22645130  16.93546 #> 3 Afghanistan 2004        NA  8338755823  22.84418 23553551  16.97479 #> 4 Afghanistan 2005        NA  9275174321  22.95061 24411191  17.01055 #> 5 Afghanistan 2006        NA  9772082812  23.00280 25442944  17.05195 #> 6 Afghanistan 2007        NA 11123202208  23.13230 25903301  17.06988"},{"path":"/reference/add_nodal_to_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"add_nodal_to_igraph — add_nodal_to_igraph","title":"add_nodal_to_igraph — add_nodal_to_igraph","text":"Add nodal attributes igraph object netify object","code":""},{"path":"/reference/add_nodal_to_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_nodal_to_igraph — add_nodal_to_igraph","text":"","code":"add_nodal_to_igraph(netlet, node_data, igraph_object, time = NULL)"},{"path":"/reference/add_nodal_to_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_nodal_to_igraph — add_nodal_to_igraph","text":"netlet netify object node_data node data netlet object igraph_object igraph object modify time time indicator longit case","code":""},{"path":"/reference/add_nodal_to_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_nodal_to_igraph — add_nodal_to_igraph","text":"igraph object nodal attributes added","code":""},{"path":"/reference/add_nodal_to_igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"add_nodal_to_igraph — add_nodal_to_igraph","text":"Shahryar Minhas","code":""},{"path":"/reference/add_nodal_to_network.html","id":null,"dir":"Reference","previous_headings":"","what":"add_nodal_to_network — add_nodal_to_network","title":"add_nodal_to_network — add_nodal_to_network","text":"Add nodal attributes network object netify object","code":""},{"path":"/reference/add_nodal_to_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_nodal_to_network — add_nodal_to_network","text":"","code":"add_nodal_to_network(netlet, node_data, network_object, time = NULL)"},{"path":"/reference/add_nodal_to_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_nodal_to_network — add_nodal_to_network","text":"netlet netify object node_data node data netlet object network_object network object modify time time indicator longit case","code":""},{"path":"/reference/add_nodal_to_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_nodal_to_network — add_nodal_to_network","text":"network object nodal attributes added","code":""},{"path":"/reference/add_nodal_to_network.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"add_nodal_to_network — add_nodal_to_network","text":"Shahryar Minhas","code":""},{"path":"/reference/add_var_time_check.html","id":null,"dir":"Reference","previous_headings":"","what":"add_var_time_check — add_var_time_check","title":"add_var_time_check — add_var_time_check","text":"Stops process user tries add time non-longitudinal dataset vice versa","code":""},{"path":"/reference/add_var_time_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_var_time_check — add_var_time_check","text":"","code":"add_var_time_check(netlet, time)"},{"path":"/reference/add_var_time_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_var_time_check — add_var_time_check","text":"netlet user inputted netlet object time user inputted time variable","code":""},{"path":"/reference/add_var_time_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_var_time_check — add_var_time_check","text":"returns NULL object stops process error detected","code":""},{"path":"/reference/add_var_time_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"add_var_time_check — add_var_time_check","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"/reference/adj_igraph_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"adj_igraph_positions — adj_igraph_positions","title":"adj_igraph_positions — adj_igraph_positions","text":"Match igraph edge order matrix data purpose setting edge attributes","code":""},{"path":"/reference/adj_igraph_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adj_igraph_positions — adj_igraph_positions","text":"","code":"adj_igraph_positions(adj_mat, igraph_object)"},{"path":"/reference/adj_igraph_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"adj_igraph_positions — adj_igraph_positions","text":"adj_mat adjacency matrix igraph_object igraph object modify","code":""},{"path":"/reference/adj_igraph_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"adj_igraph_positions — adj_igraph_positions","text":"matrix object actor positions match adj_mat igraph_object","code":""},{"path":"/reference/adj_igraph_positions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"adj_igraph_positions — adj_igraph_positions","text":"Shahryar Minhas","code":""},{"path":"/reference/agg_across_units.html","id":null,"dir":"Reference","previous_headings":"","what":"agg_across_units — agg_across_units","title":"agg_across_units — agg_across_units","text":"Aggregate dyadic dataset","code":""},{"path":"/reference/agg_across_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"agg_across_units — agg_across_units","text":"","code":"agg_across_units(   dyad_data,   actor1,   actor2,   time = NULL,   weight,   symmetric,   ignore_missing = TRUE )"},{"path":"/reference/agg_across_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"agg_across_units — agg_across_units","text":"dyad_data user inputted data.frame object actor1 character: actor 1 data actor2 character: actor 2 data time character: time data weight character: weight variable data symmetric logical: adjacency matrix symmetric ignore_missing logical: missing values ignored","code":""},{"path":"/reference/agg_across_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"agg_across_units — agg_across_units","text":"aggregated data.frame object","code":""},{"path":"/reference/agg_across_units.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"agg_across_units — agg_across_units","text":"Shahryar Minhas","code":""},{"path":"/reference/array_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"array_to_list — array_to_list","title":"array_to_list — array_to_list","text":"function converts three dimensional array list matrices","code":""},{"path":"/reference/array_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"array_to_list — array_to_list","text":"","code":"array_to_list(arr, preserveAttr = TRUE)"},{"path":"/reference/array_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"array_to_list — array_to_list","text":"arr three dimensional array list preserveAttr logical indicating whether preserve attributes","code":""},{"path":"/reference/array_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"array_to_list — array_to_list","text":"list object","code":""},{"path":"/reference/array_to_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"array_to_list — array_to_list","text":"Shahryar Minhas","code":""},{"path":"/reference/char.html","id":null,"dir":"Reference","previous_headings":"","what":"char — char","title":"char — char","text":"Converts values characters","code":""},{"path":"/reference/char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"char — char","text":"","code":"char(x)"},{"path":"/reference/char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"char — char","text":"x vector","code":""},{"path":"/reference/char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"char — char","text":"character vector","code":""},{"path":"/reference/char.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"char — char","text":"Shahryar Minhas","code":""},{"path":"/reference/check_layer_compatible.html","id":null,"dir":"Reference","previous_headings":"","what":"Cycle through elements of a netlet object and make sure\nthat they are identical before we try to merge into\na multilayer netify object — check_layer_compatible","title":"Cycle through elements of a netlet object and make sure\nthat they are identical before we try to merge into\na multilayer netify object — check_layer_compatible","text":"Cycle elements netlet object make sure identical try merge multilayer netify object","code":""},{"path":"/reference/check_layer_compatible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cycle through elements of a netlet object and make sure\nthat they are identical before we try to merge into\na multilayer netify object — check_layer_compatible","text":"","code":"check_layer_compatible(a_list, elems, msg)"},{"path":"/reference/check_layer_compatible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cycle through elements of a netlet object and make sure\nthat they are identical before we try to merge into\na multilayer netify object — check_layer_compatible","text":"a_list list object check elems character vector names elements check msg character vector length two warning user elements found identical. First part vector preamble element name second part come element name.","code":""},{"path":"/reference/df_check.html","id":null,"dir":"Reference","previous_headings":"","what":"df_check — df_check","title":"df_check — df_check","text":"Checks make sure data.frame inputted tibble data.frame inputted converted base R data.frame object","code":""},{"path":"/reference/df_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"df_check — df_check","text":"","code":"df_check(df, msg = \"Error: check data type. `dyad_data` is not a dataframe.\")"},{"path":"/reference/df_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"df_check — df_check","text":"df user inputted object check msg msg user df check fails","code":""},{"path":"/reference/df_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"df_check — df_check","text":"data.frame object","code":""},{"path":"/reference/df_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"df_check — df_check","text":"Ha Eun Choi, Shahryar Minhas","code":""},{"path":"/reference/edge_value_check.html","id":null,"dir":"Reference","previous_headings":"","what":"edge_value_check — edge_value_check","title":"edge_value_check — edge_value_check","text":"Warns user edge values adjacency matrices determined","code":""},{"path":"/reference/edge_value_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"edge_value_check — edge_value_check","text":"","code":"edge_value_check(weight, sum_dyads, time = FALSE)"},{"path":"/reference/edge_value_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"edge_value_check — edge_value_check","text":"weight user inputted weight value sum_dyads user inputted sum_dyads logical time logical indicating whether inputted data longitudinal","code":""},{"path":"/reference/edge_value_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"edge_value_check — edge_value_check","text":"returns NULL object provides warnings users","code":""},{"path":"/reference/edge_value_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"edge_value_check — edge_value_check","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"/reference/event_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Event data slice from ACLED and UCDP — event_data","title":"Event data slice from ACLED and UCDP — event_data","text":"Merged event data UCDP ACLED select countries 2001 2019","code":""},{"path":"/reference/event_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event data slice from ACLED and UCDP — event_data","text":"","code":"data(event_data)"},{"path":"/reference/event_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Event data slice from ACLED and UCDP — event_data","text":"acled","code":""},{"path":"/reference/event_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Event data slice from ACLED and UCDP — event_data","text":"add acled ucdp reference (acled)","code":""},{"path":"/reference/event_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Event data slice from ACLED and UCDP — event_data","text":"","code":"data(event_data) event_data[1:3,] #>   data_id            cname cowc event_date year #> 1 6714129          Somalia  SOM 2019-12-31 2019 #> 2 7187987 Congo - Kinshasa  DRC 2019-12-31 2019 #> 3 7210326            Sudan  SUD 2019-12-31 2019 #>                                                        actor1 #> 1                                                  Al Shabaab #> 2 Military Forces of the Democratic Republic of Congo (2019-) #> 3              Awlad Mansour Misseriya Ethnic Militia (Sudan) #>                                        actor2         admin1  admin2 latitude #> 1          Military Forces of Somalia (2017-) Lower Shabelle Afgooye   2.3963 #> 2               ADF: Allied Democratic Forces      Nord-Kivu    Beni   0.6287 #> 3 Awlad Gaid Misseriya Ethnic Militia (Sudan)   South Darfur  Bielel  12.2443 #>   longitude fatalities source #> 1   45.0159          0  acled #> 2   29.9411          1  acled #> 3   25.1096          3  acled"},{"path":"/reference/filter_layers.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters to specified layer(s) of a netify multilayer network object. — filter_layers","title":"Filters to specified layer(s) of a netify multilayer network object. — filter_layers","text":"Filters specified layer(s) netify multilayer network object.","code":""},{"path":"/reference/filter_layers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters to specified layer(s) of a netify multilayer network object. — filter_layers","text":"","code":"filter_layers(netlet, layer_labels)"},{"path":"/reference/filter_layers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters to specified layer(s) of a netify multilayer network object. — filter_layers","text":"netlet multilayer netlet object layer_labels character: label layers filtered ","code":""},{"path":"/reference/filter_layers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filters to specified layer(s) of a netify multilayer network object. — filter_layers","text":"netlet object subsetted chosen layers","code":""},{"path":"/reference/filter_layers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filters to specified layer(s) of a netify multilayer network object. — filter_layers","text":"Shahryar Minhas","code":""},{"path":"/reference/filter_layers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters to specified layer(s) of a netify multilayer network object. — filter_layers","text":"","code":"library(netify) data(icews) icews_10 <- icews[icews$year==2010,]  # generate netify objects that will be layered together icews_verbCoop <- netify(     dyad_data=icews_10, actor1='i', actor2='j',     symmetric=FALSE, weight='verbCoop' )              icews_verbConf <- netify(     dyad_data=icews_10, actor1='i', actor2='j',     symmetric=FALSE, weight='verbConf' )  icews_matlCoop <- netify(     dyad_data=icews_10, actor1='i', actor2='j',     symmetric=FALSE, weight='matlCoop' )  icews_matlConf <- netify(     dyad_data=icews_10, actor1='i', actor2='j',     symmetric=FALSE, weight='matlConf' )  icews_layers <- layer_netify(     netlet_list=list(         icews_verbCoop, icews_matlCoop,         icews_verbConf, icews_matlConf ),     layer_labels=c(         'verbCoop', 'matlCoop',         'verbConf', 'matlConf' ) )  # filter to verbCoop and verbConf layers icews_verb <- filter_layers(     netlet=icews_layers,      layer_labels=c('verbCoop', 'verbConf') )  # so you know what to filter,  # information on layer labels can be accessed  # from  the `layer_labels` attribute  attr(icews_layers, 'layers') #> [1] \"verbCoop\" \"matlCoop\" \"verbConf\" \"matlConf\""},{"path":"/reference/gen_symm_id.html","id":null,"dir":"Reference","previous_headings":"","what":"gen_symm_id — gen_symm_id","title":"gen_symm_id — gen_symm_id","text":"function creates symmetric id given pair actors","code":""},{"path":"/reference/gen_symm_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gen_symm_id — gen_symm_id","text":"","code":"gen_symm_id(dyad_data, actor1, actor2, time = NULL)"},{"path":"/reference/gen_symm_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gen_symm_id — gen_symm_id","text":"dyad_data dyadic data.frame object actor1 name actor1 column actor2 name actor2 column time name time column relevant","code":""},{"path":"/reference/gen_symm_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gen_symm_id — gen_symm_id","text":"vector symmetric ids can added back data.frame object","code":""},{"path":"/reference/gen_symm_id.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gen_symm_id — gen_symm_id","text":"Shahryar Minhas","code":""},{"path":"/reference/get_actor_time_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a dataframe indicating start and end time point — get_actor_time_info","title":"Creates a dataframe indicating start and end time point — get_actor_time_info","text":"get_actor_time_info takes longitudinal dyadic dataset computes actors entered exited network. Entering determined first period actor interaction exiting last period.","code":""},{"path":"/reference/get_actor_time_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a dataframe indicating start and end time point — get_actor_time_info","text":"","code":"get_actor_time_info(dyad_data, actor1, actor2, time)"},{"path":"/reference/get_actor_time_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a dataframe indicating start and end time point — get_actor_time_info","text":"dyad_data dyadic dataframe actor1 character: actor 1 data actor2 character: actor 2 data time character: time data","code":""},{"path":"/reference/get_actor_time_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a dataframe indicating start and end time point — get_actor_time_info","text":"dataframe three columns:  actora column indicating actors data  min_timea column indicating first time point actor considered part network  max_timea column indicating last time point actor considered part network","code":""},{"path":"/reference/get_actor_time_info.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a dataframe indicating start and end time point — get_actor_time_info","text":"Shahryar Minhas, Ha Eun Choi","code":""},{"path":"/reference/get_actor_time_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a dataframe indicating start and end time point — get_actor_time_info","text":"","code":"library(peacesciencer) #> {peacesciencer} includes additional remote data for separate download. Please type ?download_extdata() for more information. #> This message disappears on load when these data are downloaded and in the package's `extdata` directory. library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union cow_dyads <- create_dyadyears(   subset_years = c(1980:2001)   ) %>%   # add mids   add_cow_mids() #> Joining with `by = join_by(ccode1, ccode2, year)` #> Joining with `by = join_by(ccode1, ccode2, year)` #> add_cow_mids() IMPORTANT MESSAGE: By default, this function whittles dispute-year data into dyad-year data by first selecting on unique onsets. Thereafter, where duplicates remain, it whittles dispute-year data into dyad-year data in the following order: 1) retaining highest `fatality`, 2) retaining highest `hostlev`, 3) retaining highest estimated `mindur`, 4) retaining highest estimated `maxdur`, 5) retaining reciprocated over non-reciprocated observations, 6) retaining the observation with the lowest start month, and, where duplicates still remained (and they don't), 7) forcibly dropping all duplicates for observations that are otherwise very similar. #> See: http://svmiller.com/peacesciencer/articles/coerce-dispute-year-dyad-year.html actor_time <- get_actor_time_info(   dyad_data = cow_dyads,    actor1 = 'ccode1',    actor2 = 'ccode2',    time = 'year' )"},{"path":"/reference/get_adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a dyadic data into a network in various formats — get_adjacency","title":"Converts a dyadic data into a network in various formats — get_adjacency","text":"get_adjacency takes dyadic dataset outputs adjacency matrix representation.","code":""},{"path":"/reference/get_adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a dyadic data into a network in various formats — get_adjacency","text":"","code":"get_adjacency(   dyad_data,   actor1 = NULL,   actor2 = NULL,   symmetric = TRUE,   mode = \"unipartite\",   weight = NULL,   sum_dyads = FALSE,   diag_to_NA = TRUE,   missing_to_zero = TRUE )"},{"path":"/reference/get_adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a dyadic data into a network in various formats — get_adjacency","text":"dyad_data dyadic dataframe (tibble) actor1 character: name actor 1 dyad_data actor2 character: name actor 2 dyad_data symmetric logical: whether ties symmetric, default TRUE mode character: whether network unipartite bipartite, default unipartite weight character: name weighted edges variable, default NULL sum_dyads logical: whether sum weight value exists repeating dyads within dataset diag_to_NA logical: whether diagonals set NA, default TRUE missing_to_zero logical: whether missing values set zero, default TRUE","code":""},{"path":"/reference/get_adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a dyadic data into a network in various formats — get_adjacency","text":"adjacency matrix class netify","code":""},{"path":"/reference/get_adjacency.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converts a dyadic data into a network in various formats — get_adjacency","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/get_adjacency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts a dyadic data into a network in various formats — get_adjacency","text":"","code":"# load example directed event data from ICEWS # this data comes in the form of a dyadic # dataframe where all dyad pairs are listed data(icews)  # subset to a particular year icews <- icews[icews$year=='2010', ]  # generate a cross sectional, directed, and weighted network # where the weights are verbCoop icews_verbCoop <- get_adjacency(   dyad_data=icews, actor1='i', actor2='j',   symmetric=FALSE, weight='verbCoop' ) # generate a cross sectional, directed and weighted network # where the weights are matlConf icews_matlConf <- get_adjacency(   dyad_data=icews, actor1='i', actor2='j',   symmetric=FALSE, weight='matlConf' )  # another example using cow data # gathered from the peacesciencer package library(peacesciencer) library(dplyr)  # create dyadic data set over time cow_dyads <- create_dyadyears(      subset_years = c(1992:2014)     ) %>%     # add mids     add_cow_mids() #> Joining with `by = join_by(ccode1, ccode2, year)` #> Joining with `by = join_by(ccode1, ccode2, year)` #> add_cow_mids() IMPORTANT MESSAGE: By default, this function whittles dispute-year data into dyad-year data by first selecting on unique onsets. Thereafter, where duplicates remain, it whittles dispute-year data into dyad-year data in the following order: 1) retaining highest `fatality`, 2) retaining highest `hostlev`, 3) retaining highest estimated `mindur`, 4) retaining highest estimated `maxdur`, 5) retaining reciprocated over non-reciprocated observations, 6) retaining the observation with the lowest start month, and, where duplicates still remained (and they don't), 7) forcibly dropping all duplicates for observations that are otherwise very similar. #> See: http://svmiller.com/peacesciencer/articles/coerce-dispute-year-dyad-year.html  # the cross-sections refer to the number of  # conflict onsets between dyads during # the time period of the data  mid_network <- netify(   cow_dyads,   actor1='ccode1', actor2='ccode2',   weight='cowmidonset',    sum_dyads=TRUE, symmetric=TRUE,   diag_to_NA=TRUE, missing_to_zero=TRUE) #> ! Warning: Converting `actor1` and/or `actor2` to character vector(s). mid_network  #> ✔ Hello, you have created network data, yay! #> • Cross-Sectional #> • Unipartite #> • Symmetric #> • Sum of Weights from `cowmidonset` #> • No Loops Allowed #> • Cross-Sectional #> • # Unique Row Actors: 196 #> • # Unique Column Actors: 196 #> • # Unique Actors: 196 #>               nLoops nEdges    density recip propNA #> 1 cowmidonset    N/A    696 0.09513344   N/A    N/A #> • Nodal Features: None #> • Dyad Features: None #> • Graph Features: None  # now lets say that we just want to  # see whether any conflict onset # occurred between a dyad during  # this period and generate # a network object that represents this  # to generate this we need to first subset # the raw data into an edge list like format # this only involves subsetting the variable # that you are using to represent edges to be # a value above zero cow_dyad_conflict_onset <- cow_dyads %>%     filter(         cowmidonset > 0     )  # then we use the netify function and  # we no longer supply a weight, since the # dyads themselves are giving information about # edges that occurred and in addition we leave # sum_dyads as FALSE any_mid_network <- netify(   cow_dyad_conflict_onset,   actor1='ccode1', actor2='ccode2',   sum_dyads=FALSE, symmetric=TRUE,   diag_to_NA=TRUE, missing_to_zero=TRUE) #> ! Warning: Converting `actor1` and/or `actor2` to character vector(s). #> ! Warning: there are repeating dyads within time periods in the dataset. When `weight` is not supplied and `sum_dyads` is set to FALSE, edges in the outputted adjacency matrix will represent binary interactions between actors. mid_network #> ✔ Hello, you have created network data, yay! #> • Cross-Sectional #> • Unipartite #> • Symmetric #> • Sum of Weights from `cowmidonset` #> • No Loops Allowed #> • Cross-Sectional #> • # Unique Row Actors: 196 #> • # Unique Column Actors: 196 #> • # Unique Actors: 196 #>               nLoops nEdges    density recip propNA #> 1 cowmidonset    N/A    696 0.09513344   N/A    N/A #> • Nodal Features: None #> • Dyad Features: None #> • Graph Features: None"},{"path":"/reference/get_adjacency_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Longitudinal variants of get_adjacency() which returns a three-dimensional array — get_adjacency_array","title":"Longitudinal variants of get_adjacency() which returns a three-dimensional array — get_adjacency_array","text":"get_adjacency_array takes dyadic dataset outputs three-dimensional array first two dimensions corresponding actors third dimension corresponding time. function used actor composition remains constant throughout time.","code":""},{"path":"/reference/get_adjacency_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Longitudinal variants of get_adjacency() which returns a three-dimensional array — get_adjacency_array","text":"","code":"get_adjacency_array(   dyad_data,   actor1 = NULL,   actor2 = NULL,   time = NULL,   symmetric = TRUE,   mode = \"unipartite\",   weight = NULL,   sum_dyads = FALSE,   diag_to_NA = TRUE,   missing_to_zero = TRUE )"},{"path":"/reference/get_adjacency_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Longitudinal variants of get_adjacency() which returns a three-dimensional array — get_adjacency_array","text":"dyad_data dyadic dataframe (tibble) actor1 character: name actor 1 variable dyad_data actor2 character: name actor 2 variable dyad_data time character: name time variable dyad_data, values time variable numeric symmetric logical: whether ties symmetric, default TRUE mode character: whether network unipartite bipartite, default unipartite weight character: name weighted edges variable, default NULL sum_dyads logical: whether sum weight value exists repeating dyads diag_to_NA logical: whether diagonals set NA, default TRUE missing_to_zero logical: whether missing values set zero, default TRUE","code":""},{"path":"/reference/get_adjacency_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Longitudinal variants of get_adjacency() which returns a three-dimensional array — get_adjacency_array","text":"array class netify","code":""},{"path":"/reference/get_adjacency_array.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Longitudinal variants of get_adjacency() which returns a three-dimensional array — get_adjacency_array","text":"Cassy Dorff, Ha Eun Choi, Shahryar Minhas","code":""},{"path":"/reference/get_adjacency_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Longitudinal variants of get_adjacency() which returns a three-dimensional array — get_adjacency_array","text":"","code":"# load example directed event data from ICEWS # this data comes in the form of a dyadic # dataframe where all dyad pairs are listed data(icews)  # generate a longitudinal, directed and weighted network # where the weights are matlConf icews_matlConf <- get_adjacency_array(   dyad_data=icews,    actor1='i', actor2='j', time='year',   symmetric=FALSE, weight='matlConf' )"},{"path":"/reference/get_adjacency_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Longitudinal variants of get_adjacency() which returns a list of adjacency matrices — get_adjacency_list","title":"Longitudinal variants of get_adjacency() which returns a list of adjacency matrices — get_adjacency_list","text":"function takes dyadic dataset outputs list adjacency matrices actor composition network can vary time.","code":""},{"path":"/reference/get_adjacency_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Longitudinal variants of get_adjacency() which returns a list of adjacency matrices — get_adjacency_list","text":"","code":"get_adjacency_list(   dyad_data,   actor1 = NULL,   actor2 = NULL,   time = NULL,   symmetric = TRUE,   mode = \"unipartite\",   weight = NULL,   sum_dyads = FALSE,   actor_time_uniform = FALSE,   actor_pds = NULL,   diag_to_NA = TRUE,   missing_to_zero = TRUE )"},{"path":"/reference/get_adjacency_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Longitudinal variants of get_adjacency() which returns a list of adjacency matrices — get_adjacency_list","text":"dyad_data dyadic dataframe (tibble) actor1 character: name actor 1 variable dyad_data actor2 character: name actor 2 variable dyad_data time character: name time variable dyad_data, values time variable numeric symmetric logical: whether ties symmetric, default TRUE mode character: whether network unipartite bipartite, default unipartite weight character: name weighted edges variable, default NULL sum_dyads logical: whether sum weight value exists repeating dyads within time periods actor_time_uniform logical: whether assume actors across full time series observed data TRUE means actors across full time series observed data FALSE means actors come observed data \"existence\" determined data, meaning first year existence determined time point first event last year existence time point last event actor_pds data.frame indicating start end time point every actor, can created manually (see example) using get_actor_time_info.R, provided choice actor_time_uniform irrelevant. diag_to_NA logical: whether diagonals set NA, default TRUE missing_to_zero logical: whether missing values set zero, default TRUE","code":""},{"path":"/reference/get_adjacency_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Longitudinal variants of get_adjacency() which returns a list of adjacency matrices — get_adjacency_list","text":"list adjacency matrices class netify","code":""},{"path":"/reference/get_adjacency_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Longitudinal variants of get_adjacency() which returns a list of adjacency matrices — get_adjacency_list","text":"Cassy Dorff, Ha Eun Choi, Shahryar Minhas","code":""},{"path":"/reference/get_adjacency_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Longitudinal variants of get_adjacency() which returns a list of adjacency matrices — get_adjacency_list","text":"","code":"# load example directed event data from ICEWS # this data comes in the form of a dyadic # dataframe where all dyad pairs are listed data(icews)  # generate a longitudinal, directed, and weighted network # where the weights are verbConf # note that in longitudinal networks we can have all the  # same actors in every year and if that's the case # we set actor_time_uniform to TRUE, in the next # example we'll show how to adjust when actors # change over time icews_verbConf <- get_adjacency_list(   dyad_data=icews,    actor1='i', actor2='j', time='year',   actor_time_uniform=TRUE,   symmetric=FALSE, weight='verbConf' ) icews_verbConf #> ✔ Hello, you have created network data, yay! #> • Longitudinal #> • Unipartite #> • Asymmetric #> • Weights from `verbConf` #> • No Loops Allowed #> • Longitudinal: 13 Periods #> • # Unique Row Actors: 152 #> • # Unique Column Actors: 152 #> • # Unique Actors: 152 #>            nLoops nEdges  density     recip propNA #> 1 verbConf    N/A  33146 1.499786 0.8122747    N/A #> • Nodal Features: None #> • Dyad Features: None #> • Graph Features: None  # another example using cow data # gathered from the peacesciencer package library(peacesciencer) library(dplyr)  # create dyadic data set over time (NGOs) cow_dyads <- create_dyadyears(      subset_years = c(1980:2001)     ) %>%     # add mids     add_cow_mids() #> Joining with `by = join_by(ccode1, ccode2, year)` #> Joining with `by = join_by(ccode1, ccode2, year)` #> add_cow_mids() IMPORTANT MESSAGE: By default, this function whittles dispute-year data into dyad-year data by first selecting on unique onsets. Thereafter, where duplicates remain, it whittles dispute-year data into dyad-year data in the following order: 1) retaining highest `fatality`, 2) retaining highest `hostlev`, 3) retaining highest estimated `mindur`, 4) retaining highest estimated `maxdur`, 5) retaining reciprocated over non-reciprocated observations, 6) retaining the observation with the lowest start month, and, where duplicates still remained (and they don't), 7) forcibly dropping all duplicates for observations that are otherwise very similar. #> See: http://svmiller.com/peacesciencer/articles/coerce-dispute-year-dyad-year.html  # now lets create a network object in which # we generate list of networks in which the # cross-sections represent mid onset # additionally note that the raw data involves # country years in which we saw countries go in # and out of existence so we set actor_time_uniform # to FALSE mid_network <- netify(   cow_dyads,   actor1='ccode1', actor2='ccode2', time='year',   weight='cowmidonset',    actor_time_uniform=FALSE,   sum_dyads=FALSE, symmetric=TRUE,   diag_to_NA=TRUE, missing_to_zero=TRUE) #> ! Warning: Converting `actor1` and/or `actor2` to character vector(s). mid_network #> ✔ Hello, you have created network data, yay! #> • Longitudinal #> • Unipartite #> • Symmetric #> • Weights from `cowmidonset` #> • No Loops Allowed #> • Longitudinal: 22 Periods #> • # Unique Row Actors: 196 #> • # Unique Column Actors: 196 #> • # Unique Actors: 196 #>               nLoops nEdges    density recip propNA #> 1 cowmidonset    N/A   1866 0.00281862   N/A    N/A #> • Nodal Features: None #> • Dyad Features: None #> • Graph Features: None  # you can also supply your own set of actors # with custom start and end years using the # actor_pds argument, to use this first you  # need to create a data.frame with information # about actor composition as follows actor_comp <- data.frame(     actor = c(2, 365, 220, 710),     min_time = c(1980, 1980, 1991, 1980),     max_time = c(2001, 2001, 2001, 2001) )  # now pass this actor_comp object to the  # actor_pds argument mid_network_subset <- netify(   cow_dyads,   actor1='ccode1', actor2='ccode2', time='year',   weight='cowmidonset',    actor_pds=actor_comp,   sum_dyads=FALSE, symmetric=TRUE,   diag_to_NA=TRUE, missing_to_zero=TRUE) #> ! Warning: Converting `actor1` and/or `actor2` to character vector(s). mid_network_subset #> ✔ Hello, you have created network data, yay! #> • Longitudinal #> • Unipartite #> • Symmetric #> • Weights from `cowmidonset` #> • No Loops Allowed #> • Longitudinal: 3 Periods #> • # Unique Row Actors: 4 #> • # Unique Column Actors: 4 #> • # Unique Actors: 4 #>               nLoops nEdges density recip propNA #> 1 cowmidonset    N/A      6     0.2   N/A    N/A #> • Nodal Features: None #> • Dyad Features: None #> • Graph Features: None"},{"path":"/reference/get_attribs.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for layer_netify to extract attributes\nfrom listed netlet objects — get_attribs","title":"Helper function for layer_netify to extract attributes\nfrom listed netlet objects — get_attribs","text":"Helper function layer_netify extract attributes listed netlet objects","code":""},{"path":"/reference/get_attribs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for layer_netify to extract attributes\nfrom listed netlet objects — get_attribs","text":"","code":"get_attribs(a_list, attrib, list_format = FALSE, get_unique = FALSE)"},{"path":"/reference/get_attribs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for layer_netify to extract attributes\nfrom listed netlet objects — get_attribs","text":"a_list named list object attrib character string attribute extract list_format logical, TRUE return list attributes get_unique logical, TRUE return unique values attribute","code":""},{"path":"/reference/get_attribs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for layer_netify to extract attributes\nfrom listed netlet objects — get_attribs","text":"attribute values","code":""},{"path":"/reference/get_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"This function fills in an adjacency matrix based on actors and data — get_matrix","title":"This function fills in an adjacency matrix based on actors and data — get_matrix","text":"function fills adjacency matrix based actors data","code":""},{"path":"/reference/get_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function fills in an adjacency matrix based on actors and data — get_matrix","text":"","code":"get_matrix(   n_rows,   n_cols,   actors_rows,   actors_cols,   matRowIndices,   matColIndices,   value,   symmetric )"},{"path":"/reference/get_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function fills in an adjacency matrix based on actors and data — get_matrix","text":"n_rows integer specifying number row actors n_cols integer specifying number column actors actors_rows character vector row actors actors_cols character vector column actors matRowIndices numeric vector indicating positions senders data matColIndices numeric vector indicating positions receivers data value numeric vector values fill cross-sections adjacency matrices symmetric logical indicating whether ties symmetric","code":""},{"path":"/reference/get_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function fills in an adjacency matrix based on actors and data — get_matrix","text":"adjacency matrix","code":""},{"path":"/reference/get_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This function fills in an adjacency matrix based on actors and data — get_matrix","text":"Shahryar Minhas, Ha Eun Choi","code":""},{"path":"/reference/get_netify.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs a netlet object — get_netify","title":"Constructs a netlet object — get_netify","text":"get_netify helper function users create netify object. visible users.","code":""},{"path":"/reference/get_netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs a netlet object — get_netify","text":"","code":"get_netify(   data = matrix(data = NA_real_, nrow = 1, ncol = 1),   netify_type = NULL,   actor_pds = list(NULL),   actor_time_uniform = TRUE,   weight = list(NULL),   symmetric = TRUE,   isolates = FALSE,   diag_to_NA = TRUE,   missing_to_zero = TRUE,   nodal_data = list(NULL),   dyad_data = list(NULL),   graph_data = list(NULL),   ... )"},{"path":"/reference/get_netify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs a netlet object — get_netify","text":"data data object netify_type type netlet object actor_pds actor year data object actor_time_uniform logical whether time uniform weight weighted symmetric logical whether data symmetric isolates logical isolates diag_to_NA logical treat diagonal values missing_to_zero logical treat missing values nodal_data nodal data attribute dyad_data dyad data attribute graph_data graph data attribute ... additional parameters","code":""},{"path":"/reference/get_netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructs a netlet object — get_netify","text":"netlet object","code":""},{"path":"/reference/get_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"get_raw — get_raw","title":"get_raw — get_raw","text":"function serves wrapper raw_matrix raw_list, serve strip netify related attributes lists matrix obejcts","code":""},{"path":"/reference/get_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_raw — get_raw","text":"","code":"get_raw(netlet)"},{"path":"/reference/get_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_raw — get_raw","text":"netlet netify object","code":""},{"path":"/reference/get_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_raw — get_raw","text":"list matrix object netify attributes stripped","code":""},{"path":"/reference/get_raw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"get_raw — get_raw","text":"Shahryar Minhas","code":""},{"path":"/reference/icews.html","id":null,"dir":"Reference","previous_headings":"","what":"Event data slice from ICEWS — icews","title":"Event data slice from ICEWS — icews","text":"Event data ICEWS select countries 2002 2014, additional nodal variables World Bank Polity IV.","code":""},{"path":"/reference/icews.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event data slice from ICEWS — icews","text":"","code":"data(icews)"},{"path":"/reference/icews.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Event data slice from ICEWS — icews","text":"icews","code":""},{"path":"/reference/icews.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Event data slice from ICEWS — icews","text":"add icews reference (icews)","code":""},{"path":"/reference/icews.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Event data slice from ICEWS — icews","text":"","code":"data(icews) icews[1:3,] #>             i       j year                       id verbCoop matlCoop verbConf #> 2 Afghanistan Albania 2002 AFGHANISTAN_ALBANIA_2002        6        1        0 #> 3 Afghanistan Albania 2003 AFGHANISTAN_ALBANIA_2003        1        1        0 #> 4 Afghanistan Albania 2004 AFGHANISTAN_ALBANIA_2004       10        2        0 #>   matlConf           i_year       j_year i_polity2 j_polity2 i_iso3c j_iso3c #> 2        0 AFGHANISTAN_2002 ALBANIA_2002        NA         7     AFG     ALB #> 3        0 AFGHANISTAN_2003 ALBANIA_2003        NA         7     AFG     ALB #> 4        1 AFGHANISTAN_2004 ALBANIA_2004        NA         7     AFG     ALB #>     i_region              j_region      i_gdp      j_gdp i_log_gdp j_log_gdp #> 2 South Asia Europe & Central Asia 7555185296 6857137321  22.74550  22.64856 #> 3 South Asia Europe & Central Asia 8222480251 7236243584  22.83014  22.70237 #> 4 South Asia Europe & Central Asia 8338755823 7635298387  22.84418  22.75605 #>      i_pop   j_pop i_log_pop j_log_pop #> 2 21000256 3051010  16.86005  14.93098 #> 3 22645130 3039616  16.93546  14.92724 #> 4 23553551 3026939  16.97479  14.92306"},{"path":"/reference/identical_recursive.html","id":null,"dir":"Reference","previous_headings":"","what":"identical_recursive — identical_recursive","title":"identical_recursive — identical_recursive","text":"Recursively check two objects identical","code":""},{"path":"/reference/identical_recursive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"identical_recursive — identical_recursive","text":"","code":"identical_recursive(...)"},{"path":"/reference/identical_recursive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"identical_recursive — identical_recursive","text":"... objects check","code":""},{"path":"/reference/identical_recursive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"identical_recursive — identical_recursive","text":"logical indicating whether objects identical","code":""},{"path":"/reference/identical_recursive.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"identical_recursive — identical_recursive","text":"Shahryar Minhas","code":""},{"path":"/reference/is_netify.html","id":null,"dir":"Reference","previous_headings":"","what":"Is this object a netify object? — is_netify","title":"Is this object a netify object? — is_netify","text":"object netify object?","code":""},{"path":"/reference/is_netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is this object a netify object? — is_netify","text":"","code":"is_netify(x)"},{"path":"/reference/is_netify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is this object a netify object? — is_netify","text":"x R object","code":""},{"path":"/reference/is_netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is this object a netify object? — is_netify","text":"Logical constant, TRUE argument object netify object","code":""},{"path":"/reference/is_netify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Is this object a netify object? — is_netify","text":"Colin Henry","code":""},{"path":"/reference/layer_netify.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer netify objects together to create a multilayer network — layer_netify","title":"Layer netify objects together to create a multilayer network — layer_netify","text":"layer_netify takes two netify objects layers together create multilayer network","code":""},{"path":"/reference/layer_netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer netify objects together to create a multilayer network — layer_netify","text":"","code":"layer_netify(netlet_list, layer_labels = NULL)"},{"path":"/reference/layer_netify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer netify objects together to create a multilayer network — layer_netify","text":"netlet_list list netifty objects want layer together layer_labels character: label layer netify object","code":""},{"path":"/reference/layer_netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer netify objects together to create a multilayer network — layer_netify","text":"multilayer network class netify","code":""},{"path":"/reference/layer_netify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Layer netify objects together to create a multilayer network — layer_netify","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"/reference/layer_netify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer netify objects together to create a multilayer network — layer_netify","text":"","code":"# cross-sectional example data(icews) icews_10 <- icews[icews$year==2010,]  # generate netify objects that will be layered together icews_verbCoop <- netify(     dyad_data=icews_10, actor1='i', actor2='j',     symmetric=FALSE, weight='verbCoop',     nodal_vars=c('i_log_gdp', 'i_log_pop'),     dyad_vars=c('verbConf') )  icews_matlCoop <- netify(     dyad_data=icews_10, actor1='i', actor2='j',     symmetric=FALSE, weight='matlCoop',     nodal_vars='i_polity2',     dyad_vars=c('matlConf') )  # layer together cross-sec netify objects together icews_verbCoop_matlCoop <- layer_netify(     netlet_list=list(icews_verbCoop, icews_matlCoop),     layer_labels=c('verbCoop', 'matlCoop') )  # dimensions of the multilayer network from the # cross-sectional case will be a  # (number of actors) x (number of actors) x (number of layers) dim(unnetify(icews_verbCoop_matlCoop)) #> [1] 152 152   2  # longitudinal array example icews_verbCoop_longit_a <- netify(     dyad_data=icews, actor1='i', actor2='j', time='year',     symmetric=FALSE, weight='verbCoop',     nodal_vars=c('i_log_gdp', 'i_log_pop'),     dyad_vars=c('verbConf'),     output_format='longit_array' ) icews_matlCoop_longit_a <- netify(     dyad_data=icews, actor1='i', actor2='j', time='year',     symmetric=FALSE, weight='matlCoop',     nodal_vars=c('i_polity2'),     dyad_vars=c('matlConf'),     output_format='longit_array' )  # layer together icews_verbCoop_matlCoop_longit_a <- layer_netify(     netlet_list=list(icews_verbCoop_longit_a, icews_matlCoop_longit_a),     layer_labels=c('verbCoop', 'matlCoop') )  # dimensions of the multilayer network from the # longitudinal array case will be a  # (number of actors) x (number of actors) x (number of layers) x  # (number of time periods) dim(unnetify(icews_verbCoop_matlCoop_longit_a))  #> [1] 152 152   2  13  # longitudinal list example # generate similar longitudinal list versions icews_verbCoop_longit_l <- netify(     dyad_data=icews, actor1='i', actor2='j', time='year',     symmetric=FALSE, weight='verbCoop',     nodal_vars=c('i_log_gdp', 'i_log_pop'),     dyad_vars=c('verbConf') ) icews_matlCoop_longit_l <- netify(     dyad_data=icews, actor1='i', actor2='j', time='year',     symmetric=FALSE, weight='matlCoop',     nodal_vars=c('i_polity2'),     dyad_vars=c('matlConf') )  # layer together icews_verbCoop_matlCoop_longit_l <- layer_netify(     netlet_list=list(icews_verbCoop_longit_l, icews_matlCoop_longit_l),     layer_labels=c('verbCoop', 'matlCoop') )  # dimensions of the multilayer network from the  # longitudinal list case will be a # (number of time periods) list of  # (number of actors) x (number of actors) x (number of layers) arrays names(unnetify(icews_verbCoop_matlCoop_longit_l)) #>  [1] \"2002\" \"2003\" \"2004\" \"2005\" \"2006\" \"2007\" \"2008\" \"2009\" \"2010\" \"2011\" #> [11] \"2012\" \"2013\" \"2014\" dim(unnetify(icews_verbCoop_matlCoop_longit_l)$'2010') #> [1] 152 152   2  # information on layer labels can be accessed  # from  the `layer_labels` attribute  attr(icews_verbCoop_matlCoop, 'layer_labels') #> NULL attr(icews_verbCoop_matlCoop_longit_l, 'layer_labels') #> NULL"},{"path":"/reference/logical_check.html","id":null,"dir":"Reference","previous_headings":"","what":"logical_check — logical_check","title":"logical_check — logical_check","text":"Checks make sure user correctly inputted logicals select inputs","code":""},{"path":"/reference/logical_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logical_check — logical_check","text":"","code":"logical_check(   sum_dyads,   symmetric,   diag_to_NA,   missing_to_zero,   actor_time_uniform = NULL )"},{"path":"/reference/logical_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logical_check — logical_check","text":"sum_dyads user supplied input symmetric user supplied input diag_to_NA user supplied input missing_to_zero user supplied input actor_time_uniform optional user supplied input","code":""},{"path":"/reference/logical_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logical_check — logical_check","text":"returns NULL object stops process error detected","code":""},{"path":"/reference/logical_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"logical_check — logical_check","text":"Ha Eun Choi, Shahryar Minhas","code":""},{"path":"/reference/longit_dv_to_arr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert list of dependent variable(s) into an array — longit_dv_to_arr","title":"Convert list of dependent variable(s) into an array — longit_dv_to_arr","text":"Mainly use going list netlet array netlet bridging netlet objects analysis packages expect matrix/array inputs","code":""},{"path":"/reference/longit_dv_to_arr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert list of dependent variable(s) into an array — longit_dv_to_arr","text":"","code":"longit_dv_to_arr(netlet)"},{"path":"/reference/longit_dv_to_arr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert list of dependent variable(s) into an array — longit_dv_to_arr","text":"netlet netify object","code":""},{"path":"/reference/longit_dv_to_arr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert list of dependent variable(s) into an array — longit_dv_to_arr","text":"array object dimensions nr x nc x t, nr number row actors, nc number column actors, t number time periods.","code":""},{"path":"/reference/longit_dyad_to_arr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert list of dyadic arrays into an array — longit_dyad_to_arr","title":"Convert list of dyadic arrays into an array — longit_dyad_to_arr","text":"Mainly use going list netlet array netlet bridging netlet objects analysis packages expect matrix/array inputs","code":""},{"path":"/reference/longit_dyad_to_arr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert list of dyadic arrays into an array — longit_dyad_to_arr","text":"","code":"longit_dyad_to_arr(netlet)"},{"path":"/reference/longit_dyad_to_arr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert list of dyadic arrays into an array — longit_dyad_to_arr","text":"netlet netify object","code":""},{"path":"/reference/longit_dyad_to_arr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert list of dyadic arrays into an array — longit_dyad_to_arr","text":"array object dimensions nr x nc x pn x t, nr number row actors, nc number column actors, pn number dyadic variables, t number time periods.","code":""},{"path":"/reference/longit_nodal_to_arr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert nodal attribute of netlet into an array — longit_nodal_to_arr","title":"Convert nodal attribute of netlet into an array — longit_nodal_to_arr","text":"Mainly use going list netlet array netlet bridging netlet objects analysis packages expect matrix/array inputs","code":""},{"path":"/reference/longit_nodal_to_arr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert nodal attribute of netlet into an array — longit_nodal_to_arr","text":"","code":"longit_nodal_to_arr(netlet)"},{"path":"/reference/longit_nodal_to_arr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert nodal attribute of netlet into an array — longit_nodal_to_arr","text":"netlet netify object","code":""},{"path":"/reference/longit_nodal_to_arr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert nodal attribute of netlet into an array — longit_nodal_to_arr","text":"list object length two, one row actors another column actors. element list array dimensions n x pn x t, n number actors, pn number nodal variables, t number time periods. rownames array actors, colnames nodal variables.","code":""},{"path":"/reference/netify.html","id":null,"dir":"Reference","previous_headings":"","what":"Create network object from data.frame — netify","title":"Create network object from data.frame — netify","text":"function takes dyadic dataset outputs netlet object.","code":""},{"path":"/reference/netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create network object from data.frame — netify","text":"","code":"netify(   dyad_data,   actor1 = NULL,   actor2 = NULL,   time = NULL,   symmetric = TRUE,   mode = \"unipartite\",   weight = NULL,   sum_dyads = FALSE,   actor_time_uniform = TRUE,   actor_pds = NULL,   diag_to_NA = TRUE,   missing_to_zero = TRUE,   output_format = ifelse(is.null(time), \"cross_sec\", \"longit_list\"),   nodal_vars = NULL,   dyad_vars = NULL,   dyad_vars_symmetric = rep(symmetric, length(dyad_vars)) )"},{"path":"/reference/netify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create network object from data.frame — netify","text":"dyad_data data object netify actor1 character: name actor 1 variable data actor2 character: name actor 2 variable data time character: name time variable data, time provided assumed symmetric logical: whether ties symmetric, default TRUE mode character: whether network unipartite bipartite, default unipartite weight character: name weighted edge variable data, default NULL sum_dyads logical: whether sum weight value exists repeating dyads actor_time_uniform logical: whether assume actors across full time series observed data TRUE means actors across full time series observed data outputted netify object array format. FALSE means actors come observed data \"existence\" determined data, meaning first year existence determined time point first event last year existence time point last event. Outputted netify object list format. actor_pds data.frame indicating start end time point every actor, can created using get_actor_time_info.R, unless provided estimated user based choice actor_time_uniform diag_to_NA logical: whether diagonals set NA, default TRUE missing_to_zero logical: whether missing values set zero, default TRUE output_format character: \"cross_sec\", \"longit_array\", \"longit_list. specified time NULL output_format \"cross_sec\" time specified output_format default \"longit_list\". nodal_vars character vector: names nodal variables dyad_data object added attributes netify object dyad_vars character vector: names dyadic variables dyad_data object added attributes netify object, default add variables extra_dyadic_data data.frame dyad_vars_symmetric logical vector: whether ties symmetric, default use choice symmetric argument","code":""},{"path":"/reference/netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create network object from data.frame — netify","text":"netlet object","code":""},{"path":"/reference/netify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create network object from data.frame — netify","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/netify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create network object from data.frame — netify","text":"","code":"# load example directed event data from ICEWS # this data comes in the form of a dyadic # dataframe where all dyad pairs are listed data(icews)  # generate a longitudional, directed and weighted network # where the weights are matlConf and results are organized # in an array icews_matlConf <- netify(     dyad_data=icews,     actor1='i', actor2='j', time='year',     symmetric=FALSE, weight='matlConf')  # generate a longitudional, directed and weighted network # where the weights are matlConf and results are organized # in an array and we have both dyadic and nodal attributes icews_matlConf <- netify(     dyad_data=icews,     actor1='i', actor2='j', time='year',     symmetric=FALSE, weight='matlConf',     nodal_vars=c('i_polity2', 'i_log_gdp', 'i_log_pop'),     dyad_vars=c('matlCoop', 'verbCoop', 'verbConf'),     dyad_vars_symmetric=c(FALSE, FALSE, FALSE) )     # example using cow data # gathered from the peacesciencer package library(peacesciencer) library(dplyr)  # create dyadic data set over time cow_dyads <- create_dyadyears(      subset_years = c(1992:2001)     ) %>%     # add mids     add_cow_mids() %>%      # add capital distance     add_capital_distance() %>%     # add cow trade     add_cow_trade() %>%     # add democracy     add_democracy() #> Joining with `by = join_by(ccode1, ccode2, year)` #> Joining with `by = join_by(ccode1, ccode2, year)` #> add_cow_mids() IMPORTANT MESSAGE: By default, this function whittles dispute-year data into dyad-year data by first selecting on unique onsets. Thereafter, where duplicates remain, it whittles dispute-year data into dyad-year data in the following order: 1) retaining highest `fatality`, 2) retaining highest `hostlev`, 3) retaining highest estimated `mindur`, 4) retaining highest estimated `maxdur`, 5) retaining reciprocated over non-reciprocated observations, 6) retaining the observation with the lowest start month, and, where duplicates still remained (and they don't), 7) forcibly dropping all duplicates for observations that are otherwise very similar. #> See: http://svmiller.com/peacesciencer/articles/coerce-dispute-year-dyad-year.html #> Error in add_cow_trade(.): Dyadic CoW trade data are now stored remotely and must be downloaded separately. #> This error disappears after successfully running `download_extdata()`. Thereafter, the function works with no problem and the dyadic trade data (`cow_trade_ddy`) can be loaded for additional exploration.  # now lets create a network object in which # we generate list of networks in which the # cross-sections represent mid onset # additionally note that the raw data involves # country years in which we saw countries go in # and out of existence so we set actor_time_uniform # to FALSE mid_network <- netify(   cow_dyads,   actor1='ccode1', actor2='ccode2', time='year',   # network of interest variable   weight='cowmidonset',    actor_time_uniform=FALSE,   sum_dyads=FALSE, symmetric=TRUE,   diag_to_NA=TRUE, missing_to_zero=FALSE,   # nodal features/covariates   nodal_vars = c('v2x_polyarchy1', 'v2x_polyarchy2'),   # dyadic features/covariates   dyad_vars = c('capdist', 'flow1'),   dyad_vars_symmetric = c(TRUE, FALSE)   ) #> Error in eval(expr, envir, enclos): object 'cow_dyads' not found mid_network #> Error in eval(expr, envir, enclos): object 'mid_network' not found"},{"path":"/reference/netify_check.html","id":null,"dir":"Reference","previous_headings":"","what":"netify_check — netify_check","title":"netify_check — netify_check","text":"Checks make sure object class netify stops process ","code":""},{"path":"/reference/netify_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"netify_check — netify_check","text":"","code":"netify_check(netlet)"},{"path":"/reference/netify_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"netify_check — netify_check","text":"netlet user inputted object check","code":""},{"path":"/reference/netify_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"netify_check — netify_check","text":"NULL object stops process error detected","code":""},{"path":"/reference/netify_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"netify_check — netify_check","text":"Ha Eun Choi, Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/netify_measurements.html","id":null,"dir":"Reference","previous_headings":"","what":"Get measurements of a netify object — netify_measurements","title":"Get measurements of a netify object — netify_measurements","text":"Get measurements netify object","code":""},{"path":"/reference/netify_measurements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get measurements of a netify object — netify_measurements","text":"","code":"netify_measurements(netlet)"},{"path":"/reference/netify_measurements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get measurements of a netify object — netify_measurements","text":"netlet netify object","code":""},{"path":"/reference/netify_measurements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get measurements of a netify object — netify_measurements","text":"list measurements netify object","code":""},{"path":"/reference/netify_measurements.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get measurements of a netify object — netify_measurements","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"/reference/netify_to_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"netify_to_igraph — netify_to_igraph","title":"netify_to_igraph — netify_to_igraph","text":"Convert netify object igraph object","code":""},{"path":"/reference/netify_to_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"netify_to_igraph — netify_to_igraph","text":"","code":"netify_to_igraph(netlet)"},{"path":"/reference/netify_to_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"netify_to_igraph — netify_to_igraph","text":"netlet netify object","code":""},{"path":"/reference/netify_to_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"netify_to_igraph — netify_to_igraph","text":"igraph object","code":""},{"path":"/reference/netify_to_igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"netify_to_igraph — netify_to_igraph","text":"Shahryar Minhas","code":""},{"path":"/reference/netify_to_network.html","id":null,"dir":"Reference","previous_headings":"","what":"netify_to_network — netify_to_network","title":"netify_to_network — netify_to_network","text":"Convert netify object network object","code":""},{"path":"/reference/netify_to_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"netify_to_network — netify_to_network","text":"","code":"netify_to_network(netlet)"},{"path":"/reference/netify_to_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"netify_to_network — netify_to_network","text":"netlet netify object","code":""},{"path":"/reference/netify_to_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"netify_to_network — netify_to_network","text":"network object","code":""},{"path":"/reference/netify_to_network.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"netify_to_network — netify_to_network","text":"Shahryar Minhas","code":""},{"path":"/reference/new_netify.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs a generic netlet Object — new_netify","title":"Constructs a generic netlet Object — new_netify","text":"new_netify low-level constructor efficiently creating new netlet objects visible users.","code":""},{"path":"/reference/new_netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs a generic netlet Object — new_netify","text":"","code":"new_netify(data, ...)"},{"path":"/reference/new_netify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs a generic netlet Object — new_netify","text":"data data object ... additional parameters","code":""},{"path":"/reference/new_netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructs a generic netlet Object — new_netify","text":"netlet object","code":""},{"path":"/reference/new_netify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constructs a generic netlet Object — new_netify","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/num.html","id":null,"dir":"Reference","previous_headings":"","what":"num — num","title":"num — num","text":"Converts values character numeric","code":""},{"path":"/reference/num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"num — num","text":"","code":"num(x)"},{"path":"/reference/num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"num — num","text":"x vector","code":""},{"path":"/reference/num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"num — num","text":"numeric vector","code":""},{"path":"/reference/num.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"num — num","text":"Shahryar Minhas","code":""},{"path":"/reference/peek.html","id":null,"dir":"Reference","previous_headings":"","what":"peek method for netify objects — peek","title":"peek method for netify objects — peek","text":"peek takes netify object displays specified rows information.","code":""},{"path":"/reference/peek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"peek method for netify objects — peek","text":"","code":"peek(   netlet,   what_to_peek = 3,   what_rows_to_peek = what_to_peek,   what_cols_to_peek = what_to_peek,   when_to_peek = 1,   what_layer_to_peek = NULL )"},{"path":"/reference/peek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"peek method for netify objects — peek","text":"netlet object class netify what_to_peek enter name specific nodes peek character vector form provide numeric range, default show first three rows columns interactions what_rows_to_peek similar what_to_peek specific rows, default value set what_to_peek. want peek rows set NULL. what_cols_to_peek similar what_to_peek specific columns, default value set what_to_peek. want peek columns set NULL. when_to_peek choose time points peek , default show first time point data. entry numeric value vector used index time dimension. entry character vector used match time dimension labels. want peek time points set NULL. what_layer_to_peek netlet object multiple layers, must choose one layer peek .","code":""},{"path":"/reference/peek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"peek method for netify objects — peek","text":"slice network","code":""},{"path":"/reference/peek.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"peek method for netify objects — peek","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"/reference/peek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"peek method for netify objects — peek","text":"","code":"# load data data(icews)  # subset to a particular year icews_10 <- icews[icews$year=='2010', ]  # gen netify object icews_verbCoop <- netify(   dyad_data=icews_10, actor1='i', actor2='j',   symmetric=FALSE, weight='verbCoop' )  # peek at relations between a few countries peek(icews_verbCoop,   what_to_peek = c('United Kingdom', 'United States','France') ) #>                United Kingdom United States France #> United Kingdom             NA          1157    407 #> United States            1082            NA    582 #> France                    431           653     NA  # specify rows and cols to peek at peek(icews_verbCoop,   what_rows_to_peek = c('United Kingdom', 'United States','France'),   what_cols_to_peek = c('Russian Federation', 'Sri Lanka') ) #>                Russian Federation Sri Lanka #> United Kingdom                460       101 #> United States                4275       131 #> France                        987        15  # peek with longit array icews_matlConf <- netify(   dyad_data=icews,    actor1='i', actor2='j', time='year',   symmetric=FALSE, weight='matlConf',   output_format = 'longit_array' ) # peek at a few years for the first three rows/cols,  # specify numeric index or character refs peek(icews_matlConf, when_to_peek=c(1, 5, 10)) #> , , 2002 #>  #>             Afghanistan Albania Algeria #> Afghanistan          NA       0       0 #> Albania               0      NA       0 #> Algeria               0       0      NA #>  #> , , 2006 #>  #>             Afghanistan Albania Algeria #> Afghanistan          NA      21       0 #> Albania               3      NA       1 #> Algeria               0       0      NA #>  #> , , 2011 #>  #>             Afghanistan Albania Algeria #> Afghanistan          NA       0       0 #> Albania               2      NA       0 #> Algeria               1       0      NA #>  peek(icews_matlConf, when_to_peek=c('2002', '2006', '2011')) #> , , 2002 #>  #>             Afghanistan Albania Algeria #> Afghanistan          NA       0       0 #> Albania               0      NA       0 #> Algeria               0       0      NA #>  #> , , 2006 #>  #>             Afghanistan Albania Algeria #> Afghanistan          NA      21       0 #> Albania               3      NA       1 #> Algeria               0       0      NA #>  #> , , 2011 #>  #>             Afghanistan Albania Algeria #> Afghanistan          NA       0       0 #> Albania               2      NA       0 #> Algeria               1       0      NA #>"},{"path":"/reference/pick_edge_value.html","id":null,"dir":"Reference","previous_headings":"","what":"pick_edge_value — pick_edge_value","title":"pick_edge_value — pick_edge_value","text":"(likely unnecessary) Pick value data.frame input depending user choices","code":""},{"path":"/reference/pick_edge_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pick_edge_value — pick_edge_value","text":"","code":"pick_edge_value(dyad_data, weight, sum_dyads, actor1, actor2, num_repeat_dyads)"},{"path":"/reference/pick_edge_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pick_edge_value — pick_edge_value","text":"dyad_data user inputted data.frame object weight user inputted weight value sum_dyads user inputted sum_dyads logical actor1 character value denoting actor1 data.frame object actor2 character value denoting actor2 data.frame object num_repeat_dyads calculated number repeat dyads","code":""},{"path":"/reference/pick_edge_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pick_edge_value — pick_edge_value","text":"vector edge values adjacency matrix","code":""},{"path":"/reference/pick_edge_value.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pick_edge_value — pick_edge_value","text":"Ha Eun Choi, Shahryar Minhas","code":""},{"path":"/reference/plot_actorStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function for actor level statistics for netify objects — plot_actorStats","title":"Plotting function for actor level statistics for netify objects — plot_actorStats","text":"plot_actorStats takes output summary_actor function outputs graph actor level statistics.","code":""},{"path":"/reference/plot_actorStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function for actor level statistics for netify objects — plot_actorStats","text":"","code":"plot_actorStats(   summary_df,   longitudinal = FALSE,   net_stat = NULL,   actor_names = NULL,   toplist_n = NULL )"},{"path":"/reference/plot_actorStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function for actor level statistics for netify objects — plot_actorStats","text":"summary_df dataframe produced summary_actor longitudinal logical: TRUE longitudinal network, default FALSE net_stat character: actor-level network statistics, default \"average_degree_total\" actor_names character: actor name(s) network, default NULL toplist_n numeric: number actors listed top n actors, default 20","code":""},{"path":"/reference/plot_actorStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function for actor level statistics for netify objects — plot_actorStats","text":"graph object summarizing actor level stats network(s)","code":""},{"path":"/reference/plot_actorStats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plotting function for actor level statistics for netify objects — plot_actorStats","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/plot_networkStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function for network level statistics for netify objects — plot_networkStats","title":"Plotting function for network level statistics for netify objects — plot_networkStats","text":"plot_networkStats takes output summary.netify function outputs graph network level statistics.","code":""},{"path":"/reference/plot_networkStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function for network level statistics for netify objects — plot_networkStats","text":"","code":"plot_networkStats(summary_df, longitudinal = TRUE, net_stat = net_stat)"},{"path":"/reference/plot_networkStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function for network level statistics for netify objects — plot_networkStats","text":"summary_df dataframe produced summary longitudinal logical: TRUE longitudinal network, default TRUE net_stat character: network-level network statistics, default \"dens\"","code":""},{"path":"/reference/plot_networkStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function for network level statistics for netify objects — plot_networkStats","text":"graph object summarizing network level stats","code":""},{"path":"/reference/plot_networkStats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plotting function for network level statistics for netify objects — plot_networkStats","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/prep_for_amen.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert netify object to amen structured input — prep_for_amen","title":"Convert netify object to amen structured input — prep_for_amen","text":"Convert netify object amen structured input","code":""},{"path":"/reference/prep_for_amen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert netify object to amen structured input — prep_for_amen","text":"","code":"prep_for_amen(netlet)"},{"path":"/reference/prep_for_amen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert netify object to amen structured input — prep_for_amen","text":"netlet R object","code":""},{"path":"/reference/prep_for_amen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert netify object to amen structured input — prep_for_amen","text":"object ready analysis amen","code":""},{"path":"/reference/prep_for_amen.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert netify object to amen structured input — prep_for_amen","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/prep_for_amen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert netify object to amen structured input — prep_for_amen","text":"","code":"# load icews data data(icews)  # filter to a year for cross-sec example icews_10 <- icews[icews$year == 2010,]  # netify object icews_matlConf <- netify(   dyad_data = icews_10,    actor1 = 'i', actor2 = 'j',    symmetric = FALSE, weight = 'matlConf',   nodal_vars = c('i_polity2', 'i_log_gdp', 'i_log_pop'),   dyad_vars = c('matlCoop', 'verbCoop', 'verbConf'),   dyad_vars_symmetric = c(FALSE, FALSE, FALSE) )  # convert to amen input for_amen <- prep_for_amen(icews_matlConf)  # for_amen$Y is the matrix of dyadic weights dim(for_amen$Y) #> [1] 152 152  # for_amen$Xdyad is the array of dyadic attributes dim(for_amen$Xdyad) #> [1] 152 152   3  # for_amen$Xrow is the matrix of nodal attributes for rows dim(for_amen$Xrow) #> [1] 152   3  # for_amen$Xcol is the matrix of nodal attributes for columns dim(for_amen$Xcol) #> [1] 152   3  # generate a longitudional, directed and weighted network # where the weights are matlConf and results are organized # in an array and we have both dyadic and nodal attributes icews_matlConf_longit <- netify(   dyad_data=icews,   actor1='i', actor2='j', time='year',   symmetric=FALSE, weight='matlConf',   nodal_vars=c('i_polity2', 'i_log_gdp', 'i_log_pop'),   dyad_vars=c('matlCoop', 'verbCoop', 'verbConf'),   dyad_vars_symmetric=c(FALSE, FALSE, FALSE) )  # convert to amen input for_amen_longit <- prep_for_amen(icews_matlConf_longit)  # for_amen_longit$Y is the array of dyadic weights dim(for_amen_longit$Y) #> [1] 152 152  13  # for_amen_longit$Xdyad is the array of dyadic attributes dim(for_amen_longit$Xdyad) #> [1] 152 152   3  13  # for_amen_longit$Xrow is the array of nodal attributes for rows dim(for_amen_longit$Xrow) #> [1] 152   3  13  # for_amen_longit$Xcol is the array of nodal attributes for columns dim(for_amen_longit$Xcol) #> [1] 152   3  13"},{"path":"/reference/prep_for_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert conflictNet object to igraph object — prep_for_igraph","title":"Convert conflictNet object to igraph object — prep_for_igraph","text":"Convert conflictNet object igraph object","code":""},{"path":"/reference/prep_for_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert conflictNet object to igraph object — prep_for_igraph","text":"","code":"prep_for_igraph(netlet)"},{"path":"/reference/prep_for_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert conflictNet object to igraph object — prep_for_igraph","text":"netlet R object","code":""},{"path":"/reference/prep_for_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert conflictNet object to igraph object — prep_for_igraph","text":"igraph object","code":""},{"path":"/reference/prep_for_igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert conflictNet object to igraph object — prep_for_igraph","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/prep_for_igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert conflictNet object to igraph object — prep_for_igraph","text":"","code":"# load data data(icews)  # cross-sectional case icews_10 <- icews[icews$year==2010,]  # create netify object dvars = c( 'matlCoop', 'verbConf', 'matlConf' ) nvars = c( 'i_polity2','i_log_gdp', 'i_log_pop' ) verbCoop_net = netify(    icews_10,   actor1='i', actor2='j',    symmetric=FALSE,    weight='verbCoop',   dyad_vars = dvars,   dyad_vars_symmetric=rep(FALSE, length(dvars)),   nodal_vars = nvars )  # convert to igraph object igrph <- prep_for_igraph(verbCoop_net) igrph #> IGRAPH 6803a2c DNW- 152 9976 --  #> + attr: name (v/c), i_polity2 (v/n), i_log_gdp (v/n), i_log_pop (v/n), #> | weight (e/n), verbCoop (e/n), matlCoop (e/n), verbConf (e/n), #> | matlConf (e/n) #> + edges from 6803a2c (vertex names): #>  [1] Afghanistan->Argentina  Afghanistan->Armenia    Afghanistan->Australia  #>  [4] Afghanistan->Austria    Afghanistan->Azerbaijan Afghanistan->Bahrain    #>  [7] Afghanistan->Bangladesh Afghanistan->Belgium    Afghanistan->Brazil     #> [10] Afghanistan->Bulgaria   Afghanistan->Canada     Afghanistan->China      #> [13] Afghanistan->Colombia   Afghanistan->Croatia    Afghanistan->Cuba       #> [16] Afghanistan->Denmark    Afghanistan->Egypt      Afghanistan->Estonia    #> + ... omitted several edges  # longitudinal case verbCoop_longit_net = netify(   icews,   actor1='i', actor2='j', time='year',   symmetric=FALSE,    weight='verbCoop',   dyad_vars = dvars,   dyad_vars_symmetric=rep(FALSE, length(dvars)),   nodal_vars = nvars )  # convert to igraph object igrph_longit <- prep_for_igraph(verbCoop_longit_net)  # output in the longitudinal case is  # a list of igraph objects class(igrph_longit) #> [1] \"list\" names(igrph_longit) #>  [1] \"2002\" \"2003\" \"2004\" \"2005\" \"2006\" \"2007\" \"2008\" \"2009\" \"2010\" \"2011\" #> [11] \"2012\" \"2013\" \"2014\" igrph_longit[['2002']] #> IGRAPH 667d620 DNW- 152 8692 --  #> + attr: name (v/c), i_polity2 (v/n), i_log_gdp (v/n), i_log_pop (v/n), #> | weight (e/n), verbCoop (e/n), matlCoop (e/n), verbConf (e/n), #> | matlConf (e/n) #> + edges from 667d620 (vertex names): #>  [1] Afghanistan->Albania    Afghanistan->Armenia    Afghanistan->Australia  #>  [4] Afghanistan->Austria    Afghanistan->Azerbaijan Afghanistan->Bahrain    #>  [7] Afghanistan->Bangladesh Afghanistan->Belgium    Afghanistan->Brazil     #> [10] Afghanistan->Bulgaria   Afghanistan->Cambodia   Afghanistan->Canada     #> [13] Afghanistan->Chile      Afghanistan->China      Afghanistan->Cuba       #> [16] Afghanistan->Denmark    Afghanistan->Egypt      Afghanistan->Estonia    #> + ... omitted several edges"},{"path":"/reference/prep_for_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert conflictNet object to network object — prep_for_network","title":"Convert conflictNet object to network object — prep_for_network","text":"Convert conflictNet object network object","code":""},{"path":"/reference/prep_for_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert conflictNet object to network object — prep_for_network","text":"","code":"prep_for_network(netlet)"},{"path":"/reference/prep_for_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert conflictNet object to network object — prep_for_network","text":"netlet R object","code":""},{"path":"/reference/prep_for_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert conflictNet object to network object — prep_for_network","text":"network object","code":""},{"path":"/reference/prep_for_network.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert conflictNet object to network object — prep_for_network","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/prep_for_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert conflictNet object to network object — prep_for_network","text":"","code":"# load data data(icews)  # cross-sectional case icews_10 <- icews[icews$year==2010,]  # create netify object dvars = c( 'matlCoop', 'verbConf', 'matlConf' ) nvars = c( 'i_polity2','i_log_gdp', 'i_log_pop' ) verbCoop_net = netify(    icews_10,   actor1='i', actor2='j',    symmetric=FALSE,    weight='verbCoop',   dyad_vars = dvars,   dyad_vars_symmetric=rep(FALSE, length(dvars)),   nodal_vars = nvars )  # convert to network object ntwk <- prep_for_network(verbCoop_net) #> Error in prep_for_network(verbCoop_net): Assertion on '\"network\"' failed: Please install the `network` package.. ntwk #> Error in eval(expr, envir, enclos): object 'ntwk' not found  # longitudinal case verbCoop_longit_net = netify(   icews,   actor1='i', actor2='j', time='year',   symmetric=FALSE,    weight='verbCoop',   dyad_vars = dvars,   dyad_vars_symmetric=rep(FALSE, length(dvars)),   nodal_vars = nvars )  # convert to network object ntwk_longit <- prep_for_network(verbCoop_longit_net) #> Error in prep_for_network(verbCoop_longit_net): Assertion on '\"network\"' failed: Please install the `network` package..  # output in the longitudinal case is  # a list of network objects class(ntwk_longit) #> Error in eval(expr, envir, enclos): object 'ntwk_longit' not found names(ntwk_longit) #> Error in eval(expr, envir, enclos): object 'ntwk_longit' not found ntwk_longit[['2002']] #> Error in eval(expr, envir, enclos): object 'ntwk_longit' not found"},{"path":"/reference/print.netify.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for netify objects — print.netify","title":"Print method for netify objects — print.netify","text":"print.netify takes netify object defines information displayed print.","code":""},{"path":"/reference/print.netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for netify objects — print.netify","text":"","code":"# S3 method for netify print(x, ...)"},{"path":"/reference/print.netify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for netify objects — print.netify","text":"x object class netify, produced get_adjacency ... additional parameters used","code":""},{"path":"/reference/print.netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for netify objects — print.netify","text":"text information network","code":""},{"path":"/reference/print.netify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for netify objects — print.netify","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/raw_list.html","id":null,"dir":"Reference","previous_headings":"","what":"raw_list — raw_list","title":"raw_list — raw_list","text":"function takes netify object type cross_sec returns regular matrix","code":""},{"path":"/reference/raw_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"raw_list — raw_list","text":"","code":"raw_list(netlet)"},{"path":"/reference/raw_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"raw_list — raw_list","text":"netlet netify object type 'longit_list'","code":""},{"path":"/reference/raw_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"raw_list — raw_list","text":"object class list netify attributes stripped","code":""},{"path":"/reference/raw_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"raw_list — raw_list","text":"Shahryar Minhas","code":""},{"path":"/reference/raw_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"raw_matrix — raw_matrix","title":"raw_matrix — raw_matrix","text":"function takes netify object type cross_sec longit_array returns R matrix/array","code":""},{"path":"/reference/raw_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"raw_matrix — raw_matrix","text":"","code":"raw_matrix(netlet)"},{"path":"/reference/raw_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"raw_matrix — raw_matrix","text":"netlet netify object type cross_sec' 'longit_array'","code":""},{"path":"/reference/raw_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"raw_matrix — raw_matrix","text":"object class matrix, array netify attributes stripped","code":""},{"path":"/reference/raw_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"raw_matrix — raw_matrix","text":"Shahryar Minhas","code":""},{"path":"/reference/reduce_combine_dyad_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce and combine multiple dyadic attributes of netify objects\ninto a single dyadic attribute. Mainly for use within the\nlayer_netify function — reduce_combine_dyad_attr","title":"Reduce and combine multiple dyadic attributes of netify objects\ninto a single dyadic attribute. Mainly for use within the\nlayer_netify function — reduce_combine_dyad_attr","text":"Reduce combine multiple dyadic attributes netify objects single dyadic attribute. Mainly use within layer_netify function","code":""},{"path":"/reference/reduce_combine_dyad_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce and combine multiple dyadic attributes of netify objects\ninto a single dyadic attribute. Mainly for use within the\nlayer_netify function — reduce_combine_dyad_attr","text":"","code":"reduce_combine_dyad_attr(attribs_list, msrmnts_list, netlet_type)"},{"path":"/reference/reduce_combine_dyad_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce and combine multiple dyadic attributes of netify objects\ninto a single dyadic attribute. Mainly for use within the\nlayer_netify function — reduce_combine_dyad_attr","text":"attribs_list list attributes netlet msrmnts_list list msrmnts netlet netlet_type character string netlet type","code":""},{"path":"/reference/reduce_combine_dyad_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce and combine multiple dyadic attributes of netify objects\ninto a single dyadic attribute. Mainly for use within the\nlayer_netify function — reduce_combine_dyad_attr","text":"dyad attribute data.frame","code":""},{"path":"/reference/reduce_combine_nodal_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce and combine multiple nodal attributes of netify objects\ninto a single nodal attribute. Mainly for use within the\nlayer_netify function — reduce_combine_nodal_attr","title":"Reduce and combine multiple nodal attributes of netify objects\ninto a single nodal attribute. Mainly for use within the\nlayer_netify function — reduce_combine_nodal_attr","text":"Reduce combine multiple nodal attributes netify objects single nodal attribute. Mainly use within layer_netify function","code":""},{"path":"/reference/reduce_combine_nodal_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce and combine multiple nodal attributes of netify objects\ninto a single nodal attribute. Mainly for use within the\nlayer_netify function — reduce_combine_nodal_attr","text":"","code":"reduce_combine_nodal_attr(attribs_list, msrmnts_list, netlet_type)"},{"path":"/reference/reduce_combine_nodal_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce and combine multiple nodal attributes of netify objects\ninto a single nodal attribute. Mainly for use within the\nlayer_netify function — reduce_combine_nodal_attr","text":"attribs_list list attributes netlet msrmnts_list list msrmnts netlet netlet_type character string netlet type","code":""},{"path":"/reference/reduce_combine_nodal_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce and combine multiple nodal attributes of netify objects\ninto a single nodal attribute. Mainly for use within the\nlayer_netify function — reduce_combine_nodal_attr","text":"nodal attribute data.frame","code":""},{"path":"/reference/repeat_dyads_check.html","id":null,"dir":"Reference","previous_headings":"","what":"repeat_dyads_check — repeat_dyads_check","title":"repeat_dyads_check — repeat_dyads_check","text":"Check whether dyadic observations repeating data.frame object","code":""},{"path":"/reference/repeat_dyads_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"repeat_dyads_check — repeat_dyads_check","text":"","code":"repeat_dyads_check(dyad_data, actor1, actor2, time = NULL)"},{"path":"/reference/repeat_dyads_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"repeat_dyads_check — repeat_dyads_check","text":"dyad_data user inputted data.frame object actor1 character value denoting actor1 data.frame object actor2 character value denoting actor2 data.frame object time optoinal character value denoting time data.frame object","code":""},{"path":"/reference/repeat_dyads_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"repeat_dyads_check — repeat_dyads_check","text":"returns count number repeating dyads data.frame object","code":""},{"path":"/reference/repeat_dyads_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"repeat_dyads_check — repeat_dyads_check","text":"Ha Eun Choi, Shahryar Minhas","code":""},{"path":"/reference/set_layer_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for layer_netify to set layer labels — set_layer_labels","title":"Helper function for layer_netify to set layer labels — set_layer_labels","text":"Helper function layer_netify set layer labels","code":""},{"path":"/reference/set_layer_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for layer_netify to set layer labels — set_layer_labels","text":"","code":"set_layer_labels(netlet_list, layer_labels)"},{"path":"/reference/set_layer_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for layer_netify to set layer labels — set_layer_labels","text":"netlet_list list netlet objects layer_labels character vector layer labels","code":""},{"path":"/reference/set_layer_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for layer_netify to set layer labels — set_layer_labels","text":"character vector layer labels","code":""},{"path":"/reference/split_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Break string into list of strings by some fixed character\nand then extract the desired values around that fixed\ncharacter — split_string","title":"Break string into list of strings by some fixed character\nand then extract the desired values around that fixed\ncharacter — split_string","text":"Break string list strings fixed character extract desired values around fixed character","code":""},{"path":"/reference/split_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Break string into list of strings by some fixed character\nand then extract the desired values around that fixed\ncharacter — split_string","text":"","code":"split_string(string_to_split, break_by, to_extract, fixed = TRUE)"},{"path":"/reference/split_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Break string into list of strings by some fixed character\nand then extract the desired values around that fixed\ncharacter — split_string","text":"string_to_split character: string split break_by character: character break string to_extract integer: index string extracted fixed TRUE match exactly, otherwise use regular expressions","code":""},{"path":"/reference/split_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Break string into list of strings by some fixed character\nand then extract the desired values around that fixed\ncharacter — split_string","text":"character vector extracted strings","code":""},{"path":"/reference/split_string.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Break string into list of strings by some fixed character\nand then extract the desired values around that fixed\ncharacter — split_string","text":"Shahryar Minhas","code":""},{"path":"/reference/subset_netlet.html","id":null,"dir":"Reference","previous_headings":"","what":"subset_netlet method for netify objects — subset_netlet","title":"subset_netlet method for netify objects — subset_netlet","text":"subset_netlet takes netify object allows extraction smaller networks.","code":""},{"path":"/reference/subset_netlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"subset_netlet method for netify objects — subset_netlet","text":"","code":"subset_netlet(   netlet,   what_to_subset = 20,   what_rows_to_subset = what_to_subset,   what_cols_to_subset = what_to_subset,   when_to_subset = NULL,   what_layers_to_subset = NULL )"},{"path":"/reference/subset_netlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"subset_netlet method for netify objects — subset_netlet","text":"netlet object class netify what_to_subset enter name specific nodes subset character vector form provide numeric range, default show first three rows columns interactions what_rows_to_subset similar what_to_subset specific rows, default value set what_to_subset. want subset rows set NULL. what_cols_to_subset similar what_to_subset specific columns, default value set what_to_subset. want subset columns set NULL. when_to_subset choose time points subset , default show first time point data. entry numeric value vector used index time dimension. entry character vector used match time dimension labels. want subset time points set NULL. what_layers_to_subset netlet object multiple layers, must choose one layer subset .","code":""},{"path":"/reference/subset_netlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"subset_netlet method for netify objects — subset_netlet","text":"subset original network relevant netify attributes","code":""},{"path":"/reference/subset_netlet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"subset_netlet method for netify objects — subset_netlet","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"/reference/subset_netlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"subset_netlet method for netify objects — subset_netlet","text":"","code":"# load example directed event data from ICEWS data(icews)  # generate a longitudional netify object  # with both dyadic and nodal attributes icews_matlConf <- netify(     dyad_data=icews,     actor1='i', actor2='j', time='year',     symmetric=FALSE, weight='matlConf',     nodal_vars=c('i_polity2', 'i_log_gdp', 'i_log_pop'),     dyad_vars=c('matlCoop', 'verbCoop', 'verbConf'),     dyad_vars_symmetric=c(FALSE, FALSE, FALSE) )    # subset to a few countries icews_matlConf_subset <- subset_netlet(    netlet=icews_matlConf,   what_to_subset=c('United States', 'United Kingdom',      'Russian Federation', 'China') )  # subset to a few countries and a few years icews_matlConf_subset <- subset_netlet(   netlet=icews_matlConf,  what_to_subset=c('United States', 'United Kingdom',     'Russian Federation', 'China'), when_to_subset=c('2010', '2011') )"},{"path":"/reference/summary.netify.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method to get graph level statistics for netify objects — summary.netify","title":"Summary method to get graph level statistics for netify objects — summary.netify","text":"summary.netify takes netify object outputs data.frame graph level statistics.","code":""},{"path":"/reference/summary.netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method to get graph level statistics for netify objects — summary.netify","text":"","code":"# S3 method for netify summary(object, ...)"},{"path":"/reference/summary.netify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method to get graph level statistics for netify objects — summary.netify","text":"object object class netify, produced get_adjacency ... additional parameters used","code":""},{"path":"/reference/summary.netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method to get graph level statistics for netify objects — summary.netify","text":"data.frame object summarizing graph level stats network(s)","code":""},{"path":"/reference/summary.netify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary method to get graph level statistics for netify objects — summary.netify","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/summary_actor.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method to get actor level statistics for netify objects — summary_actor","title":"Summary method to get actor level statistics for netify objects — summary_actor","text":"summary_actor takes netify object outputs data.frame actor level statistics.","code":""},{"path":"/reference/summary_actor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method to get actor level statistics for netify objects — summary_actor","text":"","code":"summary_actor(netlet, ...)"},{"path":"/reference/summary_actor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method to get actor level statistics for netify objects — summary_actor","text":"netlet object class netify, produced get_adjacency ... additional parameters used","code":""},{"path":"/reference/summary_actor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method to get actor level statistics for netify objects — summary_actor","text":"data.frame object summarizing actor level stats network(s)","code":""},{"path":"/reference/summary_actor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary method to get actor level statistics for netify objects — summary_actor","text":"Ha Eun Choi, Shahryar Minhas","code":""},{"path":"/reference/time_check.html","id":null,"dir":"Reference","previous_headings":"","what":"time_check — time_check","title":"time_check — time_check","text":"Checks make sure time field populated correctly","code":""},{"path":"/reference/time_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"time_check — time_check","text":"","code":"time_check(time, dyad_data)"},{"path":"/reference/time_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"time_check — time_check","text":"time user inputted object weight NULL default dyad_data data.frame time values located","code":""},{"path":"/reference/time_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"time_check — time_check","text":"returns NULL object stops process error detected","code":""},{"path":"/reference/time_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"time_check — time_check","text":"Ha Eun Choi, Shahryar Minhas","code":""},{"path":"/reference/tmpprint.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for netify objects — tmpprint","title":"Print method for netify objects — tmpprint","text":"tmpprint takes netify object defines information displayed print.","code":""},{"path":"/reference/tmpprint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for netify objects — tmpprint","text":"","code":"tmpprint(x, ...)"},{"path":"/reference/tmpprint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for netify objects — tmpprint","text":"x object class netify, produced get_adjacency ... additional parameters used","code":""},{"path":"/reference/tmpprint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for netify objects — tmpprint","text":"text information network","code":""},{"path":"/reference/tmpprint.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for netify objects — tmpprint","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/ucdp.html","id":null,"dir":"Reference","previous_headings":"","what":"Event data slice from UCDP — ucdp","title":"Event data slice from UCDP — ucdp","text":"event data UCDP select countries 2001 2019","code":""},{"path":"/reference/ucdp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event data slice from UCDP — ucdp","text":"","code":"data(ucdp)"},{"path":"/reference/ucdp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Event data slice from UCDP — ucdp","text":"ucdp","code":""},{"path":"/reference/ucdp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Event data slice from UCDP — ucdp","text":"add ucdp reference (ucdp)","code":""},{"path":"/reference/ucdp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Event data slice from UCDP — ucdp","text":"","code":"data(ucdp) ucdp[1:3,] #>       id              relid year active_year code_status type_of_violence #> 1 244657 IRQ-2017-1-524-322 2017           1       Clear                1 #> 2 132140   AFG-1989-1-411-2 1989           1       Clear                1 #> 3 130364  AFG-1989-1-411-37 1989           1       Clear                1 #>   conflict_dset_id conflict_new_id           conflict_name dyad_dset_id #> 1              259             259        Iraq: Government          524 #> 2              333             333 Afghanistan: Government          724 #> 3              333             333 Afghanistan: Government          724 #>   dyad_new_id                                                     dyad_name #> 1         524                                       Government of Iraq - IS #> 2         724 Government of Afghanistan - Jam'iyyat-i Islami-yi Afghanistan #> 3         724 Government of Afghanistan - Jam'iyyat-i Islami-yi Afghanistan #>   side_a_dset_id side_a_new_id                    side_a side_b_dset_id #> 1            116           116        Government of Iraq            234 #> 2            130           130 Government of Afghanistan            292 #> 3            130           130 Government of Afghanistan            292 #>   side_b_new_id                            side_b number_of_sources #> 1           234                                IS                 3 #> 2           292 Jam'iyyat-i Islami-yi Afghanistan                -1 #> 3           292 Jam'iyyat-i Islami-yi Afghanistan                -1 #>                                                                                                                                                                                                                                                           source_article #> 1 \"Agence France Presse,2017-08-01,Attackers target Shiite mosque in Afghanistan's Herat\";\"Agence France Presse,2017-08-01,At least 20 killed in Shiite mosque attack in Afghanistan's Herat\";\"Pajhwok News,2017-07-31,Assailants among 6 killed in Iraq Embassy attack\" #> 2                                                                                                                                                                                                  The Times 13 Jan 1989 \"Missiles and tea breaks for rebels;Afghanistan #> 3                                                                                                                                                                                          R 18 Jan 1989 \"KABUL REPORTS HUNDREDS OF REBEL CASUALTIES IN KUNDUZ PROVINCE. #>                                            source_office #> 1 Agence France Presse;Agence France Presse;Pajhwok News #> 2                                                   <NA> #> 3                                                   <NA> #>                        source_date #> 1 2017-08-01;2017-08-01;2017-07-31 #> 2                             <NA> #> 3                             <NA> #>                                                                                                                                                            source_headline #> 1 Attackers target Shiite mosque in Afghanistan's Herat;At least 20 killed in Shiite mosque attack in Afghanistan's Herat;Assailants among 6 killed in Iraq Embassy attack #> 2                                                                                                                                                                     <NA> #> 3                                                                                                                                                                     <NA> #>                          source_original where_prec  where_coordinates #> 1 IS, interior ministry, security source          1         Kabul city #> 2                           Rebel source          4 Nangarhar province #> 3   Kabul radio (monitored in Islamabad)          4    Kunduz province #>        where_description              adm_1          adm_2 latitude longitude #> 1 Iraqi embassy in Kabul     Kabul province Kabul district 34.53109  69.16280 #> 2     Nangarhar province Nangarhar province           <NA> 34.33333  70.41667 #> 3        Kunduz province    Kunduz province           <NA> 36.75000  68.75000 #>                      geom_wkt priogrid_gid     country country_id region #> 1 POINT (69.162796 34.531094)       179779 Afghanistan        700   Asia #> 2 POINT (70.416670 34.333330)       179061 Afghanistan        700   Asia #> 3 POINT (68.750000 36.750000)       182658 Afghanistan        700   Asia #>   event_clarity date_prec date_start   date_end deaths_a deaths_b #> 1             1         1 2017-07-31 2017-07-31        0        4 #> 2             1         3 1989-01-07 1989-01-13        6        0 #> 3             2         2 1989-01-15 1989-01-18        0        0 #>   deaths_civilians deaths_unknown best high low gwnoa gwnob #> 1                0              2    6    6   6   645    NA #> 2                0              0    6    6   6   700    NA #> 3                0              4    4    4   0   700    NA"},{"path":"/reference/unique_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"unique_vector — unique_vector","title":"unique_vector — unique_vector","text":"Get unique vector multiple vector inputs","code":""},{"path":"/reference/unique_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"unique_vector — unique_vector","text":"","code":"unique_vector(...)"},{"path":"/reference/unique_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"unique_vector — unique_vector","text":"... vector inputs","code":""},{"path":"/reference/unique_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"unique_vector — unique_vector","text":"numeric vector","code":""},{"path":"/reference/unique_vector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"unique_vector — unique_vector","text":"Shahryar Minhas","code":""},{"path":"/reference/unnetify.html","id":null,"dir":"Reference","previous_headings":"","what":"unnetify — unnetify","title":"unnetify — unnetify","text":"function serves wrapper get_raw conversion functions convert netify object back constituent parts","code":""},{"path":"/reference/unnetify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"unnetify — unnetify","text":"","code":"unnetify(netlet)"},{"path":"/reference/unnetify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"unnetify — unnetify","text":"netlet netify object","code":""},{"path":"/reference/unnetify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"unnetify — unnetify","text":"list, matrix, object netify attributes stripped","code":""},{"path":"/reference/unnetify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"unnetify — unnetify","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"/reference/validate_netify.html","id":null,"dir":"Reference","previous_headings":"","what":"Validates a new netlet object — validate_netify","title":"Validates a new netlet object — validate_netify","text":"validate_netify helper function validates inputs user-created netlet. visible users.","code":""},{"path":"/reference/validate_netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validates a new netlet object — validate_netify","text":"","code":"validate_netify(netlet)"},{"path":"/reference/validate_netify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validates a new netlet object — validate_netify","text":"netlet netlet object","code":""},{"path":"/reference/validate_netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validates a new netlet object — validate_netify","text":"netlet","code":""},{"path":"/reference/weight_check.html","id":null,"dir":"Reference","previous_headings":"","what":"weight_check — weight_check","title":"weight_check — weight_check","text":"Checks make sure weight field populated correctly","code":""},{"path":"/reference/weight_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"weight_check — weight_check","text":"","code":"weight_check(weight, dyad_data)"},{"path":"/reference/weight_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"weight_check — weight_check","text":"weight user inputted object weight NULL default dyad_data data.frame weight values located","code":""},{"path":"/reference/weight_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"weight_check — weight_check","text":"returns NULL object stops process error detected","code":""},{"path":"/reference/weight_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"weight_check — weight_check","text":"Ha Eun Choi, Shahryar Minhas","code":""},{"path":"/reference/weight_string_label.html","id":null,"dir":"Reference","previous_headings":"","what":"weight_string_label — weight_string_label","title":"weight_string_label — weight_string_label","text":"Create attribute label weight based user inputs netify","code":""},{"path":"/reference/weight_string_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"weight_string_label — weight_string_label","text":"","code":"weight_string_label(weight, sum_dyads)"},{"path":"/reference/weight_string_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"weight_string_label — weight_string_label","text":"weight user input weight sum_dyads logical user input sum_dyads","code":""},{"path":"/reference/weight_string_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"weight_string_label — weight_string_label","text":"character string","code":""},{"path":"/reference/weight_string_label.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"weight_string_label — weight_string_label","text":"Shahryar Minhas","code":""}]
