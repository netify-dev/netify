% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_node_layout.R
\name{get_node_layout}
\alias{get_node_layout}
\title{Calculate node layout positions for netify visualization}
\usage{
get_node_layout(
  netlet,
  layout = NULL,
  static_actor_positions = FALSE,
  which_static = NULL,
  seed = 6886,
  ig_netlet = NULL
)
}
\arguments{
\item{netlet}{A netify object (class "netify") for which to compute layout positions.}

\item{layout}{Character string specifying the layout algorithm to use. Options include:
\itemize{
\item \code{"nicely"}: Automatic selection of appropriate layout (default for unipartite)
\item \code{"bipartite"}: Two-column layout for bipartite networks (default for bipartite)
\item \code{"fruchtermanreingold"} or \code{"fr"}: Force-directed layout
\item \code{"kamadakawai"} or \code{"kk"}: Another force-directed layout
\item \code{"circle"}: Nodes arranged in a circle
\item \code{"star"}: Star-shaped layout
\item \code{"grid"}: Nodes on a grid
\item \code{"tree"}: Hierarchical tree layout
\item \code{"random"} or \code{"randomly"}: Random positions
\item Additional options: \code{"graphopt"}, \code{"sugiyama"}, \code{"drl"},
\code{"lgl"}, \code{"dh"}, \code{"gem"}, \code{"mds"}
}
If NULL, defaults to "nicely" for unipartite or "bipartite" for bipartite networks.}

\item{static_actor_positions}{Logical. If TRUE, maintains consistent node positions
across all time periods in longitudinal networks. If FALSE (default), each time
period gets its own optimized layout.}

\item{which_static}{Integer specifying which time period's layout to use as the
static template when static_actor_positions is TRUE. If NULL (default), creates
a static layout based on the union of all edges across time periods, giving
more weight to persistent edges.}

\item{seed}{Integer for random number generation to ensure reproducible layouts.
Default is 6886.}

\item{ig_netlet}{An optional pre-converted igraph object. If provided, this
function will use it directly instead of converting the netify object again.}
}
\value{
A list of data frames (one per time period) where each data frame contains:
\itemize{
\item \strong{index}: Integer node index
\item \strong{actor}: Character string with actor name
\item \strong{x}: Numeric x-coordinate for node position
\item \strong{y}: Numeric y-coordinate for node position
}

For cross-sectional networks, returns a list with one element. For longitudinal
networks, returns a named list with time periods as names.
}
\description{
\code{get_node_layout} computes node positions for network visualization using various
layout algorithms from igraph. This function converts a netify object to igraph
format, applies the specified layout algorithm, and returns node coordinates
suitable for plotting.
}
\details{
This function handles layout generation for both cross-sectional and longitudinal
networks with several key features:

\strong{Layout algorithms:}

The function provides access to all major igraph layout algorithms. The default
"nicely" option automatically selects an appropriate algorithm based on the
network structure.

\strong{Longitudinal layouts:}

For longitudinal networks, two approaches are available:
\itemize{
\item \strong{Dynamic layouts}: Each time period gets its own optimized layout,
which may better reveal structural changes but makes visual comparison harder
\item \strong{Static layouts}: All time periods use the same node positions,
facilitating visual comparison of network evolution
}

When using static layouts with which_static = NULL, the function creates a
composite layout based on the union of all edges across time periods. Edges
that appear more frequently are given higher weight, producing layouts that
emphasize the stable core structure of the network.

\strong{Bipartite networks:}

For bipartite networks, the default layout arranges the two node sets in separate
columns.
}
\author{
Cassy Dorff, Shahryar Minhas
}
