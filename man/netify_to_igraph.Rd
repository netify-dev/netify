% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/to_igraph.R
\name{netify_to_igraph}
\alias{netify_to_igraph}
\alias{to_igraph}
\title{Convert netify objects to igraph format}
\usage{
netify_to_igraph(netlet, add_nodal_attribs = TRUE, add_dyad_attribs = TRUE)

to_igraph(netlet, add_nodal_attribs = TRUE, add_dyad_attribs = TRUE)
}
\arguments{
\item{netlet}{A netify object containing network data. Currently supports
single-layer networks only. For multilayer networks, use
\code{\link{subset_netify}} to extract individual layers first.}

\item{add_nodal_attribs}{Logical. If TRUE (default), includes nodal attributes
from the netify object as vertex attributes in the igraph object. Set to
FALSE to create a network with structure only.}

\item{add_dyad_attribs}{Logical. If TRUE (default), includes dyadic attributes
from the netify object as edge attributes in the igraph object. Set to
FALSE to exclude edge covariates.}
}
\value{
An igraph object or list of igraph objects:
\describe{
\item{Cross-sectional networks}{Returns a single igraph object}
\item{Longitudinal networks}{Returns a named list of igraph objects,
with names corresponding to time periods}
}

The resulting igraph object(s) will have:
\itemize{
\item Vertices named according to actors in the netify object
\item Edge weights from the netify weight variable (if present)
\item Vertex attributes for each nodal variable (if add_nodal_attribs = TRUE)
\item Edge attributes for each dyadic variable (if add_dyad_attribs = TRUE)
}
}
\description{
Transforms netify network objects into igraph objects (also available as \code{netify_to_igraph}),
preserving network structure and optionally including nodal and dyadic attributes as vertex
and edge attributes.
}
\details{
The conversion process handles different netify structures:
\itemize{
\item \strong{Cross-sectional}: Direct conversion to a single igraph object
\item \strong{Longitudinal arrays}: Internally converted to list format, then
each time slice becomes a separate igraph object
\item \strong{Longitudinal lists}: Each time period converted to separate igraph object
}

For directed networks, the resulting igraph object will be directed. For
undirected networks, the igraph object will be undirected. Edge weights in
the netify object become edge weights in igraph.

When longitudinal data includes actors that appear or disappear over time,
each time period's igraph object will contain only the actors present in
that period.
}
\note{
This function requires the igraph package to be installed.
}
\examples{
# Load example data
data(icews)

# Example 1: Cross-sectional network with attributes
icews_10 <- icews[icews$year == 2010, ]

# Create netify object with attributes
dvars <- c("matlCoop", "verbConf", "matlConf")
nvars <- c("i_polity2", "i_log_gdp", "i_log_pop")

verbCoop_net <- netify(
    icews_10,
    actor1 = "i", actor2 = "j",
    symmetric = FALSE,
    weight = "verbCoop",
    dyad_vars = dvars,
    dyad_vars_symmetric = rep(FALSE, length(dvars)),
    nodal_vars = nvars
)

# Convert to igraph
ig <- netify_to_igraph(verbCoop_net)

# Examine the result
ig
igraph::vcount(ig) # number of vertices
igraph::ecount(ig) # number of edges
igraph::vertex_attr_names(ig) # nodal attributes
igraph::edge_attr_names(ig) # edge attributes

# Access specific attributes
igraph::V(ig)$i_polity2 # polity scores
igraph::E(ig)$matlCoop # material cooperation

# Example 2: Longitudinal network
verbCoop_longit <- netify(
    icews,
    actor1 = "i", actor2 = "j", time = "year",
    symmetric = FALSE,
    weight = "verbCoop",
    dyad_vars = dvars,
    dyad_vars_symmetric = rep(FALSE, length(dvars)),
    nodal_vars = nvars
)

# Convert to list of igraph objects
ig_list <- netify_to_igraph(verbCoop_longit)

# Examine structure
length(ig_list) # number of time periods
names(ig_list) # time period labels

# Access specific time period
ig_2002 <- ig_list[["2002"]]
ig_2002

# Example 3: Convert without attributes
ig_structure_only <- netify_to_igraph(
    verbCoop_net,
    add_nodal_attribs = FALSE,
    add_dyad_attribs = FALSE
)

# Only network structure, no attributes
igraph::vertex_attr_names(ig_structure_only) # only "name"
igraph::edge_attr_names(ig_structure_only) # only "weight" (if present)

}
\author{
Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas
}
