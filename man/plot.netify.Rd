% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.netify.R
\name{plot.netify}
\alias{plot.netify}
\title{Plotting method for 'netify' objects}
\usage{
\method{plot}{netify}(x, ...)
}
\arguments{
\item{x}{A 'netify' object, which contains the network data structured for analysis and visualization.}

\item{...}{Additional arguments, which can include but are not limited to:
- \code{point_layout}: Optional, user-provided node layout; if not provided, layout will be generated based on \code{layout} parameter.
- \code{layout}: Specifies the layout algorithm from 'igraph' to position the nodes if \code{point_layout} is not provided.
- \code{remove_isolates}: Logical; if TRUE, isolates will be removed from the plot. Default is TRUE.
- \code{add_edges}: Logical; if TRUE, edges will be added to the plot. Default is TRUE.
- \code{curve_edges}: Logical; if TRUE, edges will be curved. Default is FALSE.
- \code{add_points}: Logical; if TRUE, points (nodes) will be plotted. Default is TRUE.
- \code{add_text}: Logical; if TRUE, text annotations will be added. Default is FALSE.
- \code{add_label}: Logical; if TRUE, labels will be added. Default is FALSE.
- \code{select_text}: A vector of node names to specifically add text to; others will not have text.
- \code{select_label}: A vector of node names to specifically add labels to; others will not have labels.
- \code{point_size}: A fixed size for all points, equivalent to \code{geom_point(size = point_size)} in \code{ggplot2}.
- \code{point_size_var}: A variable from the node data to dynamically size points, equivalent to \code{geom_point(aes(size = point_size_var))} in \code{ggplot2}.
These arguments control various aspects of the plot's appearance and functionality.}
}
\value{
A 'ggplot' plot object that can be further modified or printed.
}
\description{
This function provides a comprehensive tool to visualize 'netify' objects through various graphical representations including points, edges, texts, and labels. It leverages the capabilities of the 'igraph' and 'ggplot' packages to create customizable network visualizations.
}
\details{
\code{plot.netify} creates a network plot with flexible options for customization. It allows the user to specify:
\itemize{
\item Whether or not to include edges and how they are rendered (straight or curved).
\item Whether nodes are displayed as points.
\item Whether to annotate nodes with text or labels.
\item Specific nodes to annotate, allowing selective emphasis within the network.
\item Custom layouts if the automatic placement does not suffice.
Additional customization options like \code{point_size} and \code{point_size_var} allow users to apply typical \code{ggplot2} methods directly to network visualizations, facilitating easy integration of familiar graphical adjustments.
}
}
\examples{
# load icews data
data(icews)

# choose attributes
nvars = c( 'i_polity2', 'i_log_gdp', 'i_log_pop' )
dvars = c( 'matlCoop', 'verbConf', 'matlConf' )

# create a netify object
netlet = netify(
    dyad_data=icews, actor1='i', actor2='j',
    time = 'year',
    symmetric=FALSE, weight='verbCoop',
    mode='unipartite', sum_dyads=FALSE,
    actor_time_uniform=TRUE, actor_pds=NULL,
    diag_to_NA=TRUE, missing_to_zero=TRUE,
    nodal_vars = nvars, 
    dyad_vars = dvars
)

# add basic summary network stats
netlet = add_nodal(
    netlet, 
    summary_actor(netlet),
    actor='actor', time='time')

# plot the network
plot(netlet, 
     edge_color='lightgrey', 
     point_size_var = 'degree_total',
     point_color_var = 'i_polity2'
     )

}
