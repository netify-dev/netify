% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.netify.R
\name{plot.netify}
\alias{plot.netify}
\title{Plotting method for netify objects}
\usage{
\method{plot}{netify}(x, ...)
}
\arguments{
\item{x}{A 'netify' object containing network data to visualize.}

\item{...}{Additional arguments controlling plot appearance:}
}
\value{
A ggplot2 object that can be further customized with additional layers, scales,
themes, etc. For longitudinal networks, includes facets for each time period.

If \code{return_components = TRUE}, returns a list of plot components that can
be manually assembled or modified.
}
\description{
Creates customizable network visualizations from netify objects using ggplot2.
Supports cross-sectional and longitudinal networks with extensive options for
mapping network attributes to visual properties.
}
\details{
\strong{Naming Conventions:}

The function supports two naming styles for parameters:
\itemize{
\item \strong{Recommended}: Use \code{node_*} for node attributes and
\code{*_by} for variable mappings (e.g., \code{node_size_by = "degree"})
\item \strong{Legacy}: Use \code{point_*} for nodes and \code{*_var} for
variables (e.g., \code{point_size_var = "degree"})
}

\strong{Default Behaviors:}
\itemize{
\item For weighted networks, edge transparency maps to weight by default
\item For directed networks, arrows are added automatically
\item For longitudinal networks, time periods are shown as facets
\item Isolates are removed by default (set \code{remove_isolates = FALSE} to keep)
}

\strong{Customization Tips:}
\itemize{
\item Use \code{mutate_weight} to handle skewed weight distributions
\item Combine fixed and variable aesthetics (e.g., fixed color with variable size)
\item Add ggplot2 layers after the plot call for further customization
\item Use \code{select_text} for selective labeling in dense networks
}
}
\section{Layout Parameters}{

\describe{
\item{\code{layout}}{Character string specifying the igraph layout algorithm.
Options include: \code{"nicely"} (default), \code{"fr"} (Fruchterman-Reingold),
\code{"kk"} (Kamada-Kawai), \code{"circle"}, \code{"star"}, \code{"grid"},
\code{"tree"}, \code{"bipartite"} (for bipartite networks), \code{"randomly"},
and others. For ego networks, additional options are available: \code{"radial"}
(ego-centric with optional grouping) and \code{"concentric"} (ego at center with
alters in rings). See \code{\link{get_node_layout}} and \code{\link{get_ego_layout}}
for full details.}
\item{\code{point_layout}}{Optional data.frame or list of data.frames containing
pre-computed node positions with columns 'actor', 'x', and 'y'. Overrides
\code{layout} if provided.}
\item{\code{static_actor_positions}}{Logical. For longitudinal networks, should
node positions remain constant across time? Default is \code{FALSE}.}
\item{\code{which_static}}{Integer. When \code{static_actor_positions = TRUE},
which time period's layout to use as template? If \code{NULL} (default),
creates composite layout from all time periods.}
\item{\code{seed}}{Integer for reproducible layouts. Default is 6886.}
}
}

\section{Display Control}{

\describe{
\item{\code{add_edges}}{Logical. Display edges? Default is \code{TRUE}.}
\item{\code{add_points}}{Logical. Display nodes as points? Default is \code{TRUE}.}
\item{\code{add_text}}{Logical. Add text labels to nodes? Default is \code{FALSE}.}
\item{\code{add_text_repel}}{Logical. Add text labels with automatic repositioning to avoid overlaps?
Default is \code{FALSE}. When \code{TRUE}, overrides \code{add_text}. Uses ggrepel for positioning.}
\item{\code{add_label}}{Logical. Add boxed labels to nodes? Default is \code{FALSE}.}
\item{\code{add_label_repel}}{Logical. Add boxed labels with automatic repositioning to avoid overlaps?
Default is \code{FALSE}. When \code{TRUE}, overrides \code{add_label}. Uses ggrepel for positioning.}
\item{\code{remove_isolates}}{Logical. Remove unconnected nodes? Default is \code{TRUE}.}
\item{\code{curve_edges}}{Logical. Use curved edges? Default is \code{FALSE}.}
\item{\code{use_theme_netify}}{Logical. Apply netify theme? Default is \code{TRUE}.}
\item{\code{facet_type}}{Character. For multilayer longitudinal networks, controls
faceting style: \code{"grid"} (default) creates a 2D grid with time Ã— layer,
\code{"wrap"} creates wrapped facets with combined time-layer labels.}
\item{\code{facet_ncol}}{Integer. Number of columns for facet_wrap layouts. Only
used when \code{facet_type = "wrap"} or for single-dimension faceting.}
\item{\code{rescale_edge_weights}}{Logical. For multilayer networks, should edge weights
be rescaled to a common 0-1 range across all layers? This is useful when layers have
very different weight scales. Default is \code{FALSE}.}
}
}

\section{Subsetting Parameters}{

\describe{
\item{\code{node_filter}}{An expression to filter nodes. The expression can reference any
nodal attribute. For example: \code{node_filter = degree_total > 5} to show only nodes
with total degree greater than 5. The expression is evaluated in the context of the
nodal data, so any node-level variable can be used.}
\item{\code{edge_filter}}{An expression to filter edges. The expression can reference any
edge attribute (including 'weight' for weighted networks). For example:
\code{edge_filter = weight > 0.5} to show only edges with weight greater than 0.5.
The expression is evaluated in the context of the edge data, so any edge-level
variable can be used.}
\item{\code{time_filter}}{For longitudinal networks, a vector of time periods to include in the plot.
Can be numeric indices or character labels matching the time dimension. If NULL
(default), all time periods are plotted. For cross-sectional networks, this
parameter is ignored.}
}
}

\section{Node Aesthetics}{


Fixed aesthetics (same for all nodes):
\describe{
\item{\code{node_size} or \code{point_size}}{Numeric. Size of all nodes.}
\item{\code{node_color} or \code{point_color}}{Color of node borders.}
\item{\code{node_fill} or \code{point_fill}}{Fill color of nodes (note that fill will only work with certain shapes).}
\item{\code{node_shape} or \code{point_shape}}{Shape of nodes (see \code{?pch}).}
\item{\code{node_alpha} or \code{point_alpha}}{Transparency (0-1).}
\item{\code{node_stroke} or \code{point_stroke}}{Width of node borders.}
}

Variable aesthetics (mapped to data):
\describe{
\item{\code{node_size_by} or \code{point_size_var}}{Column name for size mapping.}
\item{\code{node_color_by} or \code{point_color_var}}{Column name for border color.}
\item{\code{node_fill_by} or \code{point_fill_var}}{Column name for fill color (note that fill will only work with certain shapes).}
\item{\code{node_shape_by} or \code{point_shape_var}}{Column name for shape.}
\item{\code{node_alpha_by} or \code{point_alpha_var}}{Column name for transparency.}
}
}

\section{Edge Aesthetics}{


Fixed aesthetics:
\describe{
\item{\code{edge_color}}{Color for all edges. Default is "black".}
\item{\code{edge_linewidth}}{Width for all edges. Default is 0.5.}
\item{\code{edge_linetype}}{Line type (1=solid, 2=dashed, etc.).}
\item{\code{edge_alpha}}{Transparency (0-1).}
\item{\code{edge_curvature}}{Curvature amount when \code{curve_edges = TRUE}.}
\item{\code{edge_arrow}}{Arrow specification for directed networks. Example:
\code{arrow(length = unit(0.2, "cm"))}.}
\item{\code{adjust_arrow_endpoints}}{Logical. Should arrow endpoints be adjusted
to stop at node boundaries? Default is \code{FALSE}. Only affects directed networks.}
\item{\code{edge_arrow_gap}}{Numeric. Additional gap between arrow tip and node boundary
as a proportion of node radius (0-1). Default is 0.2. Only used when
\code{adjust_arrow_endpoints = TRUE}.}
\item{\code{edge_arrow_size_scale}}{Numeric. Scale factor for converting node sizes to
coordinate units. If \code{NULL} (default), automatically calculated based on plot range.}
}

Variable aesthetics:
\describe{
\item{\code{edge_color_by} or \code{edge_color_var}}{Column name for color mapping.}
\item{\code{edge_linewidth_by} or \code{edge_linewidth_var}}{Column name for width.}
\item{\code{edge_linetype_by} or \code{edge_linetype_var}}{Column name for line type.}
\item{\code{edge_alpha_by} or \code{edge_alpha_var}}{Column name for transparency.
For weighted networks, defaults to the weight variable if not specified.}
}
}

\section{Text and Label Options}{


Selective labeling:
\describe{
\item{\code{select_text}}{Character vector of node names to show as text. When used,
text labels will automatically use \code{geom_text_repel} to avoid overlaps.}
\item{\code{select_text_display}}{Alternative text to display (same length as
\code{select_text}).}
\item{\code{select_label}}{Character vector of node names to show with boxes. When used,
labels will automatically use \code{geom_label_repel} to avoid overlaps.}
\item{\code{select_label_display}}{Alternative labels (same length as
\code{select_label}).}
}

Text aesthetics:
\describe{
\item{\code{text_size}}{Fixed size for all text. Default is 3.88.}
\item{\code{text_color}}{Fixed color for all text. Default is "black".}
\item{\code{text_alpha}}{Fixed transparency for text.}
\item{\code{text_size_by}}{Variable to map to text size.}
\item{\code{text_color_by}}{Variable to map to text color.}
}

Label (boxed text) aesthetics have similar parameters with \code{label_} prefix.

Text repel parameters (when \code{add_text_repel = TRUE}):
\describe{
\item{\code{text_repel_force}}{Force of repulsion between overlapping text. Default is 1.}
\item{\code{text_repel_max_overlaps}}{Maximum number of overlaps to tolerate. Default is 10.}
\item{\code{text_repel_box_padding}}{Padding around text. Default is 0.25.}
\item{\code{text_repel_point_padding}}{Padding around points. Default is 0.}
\item{\code{text_repel_segment_color}}{Color of connecting segments. Default is "grey50".}
}

Label repel parameters (when \code{add_label_repel = TRUE}):
\describe{
\item{Similar to text_repel but with \code{label_repel_} prefix}{}
\item{\code{label_repel_label_padding}}{Padding around label boxes. Default is 0.25.}
\item{\code{label_repel_label_r}}{Radius of label box corners. Default is 0.15.}
}
}

\section{Scale Labels}{


Customize legend titles:
\describe{
\item{\code{node_size_label} or \code{point_size_label}}{Legend title for size.}
\item{\code{node_color_label} or \code{point_color_label}}{Legend title for color.}
\item{\code{edge_alpha_label}}{Legend title for edge transparency.}
\item{\code{edge_color_label}}{Legend title for edge color.}
}
}

\section{Highlighting Parameters}{

\describe{
\item{\code{highlight}}{Character vector of node names to highlight with different colors.
Non-highlighted nodes will be colored grey. Highlighted nodes can also be automatically
enlarged if \code{highlight_size_increase} is greater than 1.}
\item{\code{highlight_color}}{Named vector of colors for highlighted nodes. If NULL,
uses default distinct colors (red, blue, green for up to 3 nodes, or a color palette
for more). Names should match the values in the \code{highlight} parameter.
Example: \code{c('USA' = 'blue', 'China' = 'red', 'Russia' = 'green')}.}
\item{\code{highlight_label}}{Title for the highlight legend. Default is "Highlighted".}
\item{\code{highlight_size_increase}}{Numeric factor(s) to increase size of highlighted nodes.
Can be a single value (applied to all highlighted nodes) or a vector of length
\code{length(highlight) + 1} where each value corresponds to a highlighted node
and the last value applies to "Other" nodes. Default is 1 (no size increase).
Example: \code{c(3, 1, 1, 0.5)} for 3 highlighted
nodes where the first is 3x larger, the next two are normal size, and all
others are half size.}
\item{\code{show_other_in_legend}}{Logical. Include "Other" category in legend? Default is FALSE.
When FALSE, only highlighted nodes appear in the legend.}
}
}

\section{Ego Layout Parameters}{


For ego networks (created with \code{\link{ego_netify}}), additional layout options
control the ego-centric visualization:
\describe{
\item{\code{ego_group_by}}{Character string specifying a nodal attribute to use for
grouping alters in ego layouts. For "radial" layout, creates sectors. For
"concentric" layout, determines ring assignment.}
\item{\code{ego_order_by}}{Character string specifying a nodal attribute to use for
ordering alters within groups or rings. Common options include "degree_total".}
\item{\code{ego_weight_to_distance}}{Logical. For weighted networks with "radial"
layout, should edge weights determine distance from ego? Higher weights place
alters closer to ego. Default is \code{FALSE}.}
\item{\code{ego_ring_gap}}{Numeric (0-1). Gap between concentric rings as proportion
of radius. Only for "concentric" layout. Default is 0.3.}
\item{\code{ego_size}}{Numeric. Relative size of central area reserved for ego.
Larger values create more space between ego and alters. Default is 0.1.}
}
}

\section{Special Parameters}{

\describe{
\item{\code{mutate_weight}}{Function to transform edge weights before plotting.
Example: \code{log1p} for log(x+1) transformation. Applied before mapping to
aesthetics.}
\item{\code{return_components}}{Logical. Return plot components instead of
assembled plot? Useful for manual customization. Default is \code{FALSE}.}
\item{\code{style}}{A style function (e.g., \code{style_budapest}).
Applies a complete visual style including colors, shapes, and layout preferences.}
}
}

\examples{
# Load example data
data(icews)

# Basic cross-sectional network
icews_10 <- icews[icews$year == 2010, ]
net_10 <- netify(
    icews_10,
    actor1 = "i", actor2 = "j",
    symmetric = FALSE,
    weight = "verbCoop"
)

# Simple plot
plot(net_10)

# add nodal stats to netlet
net_10 <- add_node_vars(
    net_10,
    summary_actor(net_10),
    "actor"
)

# Customized plot with new naming convention
plot(net_10,
    edge_color = "lightgrey",
    node_size_by = "degree_total", # Instead of point_size_var
    node_color = "steelblue",
    edge_alpha_by = "verbCoop", # Instead of edge_alpha_var
    node_size_label = "Degree",
    edge_alpha_label = "Verbal Cooperation"
)

# Longitudinal network example
net_longit <- netify(
    icews,
    actor1 = "i", actor2 = "j",
    time = "year",
    symmetric = FALSE,
    weight = "verbCoop",
    nodal_vars = c("i_polity2", "i_log_gdp")
)

# Add network statistics
net_longit <- add_node_vars(
    net_longit,
    summary_actor(net_longit),
    actor = "actor",
    time = "time"
)

# Plot with multiple aesthetics
plot(net_longit,
    # Edges
    edge_color = "grey70",
    mutate_weight = log1p, # Transform weights
    # Nodes
    node_size_by = "degree_total",
    node_color_by = "i_polity2",
    # Labels
    node_size_label = "Total Degree",
    node_color_label = "Polity Score",
    edge_alpha_label = "Log(Verbal Coop.)",
    # Layout
    static_actor_positions = TRUE # Keep positions constant
)

# Selective labeling example
plot(net_10,
    node_size_by = "degree_total",
    select_text = c("United States", "China", "Russian Federation"),
    text_size = 3,
    text_color = "darkred"
)

# choose alternative labels for selected text
plot(net_10,
    node_size_by = "degree_total",
    select_text = c("United States", "China", "Russian Federation"),
    select_text_display = c("USA", "CHN", "RUS"),
    text_size = 3,
    text_color = "darkred"
)


# Time subsetting example
plot(net_longit,
    time_filter = c("2010", "2011", "2012")
)

# Node subsetting example
# democracies with high GDP
plot(net_longit, node_filter = ~ i_polity2 > 6 & i_log_gdp > 25)

# use return_components=TRUE
# to get back ggplot2 pieces of plot
g10 <- plot(
    net_10,
    node_alpha = .8,
    arrow = ggplot2::arrow(length = ggplot2::unit(0.01, "inches")),
    node_size_by = "degree_total",
    node_size_label = "Log(Degree)",
    edge_alpha_label = "Log(Verbal Coop.)",
    remove_isolates = TRUE,
    mutate_weight = log1p,
    return_components = TRUE
)

# Manually assemble with custom modifications
# to scale aesthetics such as edges
g10$base +
    netify_edge(g10) +
    ggplot2::scale_alpha_continuous(range = c(0.01, 0.2)) +
    netify_node(g10) +
    theme_netify()

}
