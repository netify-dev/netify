% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.netify.R
\name{plot.netify}
\alias{plot.netify}
\title{Plotting method for netify objects}
\usage{
\method{plot}{netify}(x, ...)
}
\arguments{
\item{x}{A 'netify' object containing network data to visualize.}

\item{...}{Additional arguments controlling plot appearance:}
}
\value{
A ggplot2 object that can be further customized with additional layers, scales,
themes, etc. For longitudinal networks, includes facets for each time period.

If \code{return_components = TRUE}, returns a list of plot components that can
be manually assembled or modified.
}
\description{
Creates customizable network visualizations from netify objects using ggplot2.
Supports cross-sectional and longitudinal networks with extensive options for
mapping network attributes to visual properties.
}
\details{
\strong{Naming Conventions:}

The function supports two naming styles for parameters:
\itemize{
\item \strong{Recommended}: Use \code{node_*} for node attributes and
\code{*_by} for variable mappings (e.g., \code{node_size_by = "degree"})
\item \strong{Legacy}: Use \code{point_*} for nodes and \code{*_var} for
variables (e.g., \code{point_size_var = "degree"})
}

\strong{Default Behaviors:}
\itemize{
\item For weighted networks, edge transparency maps to weight by default
\item For directed networks, arrows are added automatically
\item For longitudinal networks, time periods are shown as facets
\item Isolates are removed by default (set \code{remove_isolates = FALSE} to keep)
}

\strong{Customization Tips:}
\itemize{
\item Use \code{weight_transform} to handle skewed weight distributions
\item Combine fixed and variable aesthetics (e.g., fixed color with variable size)
\item Add ggplot2 layers after the plot call for further customization
\item Use \code{select_text} for selective labeling in dense networks
}
}
\section{Layout Parameters}{

\describe{
\item{\code{layout}}{Character string specifying the igraph layout algorithm.
Options include: \code{"nicely"} (default), \code{"fr"} (Fruchterman-Reingold),
\code{"kk"} (Kamada-Kawai), \code{"circle"}, \code{"star"}, \code{"grid"},
\code{"tree"}, \code{"bipartite"} (for bipartite networks), \code{"randomly"},
and others. See \code{\link{get_node_layout}} for full list.}
\item{\code{point_layout}}{Optional data.frame or list of data.frames containing
pre-computed node positions with columns 'actor', 'x', and 'y'. Overrides
\code{layout} if provided.}
\item{\code{static_actor_positions}}{Logical. For longitudinal networks, should
node positions remain constant across time? Default is \code{FALSE}.}
\item{\code{which_static}}{Integer. When \code{static_actor_positions = TRUE},
which time period's layout to use as template? If \code{NULL} (default),
creates composite layout from all time periods.}
\item{\code{seed}}{Integer for reproducible layouts. Default is 6886.}
}
}

\section{Display Control}{

\describe{
\item{\code{add_edges}}{Logical. Display edges? Default is \code{TRUE}.}
\item{\code{add_points}}{Logical. Display nodes as points? Default is \code{TRUE}.}
\item{\code{add_text}}{Logical. Add text labels to nodes? Default is \code{FALSE}.}
\item{\code{add_label}}{Logical. Add boxed labels to nodes? Default is \code{FALSE}.}
\item{\code{remove_isolates}}{Logical. Remove unconnected nodes? Default is \code{TRUE}.}
\item{\code{curve_edges}}{Logical. Use curved edges? Default is \code{FALSE}.}
\item{\code{use_theme_netify}}{Logical. Apply netify theme? Default is \code{TRUE}.}
}
}

\section{Subsetting Parameters}{

\describe{
\item{\code{node_filter}}{An expression to filter nodes. The expression can reference any
nodal attribute. For example: \code{node_filter = degree_total > 5} to show only nodes
with total degree greater than 5. The expression is evaluated in the context of the
nodal data, so any node-level variable can be used.}
\item{\code{edge_filter}}{An expression to filter edges. The expression can reference any
edge attribute (including 'weight' for weighted networks). For example:
\code{edge_filter = weight > 0.5} to show only edges with weight greater than 0.5.
The expression is evaluated in the context of the edge data, so any edge-level
variable can be used.}
\item{\code{time}}{For longitudinal networks, a vector of time periods to include in the plot.
Can be numeric indices or character labels matching the time dimension. If NULL
(default), all time periods are plotted. For cross-sectional networks, this
parameter is ignored.}
}
}

\section{Node Aesthetics}{


Fixed aesthetics (same for all nodes):
\describe{
\item{\code{node_size} or \code{point_size}}{Numeric. Size of all nodes.}
\item{\code{node_color} or \code{point_color}}{Color of node borders.}
\item{\code{node_fill} or \code{point_fill}}{Fill color of nodes (note that fill will only work with certain shapes).}
\item{\code{node_shape} or \code{point_shape}}{Shape of nodes (see \code{?pch}).}
\item{\code{node_alpha} or \code{point_alpha}}{Transparency (0-1).}
\item{\code{node_stroke} or \code{point_stroke}}{Width of node borders.}
}

Variable aesthetics (mapped to data):
\describe{
\item{\code{node_size_by} or \code{point_size_var}}{Column name for size mapping.}
\item{\code{node_color_by} or \code{point_color_var}}{Column name for border color.}
\item{\code{node_fill_by} or \code{point_fill_var}}{Column name for fill color (note that fill will only work with certain shapes).}
\item{\code{node_shape_by} or \code{point_shape_var}}{Column name for shape.}
\item{\code{node_alpha_by} or \code{point_alpha_var}}{Column name for transparency.}
}
}

\section{Edge Aesthetics}{


Fixed aesthetics:
\describe{
\item{\code{edge_color}}{Color for all edges. Default is "black".}
\item{\code{edge_linewidth}}{Width for all edges. Default is 0.5.}
\item{\code{edge_linetype}}{Line type (1=solid, 2=dashed, etc.).}
\item{\code{edge_alpha}}{Transparency (0-1).}
\item{\code{edge_curvature}}{Curvature amount when \code{curve_edges = TRUE}.}
\item{\code{edge_arrow}}{Arrow specification for directed networks. Example:
\code{arrow(length = unit(0.2, "cm"))}.}
\item{\code{adjust_arrow_endpoints}}{Logical. Should arrow endpoints be adjusted
to stop at node boundaries? Default is \code{FALSE}. Only affects directed networks.}
\item{\code{edge_arrow_gap}}{Numeric. Additional gap between arrow tip and node boundary
as a proportion of node radius (0-1). Default is 0.2. Only used when
\code{adjust_arrow_endpoints = TRUE}.}
\item{\code{edge_arrow_size_scale}}{Numeric. Scale factor for converting node sizes to
coordinate units. If \code{NULL} (default), automatically calculated based on plot range.}
}

Variable aesthetics:
\describe{
\item{\code{edge_color_by} or \code{edge_color_var}}{Column name for color mapping.}
\item{\code{edge_linewidth_by} or \code{edge_linewidth_var}}{Column name for width.}
\item{\code{edge_linetype_by} or \code{edge_linetype_var}}{Column name for line type.}
\item{\code{edge_alpha_by} or \code{edge_alpha_var}}{Column name for transparency.
For weighted networks, defaults to the weight variable if not specified.}
}
}

\section{Text and Label Options}{


Selective labeling:
\describe{
\item{\code{select_text}}{Character vector of node names to show as text.}
\item{\code{select_text_display}}{Alternative text to display (same length as
\code{select_text}).}
\item{\code{select_label}}{Character vector of node names to show with boxes.}
\item{\code{select_label_display}}{Alternative labels (same length as
\code{select_label}).}
}

Text aesthetics:
\describe{
\item{\code{text_size}}{Fixed size for all text. Default is 3.88.}
\item{\code{text_color}}{Fixed color for all text. Default is "black".}
\item{\code{text_alpha}}{Fixed transparency for text.}
\item{\code{text_size_by}}{Variable to map to text size.}
\item{\code{text_color_by}}{Variable to map to text color.}
}

Label (boxed text) aesthetics have similar parameters with \code{label_} prefix.
}

\section{Scale Labels}{


Customize legend titles:
\describe{
\item{\code{node_size_label} or \code{point_size_label}}{Legend title for size.}
\item{\code{node_color_label} or \code{point_color_label}}{Legend title for color.}
\item{\code{edge_alpha_label}}{Legend title for edge transparency.}
\item{\code{edge_color_label}}{Legend title for edge color.}
}
}

\section{Highlighting Parameters}{

\describe{
\item{\code{highlight}}{Character vector of node names to highlight with different colors.
Non-highlighted nodes will be colored grey. Highlighted nodes can also be automatically
enlarged if \code{highlight_size_increase} is greater than 1.}
\item{\code{highlight_colors}}{Named vector of colors for highlighted nodes. If NULL,
uses default distinct colors (red, blue, green for up to 3 nodes, or a color palette
for more). Names should match the values in the \code{highlight} parameter.
Example: \code{c('USA' = 'blue', 'China' = 'red', 'Russia' = 'green')}.}
\item{\code{highlight_legend_title}}{Title for the highlight legend. Default is "Highlighted".}
\item{\code{highlight_size_increase}}{Numeric factor to increase size of highlighted nodes.
Default is 1.5 (50\% larger). Set to 1 for no size change. The size increase is applied
multiplicatively to any existing size mapping.}
\item{\code{show_other_in_legend}}{Logical. Include "Other" category in legend? Default is FALSE.
When FALSE, only highlighted nodes appear in the legend.}
}
}

\section{Special Parameters}{

\describe{
\item{\code{weight_transform}}{Function to transform edge weights before plotting.
Example: \code{log1p} for log(x+1) transformation. Applied before mapping to
aesthetics.}
\item{\code{check_overlap}}{Logical. Avoid text overlap? Default is \code{TRUE}.}
\item{\code{return_components}}{Logical. Return plot components instead of
assembled plot? Useful for manual customization. Default is \code{FALSE}.}
\item{\code{palette}}{Character string for color palette, see \code{list_palettes()}.}
\item{\code{style}}{A style function (e.g., \code{style_budapest}) or its name as a
string. Applies a complete visual style including colors, shapes, and layout preferences.}
}
}

\examples{
# Load example data
data(icews)

# Basic cross-sectional network
icews_10 <- icews[icews$year == 2010,]
net_10 <- netify(
  icews_10,
  actor1 = 'i', actor2 = 'j',
  symmetric = FALSE,
  weight = 'verbCoop'
)

# Simple plot
plot(net_10)

# add nodal stats to netlet
net_10 <- add_node_vars(
  net_10, 
  summary_actor(net_10), 
  'actor'
)

# Customized plot with new naming convention
plot(net_10,
  edge_color = 'lightgrey',
  node_size_by = 'degree_total',          # Instead of point_size_var
  node_color = 'steelblue',
  edge_alpha_by = 'verbCoop',       # Instead of edge_alpha_var
  node_size_label = 'Degree',
  edge_alpha_label = 'Verbal Cooperation'
)

# Longitudinal network example
net_longit <- netify(
  icews,
  actor1 = 'i', actor2 = 'j',
  time = 'year',
  symmetric = FALSE,
  weight = 'verbCoop',
  nodal_vars = c('i_polity2', 'i_log_gdp')
)

# Add network statistics
net_longit <- add_node_vars(
  net_longit,
  summary_actor(net_longit),
  actor = 'actor', 
  time = 'time'
)

# Plot with multiple aesthetics
plot(net_longit,
  # Edges
  edge_color = 'grey70',
  weight_transform = log1p,         # Transform weights
  # Nodes  
  node_size_by = 'degree_total',
  node_color_by = 'i_polity2',
  # Labels
  node_size_label = 'Total Degree',
  node_color_label = 'Polity Score',
  edge_alpha_label = 'Log(Verbal Coop.)',
  # Layout
  static_actor_positions = TRUE     # Keep positions constant
)

# Selective labeling example
plot(net_10,
  node_size_by = 'degree_total',
  select_text = c('United States', 'China', 'Russian Federation'),
  text_size = 3,
  text_color = 'darkred'
)

# choose alternative labels for selected text
plot(net_10,
  node_size_by = 'degree_total',
  select_text = c('United States', 'China', 'Russian Federation'),
  select_text_display = c('USA', 'CHN', 'RUS'),
  text_size = 3,
  text_color = 'darkred'
)


# Time subsetting example
plot(net_longit,
  time = c('2010', '2011', '2012')
)

# Node subsetting example
# democracies with high GDP
plot(net_longit, node_filter = ~ i_polity2 > 6 & i_log_gdp > 25)

# use return_components=TRUE
# to get back ggplot2 pieces of plot
g10 <- plot(
  net_10, 
  node_alpha=.8,
  arrow = ggplot2::arrow(length = ggplot2::unit(0.01, "inches")),  
  node_size_by = 'log(degree_total)',
  node_size_label = 'Log(Degree)',
  edge_alpha_label='Log(Verbal Coop.)',
  remove_isolates = TRUE,
  weight_transform = log1p,
  return_components = TRUE )

# Manually assemble with custom modifications
# to scale aesthetics such as edges
g10$base +
  netify_edge(g10) +
  ggplot2::scale_alpha_continuous(range = c(0.01, 0.2)) +
  netify_node(g10) +
  theme_netify()


}
