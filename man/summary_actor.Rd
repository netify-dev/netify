% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summary_actor.R
\name{summary_actor}
\alias{summary_actor}
\title{Summary method to get actor level statistics for netify objects}
\usage{
summary_actor(netlet, invert_weights_for_igraph = TRUE, other_stats = NULL)
}
\arguments{
\item{netlet}{Object of class \code{netify}, typically produced by \code{get_adjacency} or other network creation functions within the package.}

\item{invert_weights_for_igraph}{Logical; if TRUE, the weights of the edges are inverted before
being used in the calculation of closeness or betweenness centrality. This is because
igraph treats edge weights as distances. Inverting weights can be crucial when higher weights
should imply stronger (or more valuable) connections rather than longer distances. Default is TRUE.}

\item{other_stats}{A named list of functions that take a matrix and return additional actor-level statistics to be included in the output. Each function should accept a matrix as input and return a vector or single value per actor. This allows for the inclusion of custom metrics in the summary output.}
}
\value{
A \code{data.frame} object summarizing actor-level statistics of the network(s). Depending on the structure and attributes of the \code{netify} object, the output includes:
\itemize{
\item \strong{Symmetric Unweighted}: Various network measures for actor \(i\) include:
\itemize{
\item \emph{Degree}: The count of unique actors that actor \(i\) is directly connected to -- calculated as \eqn{d_i = \sum_{j=1}^{n} a_{ij}}, where \eqn{a_{ij}} is the adjacency matrix element indicating the presence (1) or absence (0) of a tie between actors \(i\) and \(j\).
\item \emph{Proportion of ties}: The percentage of actors in the network with whom actor \(i\) has a direct relationship -- calculated as \eqn{p_i = \frac{d_i}{n-1}}, where \eqn{d_i} is the degree of actor \(i\) and \(n\) is the total number of actors in the network.
\item \emph{Network share}: The fraction of the network's total connections that include actor \(i\) -- calculated as \eqn{s_i = \frac{d_i}{\sum_{j=1}^{n} d_j}}, where \eqn{d_i} is the degree of actor \(i\) and \eqn{\sum_{j=1}^{n} d_j} is the total number of ties in the network.
\item \emph{Closeness} (\(C_i\)): A measure of how close actor \(i\) is to all other actors in the network -- calculated as \eqn{C_i = \frac{1}{\sum_{j} d(i, j)}}, where \eqn{d(i, j)} is the distance to every other actor \(j\).
\item \emph{Betweenness} (\(B_i\)): A measure of actor \(i\)'s importance in connecting different parts of the network -- calculated as \eqn{B_i = \sum_{s \neq i \neq t} \frac{\sigma_{st}(i)}{\sigma_{st}}}, where \eqn{\sigma_{st}} is the total number of shortest paths from node \(s\) to node \(t\) and \eqn{\sigma_{st}(i)} is the number of those paths that pass through \(i\).
\item \emph{Eigenvector centrality} (\(EC_i\)): A measure of actor \(i\)'s influence based on their connections to other highly connected actors in the network, calculated using the principal eigenvector of the network's adjacency matrix.
}
\item \strong{Symmetric Weighted}: Includes the same statistics as the symmetric unweighted case, with additional measures accounting for the weight of connections:
\itemize{
\item \emph{Strength sum}: The total weight of the ties connected to actor \(i\) in the network -- calculated as \eqn{s_i^{sum} = \sum_{j=1}^{n} w_{ij}}, where \eqn{w_{ij}} is the weight of the tie between actors \(i\) and \(j\).
\item \emph{Strength average}: The average weight of the ties connected to actor \(i\) -- calculated as \eqn{s_i^{avg} = \frac{s_i^{sum}}{d_i}}, where \eqn{s_i^{sum}} is the strength sum of actor \(i\) and \eqn{d_i} is the degree of actor \(i\).
}
\item \emph{Strength standard deviation}: The variability in the weights of ties connected to actor \(i\) -- calculated as \eqn{s_i^{sd} = \sqrt{\frac{1}{d_i} \sum_{j=1}^{n} (w_{ij} - s_i^{avg})^2}}, where \eqn{w_{ij}} is the weight of the tie between actors \(i\) and \(j\).
\item \emph{Strength median}: The median weight of the ties connected to actor \(i\) -- calculated as the middle value of the sorted weights.
\item For \emph{closeness} and \emph{betweenness}, edge weights are typically inverted to treat them as distances, following the convention in \code{igraph}. This behavior can be modified by setting the \code{invert_weights_for_igraph} parameter in the \code{summary_actor} function to FALSE.
\item \strong{Asymmetric Unweighted}: Same as the symmetric case but now a statistics for the row and column are calculated separately; when relevant a total statistic is calculated as well.
\item \strong{Asymmetric Weighted}: Same as the symmetric case but now a statistics for the row and column are calculated separately; when relevant a total statistic is calculated as well.
}
}
\description{
\code{summary_actor} provides detailed actor-level statistics for \code{netify} objects, handling different network structures and weight conditions. It produces a data frame summarizing various network metrics like degree, strength, closeness, betweenness, and centrality measures.
}
\details{
The function automatically adjusts calculations based on network symmetry and weight attributes, offering tailored statistical outputs for comprehensive network analysis.
It supports handling of both cross-sectional and longitudinal network data, ensuring that each actor's metrics are accurately computed over time if applicable.
Examples of additional computations (like authority or hub scores) are provided only for asymmetric networks.
}
\examples{
# load icews data
data(icews)

# create a netify object
netlet = netify(
    dyad_data=icews, actor1='i', actor2='j',
    time = 'year',
    symmetric=FALSE, weight='verbCoop',
    mode='unipartite', sum_dyads=FALSE,
    actor_time_uniform=TRUE, actor_pds=NULL,
    diag_to_NA=TRUE, missing_to_zero=TRUE
)

# get actor-level statistics
actor_stats <- summary_actor(netlet)
head(actor_stats)

# add statistic that get 
# the max incoming and outgoing tie
max_out <- function(mat){ apply(mat, 1, max, na.rm=TRUE) }
max_in <- function(mat){ apply(mat, 2, max, na.rm=TRUE) }
actor_stats_custom <- summary_actor(netlet, other_stats = list(max_out = max_out, max_in = max_in))
head(actor_stats_custom)

}
\author{
Cassy Dorff, Shahryar Minhas
}
