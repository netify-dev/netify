[{"path":"https://netify-dev.github.io/netify/articles/ego_networks.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Netify: Ego Networks","text":"Sundberg, Ralph Erik Melander (2013) Introducing UCDP Georeferenced Event Dataset. Journal Peace Research 50(4).","code":""},{"path":"https://netify-dev.github.io/netify/articles/manual_plotting.html","id":"preparing-data","dir":"Articles","previous_headings":"","what":"Preparing data","title":"Netify: Manual Plotting with ggplot2","text":"First lets create netlet object dyadic data (ICEWS data) using netify package. longitudinal, weighted network nodal dyadic attributes. steps show highlight attributes plot. Next, use net_plot_data function create data frame ggplot2. net_plot_data extracts sets node edge data netify object according specified plotting arguments. returns list different components important one users net_dfs element. element contains two objects: edge_data nodal_data. data frames can passed ggplot2. x y nodal_data x1, y1, x2, y2 edge_data coordinates nodes edges, respectively. coordinates used plot network.","code":"# load icews data data(icews)  # choose attributes nvars = c( 'i_polity2', 'i_log_gdp', 'i_log_pop' ) dvars = c( 'matlCoop', 'verbConf', 'matlConf' )  # create a netify object netlet = netify(     dyad_data=icews, actor1='i', actor2='j',     time = 'year',     symmetric=FALSE, weight='verbCoop',     mode='unipartite', sum_dyads=FALSE,     actor_time_uniform=TRUE, actor_pds=NULL,     diag_to_NA=TRUE, missing_to_zero=TRUE,     nodal_vars = nvars,      dyad_vars = dvars )  # subset to a few actors actors_to_keep = c(   'Australia', 'Brazil',   'Canada', 'Chile', 'China',   'Colombia', 'Egypt', 'Ethiopia',   'France', 'Germany', 'Ghana',    'Hungary', 'India', 'Indonesia',    'Iran, Islamic Republic Of',    'Israel', 'Italy', 'Japan', 'Kenya',    \"Korea, Democratic People's Republic Of\",   'Korea, Republic Of', 'Nigeria', 'Pakistan',    'Qatar', 'Russian Federation', 'Saudi Arabia',   'South Africa', 'Spain', 'Sudan',    'Syrian Arab Republic', 'Thailand',    'United Kingdom', 'United States',    'Zimbabwe' ) netlet = subset_netlet(   netlet,    what_to_subset = actors_to_keep )  # print netlet ## ✔ Hello, you have created network data, yay! ## • Unipartite ## • Asymmetric ## • Weights from `verbCoop` ## • Longitudinal: 13 Periods ## • # Unique Actors: 34 ## Network Summary Statistics (averaged across time): ##           dens miss    mean recip trans ## verbCoop 0.887    0 179.484 0.978 0.928 ## • Nodal Features: i_polity2, i_log_gdp, i_log_pop ## • Dyad Features: matlCoop, verbConf, matlConf # create a data frame for plotting plot_data = net_plot_data(netlet)  # get relevant dfs net_dfs = plot_data$net_dfs  # check structure of what's here str(net_dfs) ## List of 2 ##  $ edge_data :'data.frame':  12937 obs. of  11 variables: ##   ..$ from    : chr [1:12937] \"Australia\" \"Australia\" \"Australia\" \"Australia\" ... ##   ..$ to      : chr [1:12937] \"Brazil\" \"Brazil\" \"Brazil\" \"Brazil\" ... ##   ..$ time    : chr [1:12937] \"2002\" \"2003\" \"2004\" \"2005\" ... ##   ..$ verbCoop: num [1:12937] 3 3 24 27 54 4 26 7 12 5 ... ##   ..$ matlCoop: num [1:12937] 0 1 0 0 0 0 0 0 1 0 ... ##   ..$ verbConf: num [1:12937] 0 2 0 2 3 0 2 1 0 0 ... ##   ..$ matlConf: num [1:12937] 0 0 2 0 1 0 0 0 0 0 ... ##   ..$ x1      : num [1:12937] -3.187 -0.3978 -0.0496 -0.3853 -0.5135 ... ##   ..$ y1      : num [1:12937] 2.535 -1.3386 0.0651 0.9399 1.4266 ... ##   ..$ x2      : num [1:12937] -2.9515 -0.0649 -0.0429 -0.2949 -0.3298 ... ##   ..$ y2      : num [1:12937] 2.315 -1.441 -0.148 1.045 1.485 ... ##  $ nodal_data:'data.frame':  442 obs. of  10 variables: ##   ..$ name      : chr [1:442] \"Australia\" \"Australia\" \"Australia\" \"Australia\" ... ##   ..$ time      : chr [1:442] \"2002\" \"2003\" \"2004\" \"2005\" ... ##   ..$ i_polity2 : int [1:442] 10 10 10 10 10 10 10 10 10 10 ... ##   ..$ i_log_gdp : num [1:442] 27.6 27.6 27.6 27.7 27.7 ... ##   ..$ i_log_pop : num [1:442] 16.8 16.8 16.8 16.8 16.8 ... ##   ..$ x         : num [1:442] -3.187 -0.3978 -0.0496 -0.3853 -0.5135 ... ##   ..$ y         : num [1:442] 2.535 -1.3386 0.0651 0.9399 1.4266 ... ##   ..$ name_text : chr [1:442] \"Australia\" \"Australia\" \"Australia\" \"Australia\" ... ##   ..$ name_label: chr [1:442] \"Australia\" \"Australia\" \"Australia\" \"Australia\" ... ##   ..$ id        : chr [1:442] \"Australia_2002\" \"Australia_2003\" \"Australia_2004\" \"Australia_2005\" ... # check the first few rows of the edge data head(net_dfs$edge_data) ##        from     to time verbCoop matlCoop verbConf matlConf          x1 ## 1 Australia Brazil 2002        3        0        0        0 -3.18695808 ## 2 Australia Brazil 2003        3        1        2        0 -0.39782446 ## 3 Australia Brazil 2004       24        0        0        2 -0.04957632 ## 4 Australia Brazil 2005       27        0        2        0 -0.38526735 ## 5 Australia Brazil 2006       54        0        3        1 -0.51353531 ## 6 Australia Brazil 2007        4        0        0        0 -0.69085788 ##            y1          x2         y2 ## 1  2.53500179 -2.95152256  2.3151148 ## 2 -1.33861627 -0.06486153 -1.4411348 ## 3  0.06513246 -0.04293486 -0.1479501 ## 4  0.93989844 -0.29488038  1.0449019 ## 5  1.42660061 -0.32983771  1.4847187 ## 6  1.79965809 -0.86547402  1.7542202 # check the first few rows of the nodal data head(net_dfs$nodal_data) ##        name time i_polity2 i_log_gdp i_log_pop           x           y ## 1 Australia 2002        10  27.55492  16.78568 -3.18695808  2.53500179 ## 2 Australia 2003        10  27.58556  16.79718 -0.39782446 -1.33861627 ## 3 Australia 2004        10  27.62686  16.80787 -0.04957632  0.06513246 ## 4 Australia 2005        10  27.65791  16.82005 -0.38526735  0.93989844 ## 5 Australia 2006        10  27.68495  16.83354 -0.51353531  1.42660061 ## 6 Australia 2007        10  27.72203  16.85179 -0.69085788  1.79965809 ##   name_text name_label             id ## 1 Australia  Australia Australia_2002 ## 2 Australia  Australia Australia_2003 ## 3 Australia  Australia Australia_2004 ## 4 Australia  Australia Australia_2005 ## 5 Australia  Australia Australia_2006 ## 6 Australia  Australia Australia_2007"},{"path":"https://netify-dev.github.io/netify/articles/manual_plotting.html","id":"creating-a-plot","dir":"Articles","previous_headings":"","what":"Creating a plot","title":"Netify: Manual Plotting with ggplot2","text":"Now data, can create plot using ggplot2. ’ll use geom_segment geom_point (, geom_label, geom_text, `ggrepel package equivalents) functions plot edges nodes, respectively.","code":"ggplot() +      geom_segment(         data = net_dfs$edge_data,         aes(             x=x1,              y=y1,              xend=x2,              yend=y2         ),         color='lightgrey',         alpha=.2     ) +     geom_point(         data = net_dfs$nodal_data,         aes(             x=x,              y=y,             size=i_log_pop,              color=i_polity2         )     ) +   labs(     color='Polity',      size='Log(Pop.)'   ) +     scale_color_gradient(low='#a6bddb', high='#014636') +     facet_wrap(~time, scales='free') +     theme_netify()"},{"path":"https://netify-dev.github.io/netify/articles/manual_plotting.html","id":"changing-the-layout","dir":"Articles","previous_headings":"Creating a plot","what":"Changing the layout","title":"Netify: Manual Plotting with ggplot2","text":"default layouts node positions drawn layout_nicely algorithm igraph package. Users can specify layouts , example, say wanted use mds algorithm instead:","code":"# create a df using mds instead  plot_data_mds = net_plot_data(netlet,      list(         layout='mds'         )     )  # see new x-y coordinates lapply(plot_data_mds$net_dfs, head) ## $edge_data ##        from     to time verbCoop matlCoop verbConf matlConf          x1 ## 1 Australia Brazil 2002        3        0        0        0 -0.35485450 ## 2 Australia Brazil 2003        3        1        2        0  0.20857397 ## 3 Australia Brazil 2004       24        0        0        2 -0.04224981 ## 4 Australia Brazil 2005       27        0        2        0 -0.06014447 ## 5 Australia Brazil 2006       54        0        3        1  0.15073774 ## 6 Australia Brazil 2007        4        0        0        0 -0.03161665 ##            y1         x2         y2 ## 1 -0.16803048 -0.7281113  0.3619659 ## 2 -0.12705283  0.2552975 -0.1025320 ## 3  0.05123628  0.2101186  0.9327511 ## 4 -0.02708750  0.4552562  0.1927606 ## 5  0.46114648  0.1278155  0.3895673 ## 6 -0.03885021 -0.3606698  0.8028908 ##  ## $nodal_data ##        name time i_polity2 i_log_gdp i_log_pop           x           y ## 1 Australia 2002        10  27.55492  16.78568 -0.35485450 -0.16803048 ## 2 Australia 2003        10  27.58556  16.79718  0.20857397 -0.12705283 ## 3 Australia 2004        10  27.62686  16.80787 -0.04224981  0.05123628 ## 4 Australia 2005        10  27.65791  16.82005 -0.06014447 -0.02708750 ## 5 Australia 2006        10  27.68495  16.83354  0.15073774  0.46114648 ## 6 Australia 2007        10  27.72203  16.85179 -0.03161665 -0.03885021 ##   name_text name_label             id ## 1 Australia  Australia Australia_2002 ## 2 Australia  Australia Australia_2003 ## 3 Australia  Australia Australia_2004 ## 4 Australia  Australia Australia_2005 ## 5 Australia  Australia Australia_2006 ## 6 Australia  Australia Australia_2007"},{"path":"https://netify-dev.github.io/netify/articles/manual_plotting.html","id":"add-edge-information","dir":"Articles","previous_headings":"Creating a plot","what":"Add Edge Information","title":"Netify: Manual Plotting with ggplot2","text":"far, focused using color convey information nodal attributes network (population size polity score). Now, let’s add edge information plot. example, can include information matlConf dyadic attribute. Imagine want highlight edges verbal cooperation occur time higher average levels material conflict occur network. First, let’s create variable edge data. Now new variable data.frame, can plot note now need color aesthetic points segments, even though ggplot2 supports one legend aesthetic default. can get around using new_scale_color function `ggnewscale package.","code":"if(!'dplyr' %in% rownames(installed.packages())){   install.packages('dplyr', repos='https://cloud.r-project.org') } library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union # create high_matlConf variable net_dfs$edge_data = net_dfs$edge_data |>     group_by(time) |>     mutate(         high_matlConf = matlConf > mean(matlConf, na.rm=TRUE)     ) |>     ungroup() |>     as.data.frame()  # check head(net_dfs$edge_data) ##        from     to time verbCoop matlCoop verbConf matlConf          x1 ## 1 Australia Brazil 2002        3        0        0        0 -3.18695808 ## 2 Australia Brazil 2003        3        1        2        0 -0.39782446 ## 3 Australia Brazil 2004       24        0        0        2 -0.04957632 ## 4 Australia Brazil 2005       27        0        2        0 -0.38526735 ## 5 Australia Brazil 2006       54        0        3        1 -0.51353531 ## 6 Australia Brazil 2007        4        0        0        0 -0.69085788 ##            y1          x2         y2 high_matlConf ## 1  2.53500179 -2.95152256  2.3151148         FALSE ## 2 -1.33861627 -0.06486153 -1.4411348         FALSE ## 3  0.06513246 -0.04293486 -0.1479501         FALSE ## 4  0.93989844 -0.29488038  1.0449019         FALSE ## 5  1.42660061 -0.32983771  1.4847187         FALSE ## 6  1.79965809 -0.86547402  1.7542202         FALSE # color line segments by this new variable ggplot() +      geom_segment(         data = net_dfs$edge_data,         aes(             x=x1,              y=y1,              xend=x2,              yend=y2,             color=high_matlConf         ),         alpha=.2     ) +     scale_color_manual(       name='',        values=c('grey', 'red'),       labels=c('Below Avg. Matl. Conf', 'Above Avg.')       ) +     new_scale_color() +     geom_point(         data = net_dfs$nodal_data,         aes(             x=x,              y=y,             size=i_log_pop,              color=i_polity2         )     ) +     scale_color_gradient(       name='Polity',       low='#a6bddb', high='#014636') +   labs(     size='Log(Pop.)'   ) +     facet_wrap(~time, scales='free') +     theme_netify() +   theme(     legend.position='right'   )"},{"path":"https://netify-dev.github.io/netify/articles/manual_plotting.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Netify: Manual Plotting with ggplot2","text":"Boschee, Elizabeth; Lautenschlager, Jennifer; O’Brien, Sean; Shellman, Steve; Starz, James; Ward, Michael, 2015, ``ICEWS Coded Event Data’’, doi:10.7910/DVN/28075 , Harvard Dataverse. Pedersen, T. L. (2020). ggnewscale: Multiple Fill Colour Scales ‘ggplot2’. R package version 0.4.3. https://CRAN.R-project.org/package=ggnewscale Wickham, H. (2016). ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York.","code":""},{"path":"https://netify-dev.github.io/netify/articles/workshop_demo.html","id":"package-overview","dir":"Articles","previous_headings":"","what":"Package Overview","title":"Netify Workshop","text":"vignette provides high level overview package start finish. best use vignette introduce main components package larger audiences. overview covers primary functions data examples minimal writing. netify goals: Create: Netify data! Make easy users create networks raw data RR well add additional features, nodal dyadic variables, network object. Explore: Explore characteristics network created, like summary statistics network actor levels. Visualize network. Advance: Advance network analysis next stage preparing use network packages modeling approaches. netify provides suite primary functions help achieve goals: netify can take dyadic data edgelists get started. package can also create different types networks including: cross sectional networks longitudinal (static varying actor composition) bipartite networks multilayer well create networks different edge types: weighted binary symmetric non-symmetric","code":""},{"path":"https://netify-dev.github.io/netify/articles/workshop_demo.html","id":"step-1-create","dir":"Articles","previous_headings":"","what":"Step 1: Create 💡","title":"Netify Workshop","text":"Begin loading packages supplying data. use peacesciencer package grab familiar data. Next, create netlet object COW data frame using package’s core function netify. number useful parameters, important ones highlight : dyad_data dyadic data.frame least following variables used specify actors: actor1: character indicating actor 1 variable data actor2: character indicating actor 2 variable data netify_type type netlet object (cross-sec, longit_list, longit_array). Congratulations created network object! 🎉 can also add nodal dyadic data ’ve created network via add_nodal() add_dyad() functions. Let’s assume information actor network ’d like add nodal variable already made network object. original data set elsewhere. example, lets add logged variable measuring gdp node network time:","code":"# load packages library(netify)  # install extra packages for this vignette if(!'tidyverse' %in% rownames(installed.packages())){   install.packages('tidyverse', repos='https://cloud.r-project.org') } if(!'peacesciencer' %in% rownames(installed.packages())){   install.packages('peacesciencer', repos='https://cloud.r-project.org') } # load necessary packages for this vignette library(peacesciencer) library(tidyverse)  # organize external data for peacesciencer peacesciencer::download_extdata()  # create dyadic data set over time using peacesciencer cow_dyads <- create_dyadyears(       subset_years = c(1995:2014)      ) |>     # add mids     add_cow_mids() |>     # add capital distance     add_capital_distance() |>     # add democracy     add_democracy() |>     # add gdp     add_sdp_gdp() mid_long_network <- netify(   cow_dyads,   actor1='ccode1', actor2='ccode2', time='year',   weight='cowmidonset',    actor_time_uniform=FALSE,   sum_dyads=FALSE, symmetric=TRUE,   diag_to_NA=TRUE, missing_to_zero=TRUE,   nodal_vars = c('v2x_polyarchy1', 'v2x_polyarchy2'),   dyad_vars = c('capdist'),   dyad_vars_symmetric = c(TRUE)   ) ## ! Warning: Converting `actor1` and/or `actor2` to character vector(s). # create a vector of nodal data node_data <- unique(cow_dyads[,c(\"ccode1\", \"year\", \"wbgdppc2011est2\")]) node_data$wbgdppc2011est2_log <- log(node_data$wbgdppc2011est2)  # add nodal variable to netlet object mid_long_network <- add_nodal(     netlet = mid_long_network,     node_data = node_data,     actor = \"ccode1\",     time = \"year\" )  # create another dyadic var in cow cow_dyads$log_capdist = log(cow_dyads$capdist + 1)  # now lets add this to the netlet mid_long_network <- add_dyad(   netlet = mid_long_network,    dyad_data= cow_dyads,   actor1= 'ccode1',   actor2='ccode2',   time='year',   dyad_vars = 'log_capdist',   dyad_vars_symmetric = TRUE )"},{"path":"https://netify-dev.github.io/netify/articles/workshop_demo.html","id":"step-2-explore","dir":"Articles","previous_headings":"","what":"Step 2: Explore 🔎","title":"Netify Workshop","text":"made network, let’s look . First, might want take peek network object see matrix looks way ’d expect look. function lets glance specific slice network longitudinal entire network cross-sectional. Next, let’s examine basic summary statistics network using oursummary() function. can also make quick visualization network statistics time using summary statistics data frame.  might also want look summary actor-level statistics overtime. built-function, summary_actor calculate -degree, -degree, average degree, eigenvector centrality actor time period. across_actors function allows users toggle whether want summary given statistic across actors (shown density plot) specific actors: can look distribution statistic actors time:  might like select specific statistic focus across actors time:  Say wanted showcase actor-specific statistics time. can use plot_actor_stats function well, though ’s highly recommended subset actors legible plot.  can also zoom specific time slice network:  Instead looking summary statistics, also might want simply visualize entire network. can plotting netify object. (Isolates removed default seed set 6886 node layout). goal make super easy plotting time-varying attributes actors.   can also use netify functions explore actor level summary statistics network graph. can quickly inspect object print function. well look attributes data specify showing nodal data information. now return network graph highlighting specific nodal attributes:   might also prefer add labels, select :","code":"peek(   mid_long_network,    when_to_peek = c('2012'),    what_to_peek = c(13, 15:24)   ) ## $`2012` ##      2 200 205 210 211 212 220 221 223 225 230 ## 2   NA   0   0   0   0   0   0   0   0   0   0 ## 200  0  NA   0   0   0   0   0   0   0   0   1 ## 205  0   0  NA   0   0   0   0   0   0   0   0 ## 210  0   0   0  NA   0   0   0   0   0   0   0 ## 211  0   0   0   0  NA   0   0   0   0   0   0 ## 212  0   0   0   0   0  NA   0   0   0   0   0 ## 220  0   0   0   0   0   0  NA   0   0   0   0 ## 221  0   0   0   0   0   0   0  NA   0   0   0 ## 223  0   0   0   0   0   0   0   0  NA   0   0 ## 225  0   0   0   0   0   0   0   0   0  NA   0 ## 230  0   1   0   0   0   0   0   0   0   0  NA # create data.frame that provides network-level summary stats  # for each year of the network mid_long_summary <- summary(mid_long_network) plot_graph_stats(mid_long_summary) # every year & every actor  summary_actor_mids <- summary_actor(mid_long_network) head(summary_actor_mids) ##   actor time degree   prop_ties network_share closeness betweenness ## 1   100 1995      1 0.005376344    0.01470588         1           0 ## 2   101 1995      1 0.005376344    0.01470588         1           0 ## 3   110 1995      0 0.000000000    0.00000000       NaN           0 ## 4   115 1995      0 0.000000000    0.00000000       NaN           0 ## 5   130 1995      1 0.005376344    0.01470588         1           0 ## 6   135 1995      1 0.005376344    0.01470588         1           0 ##   eigen_vector ## 1            0 ## 2            0 ## 3            0 ## 4            0 ## 5            0 ## 6            0 # density plot across all actors # for each stat plot_actor_stats(   summary_actor_mids,   across_actor= TRUE,   ) # focus on closeness plot_actor_stats(   summary_actor_mids,   across_actor = TRUE,   specific_stats='closeness'   ) ## Picking joint bandwidth of 0.114 ## Warning: Removed 2913 rows containing non-finite outside the scale range ## (`stat_density_ridges()`). # top 5 GDP countries (USA, China, Japan, Germany, India) top_5 <- c(\"2\", \"710\", \"740\", \"255\", \"750\")  # plot_actor_stats(   summary_actor_mids,    across_actor = FALSE,    specific_actors = top_5 ) ## Warning: Removed 2913 rows containing missing values or values outside the scale range ## (`geom_point()`). summary_df_static = summary_actor_mids[summary_actor_mids$time == 2011,]  plot_actor_stats(   summary_df_static,   across_actor=FALSE,   specific_actors=top_5 ) ## ! Note: The `summary_df` provided only has one unique time point, so longitudional will be set to FALSE. ## Warning: Removed 123 rows containing missing values or values outside the scale range ## (`position_quasirandom()`). # default plot plot.netify(mid_long_network,             static_actor_positions = TRUE,             remove_isolates = FALSE) # a little cleaner plot(     mid_long_network,     edge_color='grey',     node_size=2 ) # add actor variables from summary_actor_mids mid_long_network = add_nodal(     mid_long_network,      summary_actor_mids,     actor='actor', time='time',     node_vars = c('degree', 'prop_ties', 'eigen_vector'), ) # print netlet to make sure they got added to nodal features print(mid_long_network) ## ✔ Hello, you have created network data, yay! ## • Unipartite ## • Symmetric ## • Weights from `cowmidonset` ## • Longitudinal: 20 Periods ## • # Unique Actors: 195 ## Network Summary Statistics (averaged across time): ##              dens miss trans ## cowmidonset 0.002    0 0.056 ## • Nodal Features: v2x_polyarchy1, v2x_polyarchy2, wbgdppc2011est2, ## wbgdppc2011est2_log, degree, prop_ties, eigen_vector ## • Dyad Features: capdist, log_capdist # if you're curious as to where they live head(   attr(     mid_long_network,      'nodal_data'   ) ) ##   actor time v2x_polyarchy1 v2x_polyarchy2 wbgdppc2011est2 wbgdppc2011est2_log ## 1   100 1995          0.595          0.883          10.740            2.373975 ## 2   100 1996          0.574          0.881          10.768            2.376579 ## 3   100 1997          0.581          0.868          10.798            2.379361 ## 4   100 1998          0.558          0.867          10.833            2.382597 ## 5   100 1999          0.553          0.864          10.860            2.385086 ## 6   100 2000          0.562          0.863          10.888            2.387661 ##   degree   prop_ties eigen_vector ## 1      1 0.005376344 0.000000e+00 ## 2      0 0.000000000 0.000000e+00 ## 3      1 0.005376344 0.000000e+00 ## 4      0 0.000000000 3.110014e-20 ## 5      0 0.000000000 4.945764e-19 ## 6      1 0.005263158 4.953675e-03 #i.e.,  head(attributes(mid_long_network)$nodal_data) ##   actor time v2x_polyarchy1 v2x_polyarchy2 wbgdppc2011est2 wbgdppc2011est2_log ## 1   100 1995          0.595          0.883          10.740            2.373975 ## 2   100 1996          0.574          0.881          10.768            2.376579 ## 3   100 1997          0.581          0.868          10.798            2.379361 ## 4   100 1998          0.558          0.867          10.833            2.382597 ## 5   100 1999          0.553          0.864          10.860            2.385086 ## 6   100 2000          0.562          0.863          10.888            2.387661 ##   degree   prop_ties eigen_vector ## 1      1 0.005376344 0.000000e+00 ## 2      0 0.000000000 0.000000e+00 ## 3      1 0.005376344 0.000000e+00 ## 4      0 0.000000000 3.110014e-20 ## 5      0 0.000000000 4.945764e-19 ## 6      1 0.005263158 4.953675e-03 # vary node size by degree plot(     mid_long_network,     edge_color='grey',     point_size_var='degree' ) # vary node color by polyarchy plot(     mid_long_network,     edge_color='grey',     point_size_var='degree',     point_color_var='v2x_polyarchy1'     ) +      scale_color_gradient2() +   labs(     size = 'Degree',      color = 'Polyarchy'   ) library(countrycode) cowns = countrycode(     c(       'United States', 'China', 'Russia',        'France', 'Germany', 'United Kingdom'),      'country.name', 'cown'     )  cabbs = countrycode(cowns, 'cown', 'iso3c')  plot(     mid_long_network,     edge_color='grey',     point_size_var='degree',     point_color_var='v2x_polyarchy1',     select_text = cowns,     select_text_display = cabbs,     text_size = 3     ) +      scale_color_gradient2() +   labs(     size = 'Degree',      color = 'Polyarchy'   ) ## Warning: Removed 839 rows containing missing values or values outside the scale range ## (`geom_text()`). # or we can go with labels only  # and remove points plot(     mid_long_network,     edge_color='grey',     add_points = FALSE,      add_label = TRUE,     label_size_var='degree',     label_color = 'white',     label_fill_var='v2x_polyarchy1'     ) +      scale_color_gradient2() +   labs(     size = 'Degree',      color = 'Polyarchy'   ) ## Warning in plot(mid_long_network, edge_color = \"grey\", add_points = FALSE, : ## Ignoring unknown parameters: `check_overlap`"},{"path":"https://netify-dev.github.io/netify/articles/workshop_demo.html","id":"step-3-advance","dir":"Articles","previous_headings":"","what":"Step 3: Advance 🚀","title":"Netify Workshop","text":"created explored network object, might want continue analyzing data using different modeling approaches. netify makes simple even though models aren’t! sake convergence lets go cross-sectional networks. First, prep data: Next, let’s take look passing netify object amen function: can apply process ERGMs:","code":"# prep data cow_cross = cow_dyads |>    group_by(ccode1, ccode2) |>   summarize(     cowmidonset = ifelse(any(cowmidonset>0), 1, 0),     capdist = mean(capdist),     polity21 = mean(polity21, na.rm=TRUE),     polity22 = mean(polity22, na.rm=TRUE),     wbgdp2011est1 = mean(wbgdp2011est1, na.rm=TRUE),     wbgdp2011est2 = mean(wbgdp2011est2, na.rm=TRUE),     wbpopest1 = mean(wbpopest1, na.rm=TRUE),     wbpopest2 = mean(wbpopest2, na.rm=TRUE)   ) |>   ungroup() |>   mutate(     capdist = log(capdist+1)   )  # subset set to actors with 10mil pop actor_to_keep = cow_cross |>   select(ccode1, wbpopest1) |>   filter(wbpopest1>log(10000000)) |>   distinct(ccode1)  # filter cow_cross by actor_to_keep cow_cross = cow_cross |>   filter(ccode1 %in% actor_to_keep$ccode1) |>   filter(ccode2 %in% actor_to_keep$ccode1)  # create netlet mid_cross_network <- netify(   cow_cross,   actor1='ccode1', actor2='ccode2',   weight='cowmidonset',    sum_dyads=FALSE, symmetric=TRUE,   diag_to_NA=TRUE, missing_to_zero=FALSE,   nodal_vars = c(     'polity21', 'polity22', 'wbgdp2011est1',      'wbgdp2011est2', 'wbpopest1', 'wbpopest2'),   dyad_vars = c('capdist'),   dyad_vars_symmetric = c(TRUE)   ) # install (if necessary) and load amen if(!'amen' %in% rownames(installed.packages())){   install.packages('amen', repos='https://cloud.r-project.org') } library(amen)  # prep for amen mid_cross_amen <- prep_for_amen(mid_cross_network)  # we got all the elements we need for amen! woohoO! str(mid_cross_amen) ## List of 4 ##  $ Y    : num [1:81, 1:81] NA 1 1 0 0 0 0 0 0 0 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##   .. ..$ : chr [1:81] \"100\" \"101\" \"130\" \"135\" ... ##   .. ..$ : chr [1:81] \"100\" \"101\" \"130\" \"135\" ... ##  $ Xdyad: num [1:81, 1:81, 1] NA 6.93 6.6 7.54 7.96 ... ##   ..- attr(*, \"dimnames\")=List of 3 ##   .. ..$ : chr [1:81] \"100\" \"101\" \"130\" \"135\" ... ##   .. ..$ : chr [1:81] \"100\" \"101\" \"130\" \"135\" ... ##   .. ..$ : chr \"capdist\" ##  $ Xrow : num [1:81, 1:6] 7 4.35 6.35 6.8 8 9.2 7.8 10 10 10 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##   .. ..$ : chr [1:81] \"100\" \"101\" \"130\" \"135\" ... ##   .. ..$ : chr [1:6] \"polity21\" \"polity22\" \"wbgdp2011est1\" \"wbgdp2011est2\" ... ##  $ Xcol : num [1:81, 1:6] 7 4.35 6.35 6.8 8 9.2 7.8 10 10 10 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##   .. ..$ : chr [1:81] \"100\" \"101\" \"130\" \"135\" ... ##   .. ..$ : chr [1:6] \"polity21\" \"polity22\" \"wbgdp2011est1\" \"wbgdp2011est2\" ... # plug and run mid_amen_mod = ame(   Y=mid_cross_amen$Y,   Xdyad=mid_cross_amen$Xdyad,   Xrow=mid_cross_amen$Xrow,   family='bin',   R=0,   symmetric=TRUE,   seed=6886,   nscan=50,    burn=10,    odens=1,    plot=FALSE,    print=FALSE ) # install (if necessary) and load ergm if(!'ergm' %in% rownames(installed.packages())){   install.packages('ergm', repos='https://cloud.r-project.org') } library(ergm) ## Loading required package: network ##  ## 'network' 1.18.2 (2023-12-04), part of the Statnet Project ## * 'news(package=\"network\")' for changes since last version ## * 'citation(\"network\")' for citation information ## * 'https://statnet.org' for help, support, and other information ## Registered S3 methods overwritten by 'ergm': ##   method               from ##   simulate.formula     lme4 ##   simulate.formula_lhs lme4 ##  ## 'ergm' 4.7.1 (2024-10-07), part of the Statnet Project ## * 'news(package=\"ergm\")' for changes since last version ## * 'citation(\"ergm\")' for citation information ## * 'https://statnet.org' for help, support, and other information ## 'ergm' 4 is a major update that introduces some backwards-incompatible ## changes. Please type 'news(package=\"ergm\")' for a list of major ## changes. # called prep_for_statnet because it's a reference # to the network library, which is what ergm uses mid_cross_ergm = prep_for_statnet(mid_cross_network)  # attributes should all be loaded into the  # appropriate slot # notice edge attribtues get a _e suffix added mid_cross_ergm ##  Network attributes: ##   vertices = 81  ##   directed = FALSE  ##   hyper = FALSE  ##   loops = FALSE  ##   multiple = FALSE  ##   bipartite = FALSE  ##   cowmidonset: 81x81 matrix ##   capdist: 81x81 matrix ##   total edges= 160  ##     missing edges= 0  ##     non-missing edges= 160  ##  ##  Vertex attribute names:  ##     polity21 polity22 vertex.names wbgdp2011est1 wbgdp2011est2 wbpopest1 wbpopest2  ##  ##  Edge attribute names:  ##     capdist_e cowmidonset # plug and run # Fit the ERGM model (well not a real ergm) ergm_model <- ergm(   formula = mid_cross_ergm ~       edges  +      nodecov(\"polity21\") +       nodecov(\"wbgdp2011est2\") +      nodecov(\"wbpopest2\")   ) ## Starting maximum pseudolikelihood estimation (MPLE): ## Obtaining the responsible dyads. ## Evaluating the predictor and response matrix. ## Maximizing the pseudolikelihood. ## Finished MPLE. ## Evaluating log-likelihood at the estimate."},{"path":"https://netify-dev.github.io/netify/articles/workshop_demo.html","id":"bonus-example","dir":"Articles","previous_headings":"Step 3: Advance 🚀","what":"Bonus Example","title":"Netify Workshop","text":"common data type used create networks structure event data, actors repeated across rows specific variable denotes ‘edge’ shown previous example. show use netify UCDP data just one example potential applications intrastate event data. first step go https://ucdp.uu.se/downloads/ download data want use. tutorial downloaded UCDP GED event data version 23.1 subset data case Mexico. Create aggregated, weighted network conflict actors Mexico. Explore    can also apply functions igraph:","code":"load(\"ucdp_ged_mexico.rda\") # default to number of events mex_network <- netify(   dyad_data = mexico,   actor1 = 'side_a',   actor2 = 'side_b',   symmetric = TRUE,   sum_dyads = TRUE,   diag_to_NA = TRUE,   missing_to_zero = TRUE ) ## ! Warning: there are repeating dyads within time periods in the dataset. When `sum_dyads = TRUE` and `weight` is not supplied, edges in the outputted adjacency matrix represent a count of interactions between actors. # A summary of the network object summary(mex_network) ##   net num_actors    density num_edges prop_edges_missing mean_edge_weight ## 1   1         72 0.02543036       130                  0         5.608764 ##   sd_edge_weight median_edge_weight min_edge_weight max_edge_weight competition ## 1       89.74295                  0               0            3076   0.1494919 ##   sd_of_actor_means transitivity ## 1          17.64839    0.1052632 # weight using a variable mex_network_civ <- netify(   dyad_data = mexico,   actor1 = 'side_a',   actor2 = 'side_b',   weight = 'deaths_civilians',   symmetric = TRUE,   sum_dyads = TRUE,   diag_to_NA = TRUE,   missing_to_zero = TRUE )  summary(mex_network_civ) ##   net num_actors    density num_edges prop_edges_missing mean_edge_weight ## 1   1         72 0.01643192        84                  0         0.458529 ##   sd_edge_weight median_edge_weight min_edge_weight max_edge_weight competition ## 1       8.631244                  0               0             377   0.1655174 ##   sd_of_actor_means transitivity ## 1           1.52567        0.168 # select 10 random indices from 1 to the length of select_names select_names <- rownames(mex_network)  set.seed(12345) random_indices <- sample(length(select_names), 10)  # select 10 random names using the random indices random_names <- select_names[random_indices]  plot(mex_network,      add_text = TRUE) plot(mex_network,      select_text = random_names,      select_text_display = random_names) ## Warning: Removed 62 rows containing missing values or values outside the scale range ## (`geom_text()`). # different edges, highlight same actors, different netify object: plot(mex_network_civ,      select_text = random_names,      select_text_display = random_names) ## Warning: Removed 38 rows containing missing values or values outside the scale range ## (`geom_text()`). i_opt_memb = function(x){   ig = prep_for_igraph(x)   memb = igraph::cluster_optimal(ig)$membership   return(memb)   }  # add to summary sum_mex <- summary_actor(   mex_network,    other_stats = list(i_opt_memb=i_opt_memb))"},{"path":"https://netify-dev.github.io/netify/articles/workshop_demo.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Netify Workshop","text":"Csárdi G, Nepusz T, Traag V, Horvát S, Zanini F, Noom D, Müller K (2024). igraph: Network Analysis Visualization R. doi:10.5281/zenodo.7682609, R package version 2.0.3, https://CRAN.R-project.org/package=igraph. Davies, Shawn, Therese Pettersson & Magnus Öberg (2023). Organized violence 1989-2022 return conflicts states?. Journal Peace Research 60(4). Handcock M, Hunter D, Butts C, Goodreau S, Krivitsky P, Morris M (2018). ergm: Fit, Simulate Diagnose Exponential-Family Models Networks. Statnet Project (http://www.statnet.org). R package version 3.9.4, https://CRAN.R-project.org/package=ergm. Hoff, Peter D. “Dyadic data analysis amen.” arXiv preprint arXiv:1506.08237 (2015). Högbladh Stina, 2023, “UCDP GED Codebook version 23.1”, Department Peace Conflict Research, Uppsala University Miller S (2022). “peacesciencer: R Package Quantitative Peace Science Research.” Conflict Management Peace Science, 39(6), 755–779. doi: 10.1177/07388942221077926. Statnet Development Team (Pavel N. Krivitsky, Mark S. Handcock, David R. Hunter, Carter T. Butts, Chad Klumb, Steven M. Goodreau, Martina Morris) (2003-2023). statnet: Software tools Statistical Modeling Network Data. URL http://statnet.org Sundberg, Ralph Erik Melander (2013) Introducing UCDP Georeferenced Event Dataset. Journal Peace Research 50(4).","code":""},{"path":"https://netify-dev.github.io/netify/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ha Eun Choi. Contributor. Cassy Dorff. Author. Colin Henry. Contributor. Shahryar Minhas. Author, maintainer.","code":""},{"path":"https://netify-dev.github.io/netify/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dorff C, Minhas S (2024). netify: network tools R. R package version 0.1.0, https://netify-dev.github.io/netify/.","code":"@Manual{,   title = {netify: network tools in R},   author = {Cassy Dorff and Shahryar Minhas},   year = {2024},   note = {R package version 0.1.0},   url = {https://netify-dev.github.io/netify/}, }"},{"path":[]},{"path":"https://netify-dev.github.io/netify/index.html","id":"overview-","dir":"","previous_headings":"","what":"Overview","title":"network tools in R","text":"Netify makes networks! supply data netify transforms easy work network data. goal netify provide R functions simplify facilitate common tasks related network creation, summary, visualization, modeling. Although package built social scientists (especially peace science scholars) mind, anyone can use !","code":""},{"path":"https://netify-dev.github.io/netify/index.html","id":"installation-via-devtools--github","dir":"","previous_headings":"","what":"Installation via devtools + github","title":"network tools in R","text":"","code":"# install devtools   if (!require(devtools)) {     install.packages(\"devtools\")   }   library(devtools)    install_github(\"netify-dev/netify\")"},{"path":"https://netify-dev.github.io/netify/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"network tools in R","text":"See workshop_demo vignette information. get started, supply dyadic data set (edgelist) netify. can add information nodal dyadic covariates, time, well specify weights edges network. example, generate longitudinal, directed weighted network use code :","code":"library(netify)   data(icews)    icews_conflict <- netify(     dyad_data=icews,     actor1='i', actor2='j',     time='year',     symmetric=FALSE, weight='matlConf')    icews_conflict"},{"path":"https://netify-dev.github.io/netify/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"network tools in R","text":"Cassy Dorff (Vanderbilt University) Shahryar Minhas (Michigan State University) co-PI’s collaborative NSF grant funding work, , acknowledge support National Science Foundation (NSF) Awards #2017162 #2017180. Additional contributors include Ha Eun Choi (Ph.D. Candidate, Michigan State University) Colin Henry (Ph.D. Candidate, Vanderbilt University). also thank Sophia Tannir (M.S. Data Science, Vanderbilt University) important feedback.","code":""},{"path":"https://netify-dev.github.io/netify/reference/actor_check.html","id":null,"dir":"Reference","previous_headings":"","what":"actor_check — actor_check","title":"actor_check — actor_check","text":"Checks make sure actor fields populated contain NAs non-character values","code":""},{"path":"https://netify-dev.github.io/netify/reference/actor_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"actor_check — actor_check","text":"","code":"actor_check(actor1, actor2, dyad_data)"},{"path":"https://netify-dev.github.io/netify/reference/actor_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"actor_check — actor_check","text":"actor1 user inputted object denoting actor1 variable data.frame actor2 user inputted object denoting actor2 variable data.frame dyad_data data.frame actor1 actor2 values located","code":""},{"path":"https://netify-dev.github.io/netify/reference/actor_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"actor_check — actor_check","text":"returns NULL object stops process error detected","code":""},{"path":"https://netify-dev.github.io/netify/reference/actor_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"actor_check — actor_check","text":"Ha Eun Choi, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/actor_pds_from_netlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive actor periods attribute from netlet — actor_pds_from_netlet","title":"Derive actor periods attribute from netlet — actor_pds_from_netlet","text":"Derive actor periods attribute netlet","code":""},{"path":"https://netify-dev.github.io/netify/reference/actor_pds_from_netlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive actor periods attribute from netlet — actor_pds_from_netlet","text":"","code":"actor_pds_from_netlet(netlet)"},{"path":"https://netify-dev.github.io/netify/reference/actor_pds_from_netlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive actor periods attribute from netlet — actor_pds_from_netlet","text":"netlet multilayer netlet object","code":""},{"path":"https://netify-dev.github.io/netify/reference/actor_pds_from_netlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive actor periods attribute from netlet — actor_pds_from_netlet","text":"data.frame formatted way actor_pds attribute","code":""},{"path":"https://netify-dev.github.io/netify/reference/actor_pds_from_netlet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Derive actor periods attribute from netlet — actor_pds_from_netlet","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/actor_pds_to_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"actor_pds_to_frame — actor_pds_to_frame","title":"actor_pds_to_frame — actor_pds_to_frame","text":"function converts actor_pds attribute netify objects data.frame unit observation level","code":""},{"path":"https://netify-dev.github.io/netify/reference/actor_pds_to_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"actor_pds_to_frame — actor_pds_to_frame","text":"","code":"actor_pds_to_frame(netlet_actor_pds)"},{"path":"https://netify-dev.github.io/netify/reference/actor_pds_to_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"actor_pds_to_frame — actor_pds_to_frame","text":"netlet_actor_pds actor pds attributes netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/actor_pds_to_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"actor_pds_to_frame — actor_pds_to_frame","text":"data.frame object actor pd info actor-time format","code":""},{"path":"https://netify-dev.github.io/netify/reference/actor_pds_to_frame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"actor_pds_to_frame — actor_pds_to_frame","text":"Colin Henry, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_dyad.html","id":null,"dir":"Reference","previous_headings":"","what":"Add dyad data to a netify object — add_dyad","title":"Add dyad data to a netify object — add_dyad","text":"add_dyad takes dataframe outputs netify object.","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_dyad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add dyad data to a netify object — add_dyad","text":"","code":"add_dyad(   netlet,   dyad_data,   actor1 = NULL,   actor2 = NULL,   time = NULL,   dyad_vars = NULL,   dyad_vars_symmetric = NULL,   replace_existing = FALSE )"},{"path":"https://netify-dev.github.io/netify/reference/add_dyad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add dyad data to a netify object — add_dyad","text":"netlet netify object dyad_data dataframe object actor1 character: actor 1 data actor2 character: actor 2 data time character object indicating variable dyad_data tracks time dyad_vars vector variables dyad_data merged dyad_vars_symmetric logical vector: whether ties symmetric, default TRUE replace_existing logical indicating whether replace existing nodal data","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_dyad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add dyad data to a netify object — add_dyad","text":"netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_dyad.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add dyad data to a netify object — add_dyad","text":"Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_dyad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add dyad data to a netify object — add_dyad","text":"","code":"data(icews)  # cross-sectional case icews_10 <- icews[icews$year==2010,]  verbCoop_net <- netify(   dyad_data=icews_10,   actor1 = 'i', actor2 = 'j',    symmetric=FALSE, weight='verbCoop' )  verbCoop_net <- add_dyad(   netlet=verbCoop_net,    dyad_data=icews_10,    actor1='i', actor2='j',    dyad_vars=c('matlCoop', 'verbConf', 'matlConf'),   dyad_vars_symmetric = rep(FALSE, 3) )  # dyadic data is stored in the dyad_data attribute # as an array, it can be accessed in the following way: dyad_array <- attr(verbCoop_net, 'dyad_data')[[1]] dim(dyad_array) #> [1] 152 152   3  # the dimensions of the array are: nr x nc x pd, where # nr is the number of row actors, nc is the number of column actors, # and pd is the number of dyadic variables  # longitudinal case verbCoop_longit_net <- netify(     dyad_data=icews,      actor1='i', actor2='j', time='year',     symmetric=FALSE,     weight='verbCoop' )  verbCoop_longit_net <- add_dyad(     netlet=verbCoop_longit_net,     dyad_data=icews,      actor1='i', actor2='j', time='year',     dyad_vars = c('matlCoop', 'verbConf', 'matlConf'),     dyad_vars_symmetric=rep(FALSE, 3) )  # dyadic data in the longit case is still stored in # the dyad_data attribute but now as a list of arrays,  # it can be accessed in the following way: dyad_array_list <- attr(verbCoop_longit_net, 'dyad_data') dim(dyad_array_list[['2002']]) #> [1] 152 152   3  # the names of the list elements correspond to the time # periods and each array within the list is of the same # dimensions as the array in the cross-sectional case"},{"path":"https://netify-dev.github.io/netify/reference/add_dyad_to_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"add_dyad_to_igraph — add_dyad_to_igraph","title":"add_dyad_to_igraph — add_dyad_to_igraph","text":"Add dyad attributes igraph object netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_dyad_to_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_dyad_to_igraph — add_dyad_to_igraph","text":"","code":"add_dyad_to_igraph(netlet, dyad_data_list, igraph_object, time = NULL)"},{"path":"https://netify-dev.github.io/netify/reference/add_dyad_to_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_dyad_to_igraph — add_dyad_to_igraph","text":"netlet netify object dyad_data_list dyad data netlet object igraph_object igraph object modify time time indicator longit case","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_dyad_to_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_dyad_to_igraph — add_dyad_to_igraph","text":"igraph object dyad attributes added","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_dyad_to_igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"add_dyad_to_igraph — add_dyad_to_igraph","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_dyad_to_statnet.html","id":null,"dir":"Reference","previous_headings":"","what":"add_dyad_to_statnet — add_dyad_to_statnet","title":"add_dyad_to_statnet — add_dyad_to_statnet","text":"Add dyad attributes network object netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_dyad_to_statnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_dyad_to_statnet — add_dyad_to_statnet","text":"","code":"add_dyad_to_statnet(netlet, dyad_data_list, statnet_object, time = NULL)"},{"path":"https://netify-dev.github.io/netify/reference/add_dyad_to_statnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_dyad_to_statnet — add_dyad_to_statnet","text":"netlet netify object dyad_data_list dyad data netlet object statnet_object network object modify time time indicator longit case","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_dyad_to_statnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_dyad_to_statnet — add_dyad_to_statnet","text":"statnet network object dyad attributes added","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_dyad_to_statnet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"add_dyad_to_statnet — add_dyad_to_statnet","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_nodal.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds nodal data to a netify object — add_nodal","title":"Adds nodal data to a netify object — add_nodal","text":"add_nodal takes dataframe outputs netify object.","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_nodal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds nodal data to a netify object — add_nodal","text":"","code":"add_nodal(   netlet,   node_data,   actor = NULL,   time = NULL,   node_vars = NULL,   replace_existing = FALSE )"},{"path":"https://netify-dev.github.io/netify/reference/add_nodal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds nodal data to a netify object — add_nodal","text":"netlet netify object node_data dataframe object actor character object indicating variable node_data uniquely IDs node time character object indicating variable node_data tracks time node_vars vector variables node_data merged replace_existing logical indicating whether replace existing nodal data","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_nodal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds nodal data to a netify object — add_nodal","text":"netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_nodal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds nodal data to a netify object — add_nodal","text":"Colin Henry, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_nodal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds nodal data to a netify object — add_nodal","text":"","code":"data(icews)  # cross-sectional case icews_10 <- icews[icews$year==2010,]   verbCoop_net <- netify(   dyad_data=icews_10,   actor1 = 'i', actor2 = 'j',    symmetric=FALSE, weight='verbCoop' )  # nodal data should be a dataframe with one row per actor # in the cross-sectional case and one row per actor per  # time period in the longitudinal case, e.g.: nvars = c(   'i_polity2',   'i_gdp', 'i_log_gdp',   'i_pop', 'i_log_pop' ) nodeData <- unique(icews_10[,c('i', nvars)]) head(nodeData) #>                 i i_polity2        i_gdp i_log_gdp    i_pop i_log_pop #> 10    Afghanistan        NA  16047892927  23.49884 28189672  17.15447 #> 2250      Albania         9  10420206418  23.06701  2913021  14.88470 #> 4490      Algeria         2 140977153156  25.67186 35856344  17.39503 #> 6730       Angola        -2  69938841426  24.97089 23364185  16.96671 #> 8970    Argentina         8 552738161802  27.03815 40788453  17.52391 #> 11210     Armenia         5   8513508876  22.86492  2946293  14.89606  verbCoop_net <- add_nodal(    netlet=verbCoop_net, node_data=nodeData,    actor='i', node_vars=nvars )  # nodal data is stored in the nodal_data attribute # as a data.frame, it can be accessed in the following way: node_data <- attr(verbCoop_net, 'nodal_data') head(node_data) #>         actor i_polity2        i_gdp i_log_gdp    i_pop i_log_pop #> 1 Afghanistan        NA  16047892927  23.49884 28189672  17.15447 #> 2     Albania         9  10420206418  23.06701  2913021  14.88470 #> 3     Algeria         2 140977153156  25.67186 35856344  17.39503 #> 4      Angola        -2  69938841426  24.97089 23364185  16.96671 #> 5   Argentina         8 552738161802  27.03815 40788453  17.52391 #> 6     Armenia         5   8513508876  22.86492  2946293  14.89606  # longitudinal case verbCoop_longit_net <- netify(     dyad_data=icews,      actor1='i', actor2='j', time='year',     symmetric=FALSE,     weight='verbCoop' )  nodeData <- unique(icews[,c('i', 'year', nvars)])  verbCoop_longit_net <- add_nodal(   netlet=verbCoop_longit_net,   node_data=nodeData,    actor='i', time='year',   node_vars = nvars )  # and in the longitudinal case, it can be accessed # in the same way node_data <- attr(verbCoop_longit_net, 'nodal_data') head(node_data) #>         actor time i_polity2       i_gdp i_log_gdp    i_pop i_log_pop #> 1 Afghanistan 2002        NA  7555185296  22.74550 21000256  16.86005 #> 2 Afghanistan 2003        NA  8222480251  22.83014 22645130  16.93546 #> 3 Afghanistan 2004        NA  8338755823  22.84418 23553551  16.97479 #> 4 Afghanistan 2005        NA  9275174321  22.95061 24411191  17.01055 #> 5 Afghanistan 2006        NA  9772082812  23.00280 25442944  17.05195 #> 6 Afghanistan 2007        NA 11123202208  23.13230 25903301  17.06988"},{"path":"https://netify-dev.github.io/netify/reference/add_nodal_to_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"add_nodal_to_igraph — add_nodal_to_igraph","title":"add_nodal_to_igraph — add_nodal_to_igraph","text":"Add nodal attributes igraph object netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_nodal_to_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_nodal_to_igraph — add_nodal_to_igraph","text":"","code":"add_nodal_to_igraph(netlet, node_data, igraph_object, time = NULL)"},{"path":"https://netify-dev.github.io/netify/reference/add_nodal_to_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_nodal_to_igraph — add_nodal_to_igraph","text":"netlet netify object node_data node data netlet object igraph_object igraph object modify time time indicator longit case","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_nodal_to_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_nodal_to_igraph — add_nodal_to_igraph","text":"igraph object nodal attributes added","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_nodal_to_igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"add_nodal_to_igraph — add_nodal_to_igraph","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_nodal_to_statnet.html","id":null,"dir":"Reference","previous_headings":"","what":"add_nodal_to_statnet — add_nodal_to_statnet","title":"add_nodal_to_statnet — add_nodal_to_statnet","text":"Add nodal attributes network object netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_nodal_to_statnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_nodal_to_statnet — add_nodal_to_statnet","text":"","code":"add_nodal_to_statnet(netlet, node_data, statnet_object, time = NULL)"},{"path":"https://netify-dev.github.io/netify/reference/add_nodal_to_statnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_nodal_to_statnet — add_nodal_to_statnet","text":"netlet netify object node_data node data netlet object statnet_object network object modify time time indicator longit case","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_nodal_to_statnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_nodal_to_statnet — add_nodal_to_statnet","text":"statnet network object nodal attributes added","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_nodal_to_statnet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"add_nodal_to_statnet — add_nodal_to_statnet","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_var_time_check.html","id":null,"dir":"Reference","previous_headings":"","what":"add_var_time_check — add_var_time_check","title":"add_var_time_check — add_var_time_check","text":"Stops process user tries add time non-longitudinal dataset vice versa","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_var_time_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add_var_time_check — add_var_time_check","text":"","code":"add_var_time_check(netlet, time)"},{"path":"https://netify-dev.github.io/netify/reference/add_var_time_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add_var_time_check — add_var_time_check","text":"netlet user inputted netlet object time user inputted time variable","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_var_time_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add_var_time_check — add_var_time_check","text":"returns NULL object stops process error detected","code":""},{"path":"https://netify-dev.github.io/netify/reference/add_var_time_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"add_var_time_check — add_var_time_check","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/adj_igraph_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"adj_igraph_positions — adj_igraph_positions","title":"adj_igraph_positions — adj_igraph_positions","text":"Match igraph edge order matrix data purpose setting edge attributes","code":""},{"path":"https://netify-dev.github.io/netify/reference/adj_igraph_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adj_igraph_positions — adj_igraph_positions","text":"","code":"adj_igraph_positions(adj_mat, igraph_object)"},{"path":"https://netify-dev.github.io/netify/reference/adj_igraph_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"adj_igraph_positions — adj_igraph_positions","text":"adj_mat adjacency matrix igraph_object igraph object modify","code":""},{"path":"https://netify-dev.github.io/netify/reference/adj_igraph_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"adj_igraph_positions — adj_igraph_positions","text":"matrix object actor positions match adj_mat igraph_object","code":""},{"path":"https://netify-dev.github.io/netify/reference/adj_igraph_positions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"adj_igraph_positions — adj_igraph_positions","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/adjust_plot_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Plotting Parameters and Data for Netify Visualization — adjust_plot_args","title":"Adjust Plotting Parameters and Data for Netify Visualization — adjust_plot_args","text":"function prepares plotting parameters data netify object visualization. sets defaults plotting parameters supplied user modifies node edge data frames based provided parameters attributes netify object.","code":""},{"path":"https://netify-dev.github.io/netify/reference/adjust_plot_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust Plotting Parameters and Data for Netify Visualization — adjust_plot_args","text":"","code":"adjust_plot_args(plot_args, net_dfs, obj_attrs)"},{"path":"https://netify-dev.github.io/netify/reference/adjust_plot_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust Plotting Parameters and Data for Netify Visualization — adjust_plot_args","text":"plot_args list user-defined plotting arguments may include options text overlap, edge curvature, edge angles, line segment parameters, labeling specific actors. net_dfs list containing nodal edge data frames returned decompose_netlet. nodal_data contain node information edge_data contain edge information. obj_attrs Attributes netify object, include details whether network symmetric, type (cross-sectional longitudinal), relevant properties.","code":""},{"path":"https://netify-dev.github.io/netify/reference/adjust_plot_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust Plotting Parameters and Data for Netify Visualization — adjust_plot_args","text":"list containing adjusted plot_args modified net_dfs ready plotting.","code":""},{"path":"https://netify-dev.github.io/netify/reference/adjust_plot_args.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust Plotting Parameters and Data for Netify Visualization — adjust_plot_args","text":"function checks sets default values various plot parameters : check_overlap: Whether check overlap text labels (default TRUE). curve_edges: Whether curve edges plot (default FALSE). edge_curvature: curvature edges (default 0.5). edge_angle: angle line segments (default 90 degrees). edge_ncp: Number control points edge curvature (default 5). edge_arrow: Default arrow type directed edges. also adjusts edge node data based whether network directed undirected, handles specific labeling actors transparency settings based edge weights.","code":""},{"path":"https://netify-dev.github.io/netify/reference/adjust_plot_args.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adjust Plotting Parameters and Data for Netify Visualization — adjust_plot_args","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/agg_across_units.html","id":null,"dir":"Reference","previous_headings":"","what":"agg_across_units — agg_across_units","title":"agg_across_units — agg_across_units","text":"Aggregate dyadic dataset","code":""},{"path":"https://netify-dev.github.io/netify/reference/agg_across_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"agg_across_units — agg_across_units","text":"","code":"agg_across_units(   dyad_data,   actor1,   actor2,   time = NULL,   weight,   symmetric,   ignore_missing = TRUE )"},{"path":"https://netify-dev.github.io/netify/reference/agg_across_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"agg_across_units — agg_across_units","text":"dyad_data user inputted data.frame object actor1 character: actor 1 data actor2 character: actor 2 data time character: time data weight character: weight variable data symmetric logical: adjacency matrix symmetric ignore_missing logical: missing values ignored","code":""},{"path":"https://netify-dev.github.io/netify/reference/agg_across_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"agg_across_units — agg_across_units","text":"aggregated data.frame object","code":""},{"path":"https://netify-dev.github.io/netify/reference/agg_across_units.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"agg_across_units — agg_across_units","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/array_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"array_to_list — array_to_list","title":"array_to_list — array_to_list","text":"function converts three dimensional array list matrices","code":""},{"path":"https://netify-dev.github.io/netify/reference/array_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"array_to_list — array_to_list","text":"","code":"array_to_list(arr, preserveAttr = TRUE)"},{"path":"https://netify-dev.github.io/netify/reference/array_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"array_to_list — array_to_list","text":"arr three dimensional array list preserveAttr logical indicating whether preserve attributes","code":""},{"path":"https://netify-dev.github.io/netify/reference/array_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"array_to_list — array_to_list","text":"list object","code":""},{"path":"https://netify-dev.github.io/netify/reference/array_to_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"array_to_list — array_to_list","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/char.html","id":null,"dir":"Reference","previous_headings":"","what":"char — char","title":"char — char","text":"Converts values characters","code":""},{"path":"https://netify-dev.github.io/netify/reference/char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"char — char","text":"","code":"char(x)"},{"path":"https://netify-dev.github.io/netify/reference/char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"char — char","text":"x vector","code":""},{"path":"https://netify-dev.github.io/netify/reference/char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"char — char","text":"character vector","code":""},{"path":"https://netify-dev.github.io/netify/reference/char.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"char — char","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/check_layer_compatible.html","id":null,"dir":"Reference","previous_headings":"","what":"Cycle through elements of a netlet object and make sure that they are identical before we try to merge into a multilayer netify object — check_layer_compatible","title":"Cycle through elements of a netlet object and make sure that they are identical before we try to merge into a multilayer netify object — check_layer_compatible","text":"Cycle elements netlet object make sure identical try merge multilayer netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/check_layer_compatible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cycle through elements of a netlet object and make sure that they are identical before we try to merge into a multilayer netify object — check_layer_compatible","text":"","code":"check_layer_compatible(a_list, elems, msg)"},{"path":"https://netify-dev.github.io/netify/reference/check_layer_compatible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cycle through elements of a netlet object and make sure that they are identical before we try to merge into a multilayer netify object — check_layer_compatible","text":"a_list list object check elems character vector names elements check msg character vector length two warning user elements found identical. First part vector preamble element name second part come element name.","code":""},{"path":"https://netify-dev.github.io/netify/reference/decompose_netlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Decompose a netify object into edges and nodal data frames — decompose_netlet","title":"Decompose a netify object into edges and nodal data frames — decompose_netlet","text":"decompose_netlet separates netify object constituent parts: data frame edges data frame nodal attributes. function particularly useful preparing network data analyses require separate edge node data sets.","code":""},{"path":"https://netify-dev.github.io/netify/reference/decompose_netlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decompose a netify object into edges and nodal data frames — decompose_netlet","text":"","code":"decompose_netlet(netlet, remove_zeros = TRUE)"},{"path":"https://netify-dev.github.io/netify/reference/decompose_netlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decompose a netify object into edges and nodal data frames — decompose_netlet","text":"netlet netify object decomposed. remove_zeros Logical. TRUE, remove edges zero values.","code":""},{"path":"https://netify-dev.github.io/netify/reference/decompose_netlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decompose a netify object into edges and nodal data frames — decompose_netlet","text":"list containing two elements: edge_data nodal_data. edge_data data frame edges attributes, nodal_data data frame containing node attributes.","code":""},{"path":"https://netify-dev.github.io/netify/reference/decompose_netlet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Decompose a netify object into edges and nodal data frames — decompose_netlet","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/decompose_netlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decompose a netify object into edges and nodal data frames — decompose_netlet","text":"","code":"# load icews data data(icews)  # choose attributes nvars = c( 'i_polity2', 'i_log_gdp', 'i_log_pop' ) dvars = c( 'matlCoop', 'verbConf', 'matlConf' )  # create a netify object netlet = netify(     dyad_data=icews, actor1='i', actor2='j',     time = 'year',     symmetric=FALSE, weight='verbCoop',     mode='unipartite', sum_dyads=FALSE,     actor_time_uniform=TRUE, actor_pds=NULL,     diag_to_NA=TRUE, missing_to_zero=TRUE,     nodal_vars = nvars,      dyad_vars = dvars )  # decompose the netify object decomposed = decompose_netlet( netlet )  lapply(decomposed, head) #> $edge_data #>          from      to time verbCoop matlCoop verbConf matlConf #> 1 Afghanistan Albania 2002        6        1        0        0 #> 2 Afghanistan Albania 2003        1        1        0        0 #> 3 Afghanistan Albania 2004       10        2        0        1 #> 4 Afghanistan Albania 2006        6        2        3       21 #> 5 Afghanistan Albania 2007        3        2        0        0 #> 6 Afghanistan Albania 2008        2        0        0        0 #>  #> $nodal_data #>          name time i_polity2 i_log_gdp i_log_pop #> 1 Afghanistan 2002        NA  22.74550  16.86005 #> 2 Afghanistan 2003        NA  22.83014  16.93546 #> 3 Afghanistan 2004        NA  22.84418  16.97479 #> 4 Afghanistan 2005        NA  22.95061  17.01055 #> 5 Afghanistan 2006        NA  23.00280  17.05195 #> 6 Afghanistan 2007        NA  23.13230  17.06988 #>"},{"path":"https://netify-dev.github.io/netify/reference/df_check.html","id":null,"dir":"Reference","previous_headings":"","what":"df_check — df_check","title":"df_check — df_check","text":"Checks make sure data.frame inputted tibble data.frame inputted converted base R data.frame object","code":""},{"path":"https://netify-dev.github.io/netify/reference/df_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"df_check — df_check","text":"","code":"df_check(df, msg = \"Error: check data type. `dyad_data` is not a dataframe.\")"},{"path":"https://netify-dev.github.io/netify/reference/df_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"df_check — df_check","text":"df user inputted object check msg msg user df check fails","code":""},{"path":"https://netify-dev.github.io/netify/reference/df_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"df_check — df_check","text":"data.frame object","code":""},{"path":"https://netify-dev.github.io/netify/reference/df_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"df_check — df_check","text":"Ha Eun Choi, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/edge_value_check.html","id":null,"dir":"Reference","previous_headings":"","what":"edge_value_check — edge_value_check","title":"edge_value_check — edge_value_check","text":"Warns user edge values adjacency matrices determined","code":""},{"path":"https://netify-dev.github.io/netify/reference/edge_value_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"edge_value_check — edge_value_check","text":"","code":"edge_value_check(weight, sum_dyads, time = FALSE)"},{"path":"https://netify-dev.github.io/netify/reference/edge_value_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"edge_value_check — edge_value_check","text":"weight user inputted weight value sum_dyads user inputted sum_dyads logical time logical indicating whether inputted data longitudinal","code":""},{"path":"https://netify-dev.github.io/netify/reference/edge_value_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"edge_value_check — edge_value_check","text":"returns NULL object provides warnings users","code":""},{"path":"https://netify-dev.github.io/netify/reference/edge_value_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"edge_value_check — edge_value_check","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/ego_netlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Ego Networks from a 'netify' Object — ego_netlet","title":"Create Ego Networks from a 'netify' Object — ego_netlet","text":"ego_netlet extracts ego networks given 'netify' object. ego network subgraph consisting focal node (ego) immediate neighbors (alters) context unweighted network. weighted networks, users can choose threshold define neighborhood ego. function returns list 'netify' objects, representing ego network. oders neighborhood greater 1, recommend ego function 'igraph' package.","code":""},{"path":"https://netify-dev.github.io/netify/reference/ego_netlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Ego Networks from a 'netify' Object — ego_netlet","text":"","code":"ego_netlet(   netlet,   ego,   threshold = NULL,   ngbd_direction = \"any\",   include_ego = TRUE )"},{"path":"https://netify-dev.github.io/netify/reference/ego_netlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Ego Networks from a 'netify' Object — ego_netlet","text":"netlet 'netify' object ego character vector specifying name(s) ego(s) create ego networks. threshold numeric value vector specifying threshold including alters ego network. threshold used define neighborhood ego weighted networks. vector provided, length correspond number time points, allowing different threshold applied time period. unweighted networks, default 0. weighted networks, default average edge weight. ngbd_direction directed networks users can provide character string specifying type relationship ego alters considered neighbors. Options neighborhood ego alters outgoing tie (\"\"), incoming tie (\"\"), tie (\"\"). Default \"\". include_ego Logical; TRUE, ego node included ego network. Default TRUE.","code":""},{"path":"https://netify-dev.github.io/netify/reference/ego_netlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Ego Networks from a 'netify' Object — ego_netlet","text":"list 'netify' objects, representing ego network.","code":""},{"path":"https://netify-dev.github.io/netify/reference/ego_netlet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create Ego Networks from a 'netify' Object — ego_netlet","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/gen_symm_id.html","id":null,"dir":"Reference","previous_headings":"","what":"gen_symm_id — gen_symm_id","title":"gen_symm_id — gen_symm_id","text":"function creates symmetric id given pair actors","code":""},{"path":"https://netify-dev.github.io/netify/reference/gen_symm_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gen_symm_id — gen_symm_id","text":"","code":"gen_symm_id(dyad_data, actor1, actor2, time = NULL)"},{"path":"https://netify-dev.github.io/netify/reference/gen_symm_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gen_symm_id — gen_symm_id","text":"dyad_data dyadic data.frame object actor1 name actor1 column actor2 name actor2 column time name time column relevant","code":""},{"path":"https://netify-dev.github.io/netify/reference/gen_symm_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gen_symm_id — gen_symm_id","text":"vector symmetric ids can added back data.frame object","code":""},{"path":"https://netify-dev.github.io/netify/reference/gen_symm_id.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gen_symm_id — gen_symm_id","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_actor_time_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a dataframe indicating start and end time point — get_actor_time_info","title":"Creates a dataframe indicating start and end time point — get_actor_time_info","text":"get_actor_time_info takes longitudinal dyadic dataset computes actors entered exited network. Entering determined first period actor interaction exiting last period.","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_actor_time_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a dataframe indicating start and end time point — get_actor_time_info","text":"","code":"get_actor_time_info(dyad_data, actor1, actor2, time)"},{"path":"https://netify-dev.github.io/netify/reference/get_actor_time_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a dataframe indicating start and end time point — get_actor_time_info","text":"dyad_data dyadic dataframe actor1 character: actor 1 data actor2 character: actor 2 data time character: time data","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_actor_time_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a dataframe indicating start and end time point — get_actor_time_info","text":"dataframe three columns: actor column indicating actors data min_time column indicating first time point actor considered part network max_time column indicating last time point actor considered part network","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_actor_time_info.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a dataframe indicating start and end time point — get_actor_time_info","text":"Shahryar Minhas, Ha Eun Choi","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_actor_time_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a dataframe indicating start and end time point — get_actor_time_info","text":"","code":"if (FALSE) { # \\dontrun{ library(peacesciencer) library(dplyr)  cow_dyads <- create_dyadyears(   subset_years = c(1980:2001)   ) %>%   # add mids   add_cow_mids()  actor_time <- get_actor_time_info(   dyad_data = cow_dyads,    actor1 = 'ccode1',    actor2 = 'ccode2',    time = 'year' ) } # }"},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a dyadic data into a network in various formats — get_adjacency","title":"Converts a dyadic data into a network in various formats — get_adjacency","text":"get_adjacency takes dyadic dataset outputs adjacency matrix representation.","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a dyadic data into a network in various formats — get_adjacency","text":"","code":"get_adjacency(   dyad_data,   actor1 = NULL,   actor2 = NULL,   symmetric = TRUE,   mode = \"unipartite\",   weight = NULL,   sum_dyads = FALSE,   diag_to_NA = TRUE,   missing_to_zero = TRUE )"},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a dyadic data into a network in various formats — get_adjacency","text":"dyad_data dyadic dataframe (tibble) actor1 character: name actor 1 dyad_data actor2 character: name actor 2 dyad_data symmetric logical: whether ties symmetric, default TRUE mode character: whether network unipartite bipartite, default unipartite weight character: name weighted edges variable, default NULL sum_dyads logical: whether sum weight value exists repeating dyads within dataset diag_to_NA logical: whether diagonals set NA, default TRUE missing_to_zero logical: whether missing values set zero, default TRUE","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a dyadic data into a network in various formats — get_adjacency","text":"adjacency matrix class netify","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converts a dyadic data into a network in various formats — get_adjacency","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts a dyadic data into a network in various formats — get_adjacency","text":"","code":"# load example directed event data from ICEWS # this data comes in the form of a dyadic # dataframe where all dyad pairs are listed data(icews)  # subset to a particular year icews <- icews[icews$year=='2010', ]  # generate a cross sectional, directed, and weighted network # where the weights are verbCoop icews_verbCoop <- get_adjacency(   dyad_data=icews, actor1='i', actor2='j',   symmetric=FALSE, weight='verbCoop' ) # generate a cross sectional, directed and weighted network # where the weights are matlConf icews_matlConf <- get_adjacency(   dyad_data=icews, actor1='i', actor2='j',   symmetric=FALSE, weight='matlConf' )  # another example using cow data # gathered from the peacesciencer package library(peacesciencer) #> {peacesciencer} includes additional remote data for separate download. Please type ?download_extdata() for more information. #> This message disappears on load when these data are downloaded and in the package's `extdata` directory. library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # create dyadic data set over time cow_dyads <- create_dyadyears(      subset_years = c(1992:2014)     ) %>%     # add mids     add_cow_mids() #> Joining with `by = join_by(ccode1, ccode2, year)` #> Joining with `by = join_by(ccode1, ccode2, year)` #> add_cow_mids() IMPORTANT MESSAGE: By default, this function whittles dispute-year data into dyad-year data by first selecting on unique onsets. Thereafter, where duplicates remain, it whittles dispute-year data into dyad-year data in the following order: 1) retaining highest `fatality`, 2) retaining highest `hostlev`, 3) retaining highest estimated `mindur`, 4) retaining highest estimated `maxdur`, 5) retaining reciprocated over non-reciprocated observations, 6) retaining the observation with the lowest start month, and, where duplicates still remained (and they don't), 7) forcibly dropping all duplicates for observations that are otherwise very similar. #> See: http://svmiller.com/peacesciencer/articles/coerce-dispute-year-dyad-year.html  # the cross-sections refer to the number of  # conflict onsets between dyads during # the time period of the data  mid_network <- netify(   cow_dyads,   actor1='ccode1', actor2='ccode2',   weight='cowmidonset',    sum_dyads=TRUE, symmetric=TRUE,   diag_to_NA=TRUE, missing_to_zero=TRUE) #> ! Warning: Converting `actor1` and/or `actor2` to character vector(s). mid_network  #> ✔ Hello, you have created network data, yay! #> • Unipartite #> • Symmetric #> • Sum of Weights from `cowmidonset` #> • Cross-Sectional #> • # Unique Actors: 196 #> Network Summary Statistics: #>              dens miss  mean trans #> cowmidonset 0.018    0 0.095 0.139 #> • Nodal Features: None #> • Dyad Features: None  # now lets say that we just want to  # see whether any conflict onset # occurred between a dyad during  # this period and generate # a network object that represents this  # to generate this we need to first subset # the raw data into an edge list like format # this only involves subsetting the variable # that you are using to represent edges to be # a value above zero cow_dyad_conflict_onset <- cow_dyads %>%     filter(         cowmidonset > 0     )  # then we use the netify function and  # we no longer supply a weight, since the # dyads themselves are giving information about # edges that occurred and in addition we leave # sum_dyads as FALSE any_mid_network <- netify(   cow_dyad_conflict_onset,   actor1='ccode1', actor2='ccode2',   sum_dyads=FALSE, symmetric=TRUE,   diag_to_NA=TRUE, missing_to_zero=TRUE) #> ! Warning: Converting `actor1` and/or `actor2` to character vector(s). #> ! Warning: there are repeating dyads within time periods in the dataset. When `weight` is not supplied and `sum_dyads` is set to FALSE, edges in the outputted adjacency matrix will represent binary interactions between actors. mid_network #> ✔ Hello, you have created network data, yay! #> • Unipartite #> • Symmetric #> • Sum of Weights from `cowmidonset` #> • Cross-Sectional #> • # Unique Actors: 196 #> Network Summary Statistics: #>              dens miss  mean trans #> cowmidonset 0.018    0 0.095 0.139 #> • Nodal Features: None #> • Dyad Features: None"},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Longitudinal variants of get_adjacency() which returns a three-dimensional array — get_adjacency_array","title":"Longitudinal variants of get_adjacency() which returns a three-dimensional array — get_adjacency_array","text":"get_adjacency_array takes dyadic dataset outputs three-dimensional array first two dimensions corresponding actors third dimension corresponding time. function used actor composition remains constant throughout time.","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Longitudinal variants of get_adjacency() which returns a three-dimensional array — get_adjacency_array","text":"","code":"get_adjacency_array(   dyad_data,   actor1 = NULL,   actor2 = NULL,   time = NULL,   symmetric = TRUE,   mode = \"unipartite\",   weight = NULL,   sum_dyads = FALSE,   diag_to_NA = TRUE,   missing_to_zero = TRUE )"},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Longitudinal variants of get_adjacency() which returns a three-dimensional array — get_adjacency_array","text":"dyad_data dyadic dataframe (tibble) actor1 character: name actor 1 variable dyad_data actor2 character: name actor 2 variable dyad_data time character: name time variable dyad_data, values time variable numeric symmetric logical: whether ties symmetric, default TRUE mode character: whether network unipartite bipartite, default unipartite weight character: name weighted edges variable, default NULL sum_dyads logical: whether sum weight value exists repeating dyads diag_to_NA logical: whether diagonals set NA, default TRUE missing_to_zero logical: whether missing values set zero, default TRUE","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Longitudinal variants of get_adjacency() which returns a three-dimensional array — get_adjacency_array","text":"array class netify","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency_array.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Longitudinal variants of get_adjacency() which returns a three-dimensional array — get_adjacency_array","text":"Cassy Dorff, Ha Eun Choi, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Longitudinal variants of get_adjacency() which returns a three-dimensional array — get_adjacency_array","text":"","code":"# load example directed event data from ICEWS # this data comes in the form of a dyadic # dataframe where all dyad pairs are listed data(icews)  # generate a longitudinal, directed and weighted network # where the weights are matlConf icews_matlConf <- get_adjacency_array(   dyad_data=icews,    actor1='i', actor2='j', time='year',   symmetric=FALSE, weight='matlConf' )"},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Longitudinal variants of get_adjacency() which returns a list of adjacency matrices — get_adjacency_list","title":"Longitudinal variants of get_adjacency() which returns a list of adjacency matrices — get_adjacency_list","text":"function takes dyadic dataset outputs list adjacency matrices actor composition network can vary time.","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Longitudinal variants of get_adjacency() which returns a list of adjacency matrices — get_adjacency_list","text":"","code":"get_adjacency_list(   dyad_data,   actor1 = NULL,   actor2 = NULL,   time = NULL,   symmetric = TRUE,   mode = \"unipartite\",   weight = NULL,   sum_dyads = FALSE,   actor_time_uniform = FALSE,   actor_pds = NULL,   diag_to_NA = TRUE,   missing_to_zero = TRUE )"},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Longitudinal variants of get_adjacency() which returns a list of adjacency matrices — get_adjacency_list","text":"dyad_data dyadic dataframe (tibble) actor1 character: name actor 1 variable dyad_data actor2 character: name actor 2 variable dyad_data time character: name time variable dyad_data, values time variable numeric symmetric logical: whether ties symmetric, default TRUE mode character: whether network unipartite bipartite, default unipartite weight character: name weighted edges variable, default NULL sum_dyads logical: whether sum weight value exists repeating dyads within time periods actor_time_uniform logical: whether assume actors across full time series observed data TRUE means actors across full time series observed data FALSE means actors come observed data \"existence\" determined data, meaning first year existence determined time point first event last year existence time point last event actor_pds data.frame indicating start end time point every actor, can created manually (see example) using get_actor_time_info.R, provided choice actor_time_uniform irrelevant. diag_to_NA logical: whether diagonals set NA, default TRUE missing_to_zero logical: whether missing values set zero, default TRUE","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Longitudinal variants of get_adjacency() which returns a list of adjacency matrices — get_adjacency_list","text":"list adjacency matrices class netify","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Longitudinal variants of get_adjacency() which returns a list of adjacency matrices — get_adjacency_list","text":"Cassy Dorff, Ha Eun Choi, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_adjacency_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Longitudinal variants of get_adjacency() which returns a list of adjacency matrices — get_adjacency_list","text":"","code":"# load example directed event data from ICEWS # this data comes in the form of a dyadic # dataframe where all dyad pairs are listed data(icews)  # generate a longitudinal, directed, and weighted network # where the weights are verbConf # note that in longitudinal networks we can have all the  # same actors in every year and if that's the case # we set actor_time_uniform to TRUE, in the next # example we'll show how to adjust when actors # change over time icews_verbConf <- get_adjacency_list(   dyad_data=icews,    actor1='i', actor2='j', time='year',   actor_time_uniform=TRUE,   symmetric=FALSE, weight='verbConf' ) icews_verbConf #> ✔ Hello, you have created network data, yay! #> • Unipartite #> • Asymmetric #> • Weights from `verbConf` #> • Longitudinal: 13 Periods #> • # Unique Actors: 152 #> Network Summary Statistics (averaged across time): #>           dens miss mean recip trans #> verbConf 0.111    0  1.5 0.831 0.374 #> • Nodal Features: None #> • Dyad Features: None  # another example using cow data # gathered from the peacesciencer package library(peacesciencer) library(dplyr)  # create dyadic data set over time (NGOs) cow_dyads <- create_dyadyears(      subset_years = c(1980:2001)     ) %>%     # add mids     add_cow_mids() #> Joining with `by = join_by(ccode1, ccode2, year)` #> Joining with `by = join_by(ccode1, ccode2, year)` #> add_cow_mids() IMPORTANT MESSAGE: By default, this function whittles dispute-year data into dyad-year data by first selecting on unique onsets. Thereafter, where duplicates remain, it whittles dispute-year data into dyad-year data in the following order: 1) retaining highest `fatality`, 2) retaining highest `hostlev`, 3) retaining highest estimated `mindur`, 4) retaining highest estimated `maxdur`, 5) retaining reciprocated over non-reciprocated observations, 6) retaining the observation with the lowest start month, and, where duplicates still remained (and they don't), 7) forcibly dropping all duplicates for observations that are otherwise very similar. #> See: http://svmiller.com/peacesciencer/articles/coerce-dispute-year-dyad-year.html  # now lets create a network object in which # we generate list of networks in which the # cross-sections represent mid onset # additionally note that the raw data involves # country years in which we saw countries go in # and out of existence so we set actor_time_uniform # to FALSE mid_network <- netify(   cow_dyads,   actor1='ccode1', actor2='ccode2', time='year',   weight='cowmidonset',    actor_time_uniform=FALSE,   sum_dyads=FALSE, symmetric=TRUE,   diag_to_NA=TRUE, missing_to_zero=TRUE) #> ! Warning: Converting `actor1` and/or `actor2` to character vector(s). mid_network #> ✔ Hello, you have created network data, yay! #> • Unipartite #> • Symmetric #> • Weights from `cowmidonset` #> • Longitudinal: 22 Periods #> • # Unique Actors: 196 #> Network Summary Statistics (averaged across time): #>              dens miss trans #> cowmidonset 0.003    0  0.03 #> • Nodal Features: None #> • Dyad Features: None  # you can also supply your own set of actors # with custom start and end years using the # actor_pds argument, to use this first you  # need to create a data.frame with information # about actor composition as follows actor_comp <- data.frame(     actor = c(2, 365, 220, 710),     min_time = c(1980, 1980, 1991, 1980),     max_time = c(2001, 2001, 2001, 2001) )  # now pass this actor_comp object to the  # actor_pds argument mid_network_subset <- netify(   cow_dyads,   actor1='ccode1', actor2='ccode2', time='year',   weight='cowmidonset',    actor_pds=actor_comp,   sum_dyads=FALSE, symmetric=TRUE,   diag_to_NA=TRUE, missing_to_zero=TRUE) #> ! Warning: Converting `actor1` and/or `actor2` to character vector(s). mid_network_subset #> ✔ Hello, you have created network data, yay! #> • Unipartite #> • Symmetric #> • Weights from `cowmidonset` #> • Longitudinal: 3 Periods #> • # Unique Actors: 4 #> Network Summary Statistics (averaged across time): #>              dens miss trans #> cowmidonset 0.278    0     0 #> • Nodal Features: None #> • Dyad Features: None"},{"path":"https://netify-dev.github.io/netify/reference/get_attribs.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for layer_netlet to extract attributes from listed netlet objects — get_attribs","title":"Helper function for layer_netlet to extract attributes from listed netlet objects — get_attribs","text":"Helper function layer_netlet extract attributes listed netlet objects","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_attribs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for layer_netlet to extract attributes from listed netlet objects — get_attribs","text":"","code":"get_attribs(a_list, attrib, list_format = FALSE, get_unique = FALSE)"},{"path":"https://netify-dev.github.io/netify/reference/get_attribs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for layer_netlet to extract attributes from listed netlet objects — get_attribs","text":"a_list named list object attrib character string attribute extract list_format logical, TRUE return list attributes get_unique logical, TRUE return unique values attribute","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_attribs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for layer_netlet to extract attributes from listed netlet objects — get_attribs","text":"attribute values","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_edge_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate edge layout for netify object — get_edge_layout","title":"Generate edge layout for netify object — get_edge_layout","text":"function prepares edge data visualization calculating coordinates line segments representing edges based node layouts provided get_node_layout. specifically tailored use netify objects corresponding layout data.","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_edge_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate edge layout for netify object — get_edge_layout","text":"","code":"get_edge_layout(netlet, nodes_layout)"},{"path":"https://netify-dev.github.io/netify/reference/get_edge_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate edge layout for netify object — get_edge_layout","text":"netlet netify object used derive graph edges. nodes_layout matrix list matrices representing node layouts visualization. matrix include following columns: - actor: character string identifying node. - x: Numeric, x-coordinate node layout. - y: Numeric, y-coordinate node layout. longitudinal studies, nodes list element matrix corresponding specific time point, named respective year time label (e.g., '2008', '2009'). matrix must maintain consistent structure naming conventions time points.","code":"Example structure for `nodes`:          ```          $`2008`          actor          x             y          Afghanistan  0.5852844  0.4633507          Albania      0.0976207  0.8473642          ...           $`2009`          actor          x             y          Afghanistan -0.7392849  0.5709252          Albania     -1.1160445  1.0141463          ...          ```          Each matrix uses the `actor` names for row identification."},{"path":"https://netify-dev.github.io/netify/reference/get_edge_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate edge layout for netify object — get_edge_layout","text":"matrix edge layout information list start end coordinates ('x1', 'y1' '' node 'x2', 'y2' '' node).","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_edge_layout.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate edge layout for netify object — get_edge_layout","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"This function fills in an adjacency matrix based on actors and data — get_matrix","title":"This function fills in an adjacency matrix based on actors and data — get_matrix","text":"function fills adjacency matrix based actors data","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function fills in an adjacency matrix based on actors and data — get_matrix","text":"","code":"get_matrix(   n_rows,   n_cols,   actors_rows,   actors_cols,   matRowIndices,   matColIndices,   value,   symmetric )"},{"path":"https://netify-dev.github.io/netify/reference/get_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function fills in an adjacency matrix based on actors and data — get_matrix","text":"n_rows integer specifying number row actors n_cols integer specifying number column actors actors_rows character vector row actors actors_cols character vector column actors matRowIndices numeric vector indicating positions senders data matColIndices numeric vector indicating positions receivers data value numeric vector values fill cross-sections adjacency matrices symmetric logical indicating whether ties symmetric","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function fills in an adjacency matrix based on actors and data — get_matrix","text":"adjacency matrix","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This function fills in an adjacency matrix based on actors and data — get_matrix","text":"Shahryar Minhas, Ha Eun Choi","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_ngbd_net_for_ego.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Neighborhood Network for Ego — get_ngbd_net_for_ego","title":"Get Neighborhood Network for Ego — get_ngbd_net_for_ego","text":"get_ngbd_net_for_ego extracts neighborhood network specified ego given list raw networks. allows user define neighborhood based outgoing, incoming, relationship, includes threshold weighted networks.","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_ngbd_net_for_ego.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Neighborhood Network for Ego — get_ngbd_net_for_ego","text":"","code":"get_ngbd_net_for_ego(   raw_net,   ego,   threshold,   include_ego = TRUE,   ngbd_direction = \"any\" )"},{"path":"https://netify-dev.github.io/netify/reference/get_ngbd_net_for_ego.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Neighborhood Network for Ego — get_ngbd_net_for_ego","text":"raw_net list raw network matrices. ego character vector specifying name ego create neighborhood network. threshold numeric vector specifying threshold including alters neighborhood network. Default unweighted networks 0 default weighted networks average edge weight. include_ego Logical; TRUE, ego node included neighborhood network. Default TRUE. ngbd_direction character string specifying type relationship consider directed networks. Options \"\" outgoing ties, \"\" incoming ties, \"\" relationship. Default \"\".","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_ngbd_net_for_ego.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Neighborhood Network for Ego — get_ngbd_net_for_ego","text":"list neighborhood networks, represented matrix.","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_ngbd_net_for_ego.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Neighborhood Network for Ego — get_ngbd_net_for_ego","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_node_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate node layout positions for a netify object — get_node_layout","title":"Calculate node layout positions for a netify object — get_node_layout","text":"function converts netify object igraph object compute layout positions using various igraph layout algorithms. supports cross-sectional longitudinal data, option static positioning actors.","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_node_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate node layout positions for a netify object — get_node_layout","text":"","code":"get_node_layout(   netlet,   layout = NULL,   static_actor_positions = FALSE,   which_static = NULL,   seed = 6886 )"},{"path":"https://netify-dev.github.io/netify/reference/get_node_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate node layout positions for a netify object — get_node_layout","text":"netlet netify object used layout computation. layout character string specifying layout algorithm igraph used. NULL object mode 'bipartite', 'bipartite' layout used; otherwise, 'nicely' used default. static_actor_positions Logical indicating whether use static positions actors. Useful longitudinal studies node positions remain consistent time. TRUE, layout default calculated based collapsed adjacency matrix across time points. Users can also specify specific time point use static layout setting which_static desired time point. which_static Integer indicating time point's layout used static layout. seed Integer specifying seed random number generation.","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_node_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate node layout positions for a netify object — get_node_layout","text":"list containing two elements: nodes edges. list data frames representing nodes edges time point netify object. node data frame contains columns node indices, actor names, x, y coordinates. edge data frame includes node names, along start end coordinates drawing edges.","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_node_layout.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate node layout positions for a netify object — get_node_layout","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"get_raw — get_raw","title":"get_raw — get_raw","text":"function serves wrapper raw_matrix raw_list, serve strip netify related attributes lists matrix obejcts","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_raw — get_raw","text":"","code":"get_raw(netlet)"},{"path":"https://netify-dev.github.io/netify/reference/get_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_raw — get_raw","text":"netlet netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_raw — get_raw","text":"list matrix object netify attributes stripped","code":""},{"path":"https://netify-dev.github.io/netify/reference/get_raw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"get_raw — get_raw","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/gg_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare graphical parameters for ggplot2 based on specified plot arguments. — gg_params","title":"Prepare graphical parameters for ggplot2 based on specified plot arguments. — gg_params","text":"function organizes formats static variable-dependent aesthetic parameters nodes, text labels, edges used ggplot2 visualizations. adjusts parameters based existence non-null status corresponding entries plot_args.","code":""},{"path":"https://netify-dev.github.io/netify/reference/gg_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare graphical parameters for ggplot2 based on specified plot arguments. — gg_params","text":"","code":"gg_params(plot_args)"},{"path":"https://netify-dev.github.io/netify/reference/gg_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare graphical parameters for ggplot2 based on specified plot arguments. — gg_params","text":"plot_args list containing user-defined specifications various graphical parameters color, size, alpha, others different components plot.","code":""},{"path":"https://netify-dev.github.io/netify/reference/gg_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare graphical parameters for ggplot2 based on specified plot arguments. — gg_params","text":"list containing organized graphical parameters nodes, text, labels, edges. component sub-lists static parameters variable parameters.","code":""},{"path":"https://netify-dev.github.io/netify/reference/gg_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare graphical parameters for ggplot2 based on specified plot arguments. — gg_params","text":"function splits graphical parameters static dynamic (variable-dependent) categories. Static parameters directly applied corresponding variable-dependent parameter set. variable-dependent parameter set, static parameter excluded allow dynamic mapping ggplot. Dynamic variable-dependent parameters set based mapping data columns specified plot_args. function checks non-null entries plot_args assigns appropriate aesthetic entry exists. example, plot_args$point_color_var null, create dynamic color mapping nodes remove static color setting.","code":""},{"path":"https://netify-dev.github.io/netify/reference/gg_params.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prepare graphical parameters for ggplot2 based on specified plot arguments. — gg_params","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/icews.html","id":null,"dir":"Reference","previous_headings":"","what":"Event data slice from ICEWS — icews","title":"Event data slice from ICEWS — icews","text":"Event data ICEWS select countries 2002 2014, additional nodal variables World Bank Polity IV.","code":""},{"path":"https://netify-dev.github.io/netify/reference/icews.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event data slice from ICEWS — icews","text":"","code":"data(icews)"},{"path":"https://netify-dev.github.io/netify/reference/icews.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Event data slice from ICEWS — icews","text":"icews","code":""},{"path":"https://netify-dev.github.io/netify/reference/icews.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Event data slice from ICEWS — icews","text":"add icews reference (icews)","code":""},{"path":"https://netify-dev.github.io/netify/reference/icews.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Event data slice from ICEWS — icews","text":"","code":"data(icews) icews[1:3,] #>             i       j year                       id verbCoop matlCoop verbConf #> 2 Afghanistan Albania 2002 AFGHANISTAN_ALBANIA_2002        6        1        0 #> 3 Afghanistan Albania 2003 AFGHANISTAN_ALBANIA_2003        1        1        0 #> 4 Afghanistan Albania 2004 AFGHANISTAN_ALBANIA_2004       10        2        0 #>   matlConf           i_year       j_year i_polity2 j_polity2 i_iso3c j_iso3c #> 2        0 AFGHANISTAN_2002 ALBANIA_2002        NA         7     AFG     ALB #> 3        0 AFGHANISTAN_2003 ALBANIA_2003        NA         7     AFG     ALB #> 4        1 AFGHANISTAN_2004 ALBANIA_2004        NA         7     AFG     ALB #>     i_region              j_region      i_gdp      j_gdp i_log_gdp j_log_gdp #> 2 South Asia Europe & Central Asia 7555185296 6857137321  22.74550  22.64856 #> 3 South Asia Europe & Central Asia 8222480251 7236243584  22.83014  22.70237 #> 4 South Asia Europe & Central Asia 8338755823 7635298387  22.84418  22.75605 #>      i_pop   j_pop i_log_pop j_log_pop #> 2 21000256 3051010  16.86005  14.93098 #> 3 22645130 3039616  16.93546  14.92724 #> 4 23553551 3026939  16.97479  14.92306"},{"path":"https://netify-dev.github.io/netify/reference/identical_recursive.html","id":null,"dir":"Reference","previous_headings":"","what":"identical_recursive — identical_recursive","title":"identical_recursive — identical_recursive","text":"Recursively check two objects identical","code":""},{"path":"https://netify-dev.github.io/netify/reference/identical_recursive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"identical_recursive — identical_recursive","text":"","code":"identical_recursive(...)"},{"path":"https://netify-dev.github.io/netify/reference/identical_recursive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"identical_recursive — identical_recursive","text":"... objects check","code":""},{"path":"https://netify-dev.github.io/netify/reference/identical_recursive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"identical_recursive — identical_recursive","text":"logical indicating whether objects identical","code":""},{"path":"https://netify-dev.github.io/netify/reference/identical_recursive.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"identical_recursive — identical_recursive","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/is_netify.html","id":null,"dir":"Reference","previous_headings":"","what":"Is this object a netify object? — is_netify","title":"Is this object a netify object? — is_netify","text":"object netify object?","code":""},{"path":"https://netify-dev.github.io/netify/reference/is_netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is this object a netify object? — is_netify","text":"","code":"is_netify(x)"},{"path":"https://netify-dev.github.io/netify/reference/is_netify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is this object a netify object? — is_netify","text":"x R object","code":""},{"path":"https://netify-dev.github.io/netify/reference/is_netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is this object a netify object? — is_netify","text":"Logical constant, TRUE argument object netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/is_netify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Is this object a netify object? — is_netify","text":"Colin Henry","code":""},{"path":"https://netify-dev.github.io/netify/reference/layer_netlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer netify objects together to create a multilayer network — layer_netlet","title":"Layer netify objects together to create a multilayer network — layer_netlet","text":"layer_netlet takes two netify objects layers together create multilayer network","code":""},{"path":"https://netify-dev.github.io/netify/reference/layer_netlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer netify objects together to create a multilayer network — layer_netlet","text":"","code":"layer_netlet(netlet_list, layer_labels = NULL)"},{"path":"https://netify-dev.github.io/netify/reference/layer_netlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer netify objects together to create a multilayer network — layer_netlet","text":"netlet_list list netifty objects want layer together layer_labels character: label layer netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/layer_netlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer netify objects together to create a multilayer network — layer_netlet","text":"multilayer network class netify","code":""},{"path":"https://netify-dev.github.io/netify/reference/layer_netlet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Layer netify objects together to create a multilayer network — layer_netlet","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/layer_netlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer netify objects together to create a multilayer network — layer_netlet","text":"","code":"# cross-sectional example data(icews) icews_10 <- icews[icews$year==2010,]  # generate netify objects that will be layered together icews_verbCoop <- netify(     dyad_data=icews_10, actor1='i', actor2='j',     symmetric=FALSE, weight='verbCoop',     nodal_vars=c('i_log_gdp', 'i_log_pop'),     dyad_vars=c('verbConf') )  icews_matlCoop <- netify(     dyad_data=icews_10, actor1='i', actor2='j',     symmetric=FALSE, weight='matlCoop',     nodal_vars='i_polity2',     dyad_vars=c('matlConf') )  # layer together cross-sec netify objects together icews_verbCoop_matlCoop <- layer_netlet(     netlet_list=list(icews_verbCoop, icews_matlCoop),     layer_labels=c('verbCoop', 'matlCoop') )  # dimensions of the multilayer network from the # cross-sectional case will be a  # (number of actors) x (number of actors) x (number of layers) dim(get_raw(icews_verbCoop_matlCoop)) #> [1] 152 152   2  # longitudinal array example icews_verbCoop_longit_a <- netify(     dyad_data=icews, actor1='i', actor2='j', time='year',     symmetric=FALSE, weight='verbCoop',     nodal_vars=c('i_log_gdp', 'i_log_pop'),     dyad_vars=c('verbConf'),     output_format='longit_array' ) icews_matlCoop_longit_a <- netify(     dyad_data=icews, actor1='i', actor2='j', time='year',     symmetric=FALSE, weight='matlCoop',     nodal_vars=c('i_polity2'),     dyad_vars=c('matlConf'),     output_format='longit_array' )  # layer together icews_verbCoop_matlCoop_longit_a <- layer_netlet(     netlet_list=list(icews_verbCoop_longit_a, icews_matlCoop_longit_a),     layer_labels=c('verbCoop', 'matlCoop') )  # dimensions of the multilayer network from the # longitudinal array case will be a  # (number of actors) x (number of actors) x (number of layers) x  # (number of time periods) dim(get_raw(icews_verbCoop_matlCoop_longit_a))  #> [1] 152 152   2  13  # longitudinal list example # generate similar longitudinal list versions icews_verbCoop_longit_l <- netify(     dyad_data=icews, actor1='i', actor2='j', time='year',     symmetric=FALSE, weight='verbCoop',     nodal_vars=c('i_log_gdp', 'i_log_pop'),     dyad_vars=c('verbConf') ) icews_matlCoop_longit_l <- netify(     dyad_data=icews, actor1='i', actor2='j', time='year',     symmetric=FALSE, weight='matlCoop',     nodal_vars=c('i_polity2'),     dyad_vars=c('matlConf') )  # layer together icews_verbCoop_matlCoop_longit_l <- layer_netlet(     netlet_list=list(icews_verbCoop_longit_l, icews_matlCoop_longit_l),     layer_labels=c('verbCoop', 'matlCoop') )  # dimensions of the multilayer network from the  # longitudinal list case will be a # (number of time periods) list of  # (number of actors) x (number of actors) x (number of layers) arrays names(get_raw(icews_verbCoop_matlCoop_longit_l)) #>  [1] \"2002\" \"2003\" \"2004\" \"2005\" \"2006\" \"2007\" \"2008\" \"2009\" \"2010\" \"2011\" #> [11] \"2012\" \"2013\" \"2014\" dim(get_raw(icews_verbCoop_matlCoop_longit_l)$'2010') #> [1] 152 152   2  # information on layer labels can be accessed  # from  the `layers` attribute  attr(icews_verbCoop_matlCoop, 'layers') #> [1] \"verbCoop\" \"matlCoop\" attr(icews_verbCoop_matlCoop_longit_l, 'layers') #> [1] \"verbCoop\" \"matlCoop\""},{"path":"https://netify-dev.github.io/netify/reference/list_to_array.html","id":null,"dir":"Reference","previous_headings":"","what":"list_to_array — list_to_array","title":"list_to_array — list_to_array","text":"function converts list matrices three dimensional array","code":""},{"path":"https://netify-dev.github.io/netify/reference/list_to_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list_to_array — list_to_array","text":"","code":"list_to_array(list_of_mats)"},{"path":"https://netify-dev.github.io/netify/reference/list_to_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"list_to_array — list_to_array","text":"list_of_mats list object","code":""},{"path":"https://netify-dev.github.io/netify/reference/list_to_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"list_to_array — list_to_array","text":"three dimensional array","code":""},{"path":"https://netify-dev.github.io/netify/reference/list_to_array.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"list_to_array — list_to_array","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/logical_check.html","id":null,"dir":"Reference","previous_headings":"","what":"logical_check — logical_check","title":"logical_check — logical_check","text":"Checks make sure user correctly inputted logicals select inputs","code":""},{"path":"https://netify-dev.github.io/netify/reference/logical_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logical_check — logical_check","text":"","code":"logical_check(   sum_dyads,   symmetric,   diag_to_NA,   missing_to_zero,   actor_time_uniform = NULL )"},{"path":"https://netify-dev.github.io/netify/reference/logical_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logical_check — logical_check","text":"sum_dyads user supplied input symmetric user supplied input diag_to_NA user supplied input missing_to_zero user supplied input actor_time_uniform optional user supplied input","code":""},{"path":"https://netify-dev.github.io/netify/reference/logical_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logical_check — logical_check","text":"returns NULL object stops process error detected","code":""},{"path":"https://netify-dev.github.io/netify/reference/logical_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"logical_check — logical_check","text":"Ha Eun Choi, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/longit_dv_to_arr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert list of dependent variable(s) into an array — longit_dv_to_arr","title":"Convert list of dependent variable(s) into an array — longit_dv_to_arr","text":"Mainly use going list netlet array netlet bridging netlet objects analysis packages expect matrix/array inputs","code":""},{"path":"https://netify-dev.github.io/netify/reference/longit_dv_to_arr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert list of dependent variable(s) into an array — longit_dv_to_arr","text":"","code":"longit_dv_to_arr(netlet)"},{"path":"https://netify-dev.github.io/netify/reference/longit_dv_to_arr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert list of dependent variable(s) into an array — longit_dv_to_arr","text":"netlet netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/longit_dv_to_arr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert list of dependent variable(s) into an array — longit_dv_to_arr","text":"array object dimensions nr x nc x t, nr number row actors, nc number column actors, t number time periods.","code":""},{"path":"https://netify-dev.github.io/netify/reference/longit_dyad_to_arr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert list of dyadic arrays into an array — longit_dyad_to_arr","title":"Convert list of dyadic arrays into an array — longit_dyad_to_arr","text":"Mainly use going list netlet array netlet bridging netlet objects analysis packages expect matrix/array inputs","code":""},{"path":"https://netify-dev.github.io/netify/reference/longit_dyad_to_arr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert list of dyadic arrays into an array — longit_dyad_to_arr","text":"","code":"longit_dyad_to_arr(netlet)"},{"path":"https://netify-dev.github.io/netify/reference/longit_dyad_to_arr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert list of dyadic arrays into an array — longit_dyad_to_arr","text":"netlet netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/longit_dyad_to_arr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert list of dyadic arrays into an array — longit_dyad_to_arr","text":"array object dimensions nr x nc x pn x t, nr number row actors, nc number column actors, pn number dyadic variables, t number time periods.","code":""},{"path":"https://netify-dev.github.io/netify/reference/longit_nodal_to_arr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert nodal attribute of netlet into an array — longit_nodal_to_arr","title":"Convert nodal attribute of netlet into an array — longit_nodal_to_arr","text":"Mainly use going list netlet array netlet bridging netlet objects analysis packages expect matrix/array inputs","code":""},{"path":"https://netify-dev.github.io/netify/reference/longit_nodal_to_arr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert nodal attribute of netlet into an array — longit_nodal_to_arr","text":"","code":"longit_nodal_to_arr(netlet)"},{"path":"https://netify-dev.github.io/netify/reference/longit_nodal_to_arr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert nodal attribute of netlet into an array — longit_nodal_to_arr","text":"netlet netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/longit_nodal_to_arr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert nodal attribute of netlet into an array — longit_nodal_to_arr","text":"list object length two, one row actors another column actors. element list array dimensions n x pn x t, n number actors, pn number nodal variables, t number time periods. rownames array actors, colnames nodal variables.","code":""},{"path":"https://netify-dev.github.io/netify/reference/merge_layout_attribs.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge netlet attributes with layout information — merge_layout_attribs","title":"Merge netlet attributes with layout information — merge_layout_attribs","text":"function organizes netlet data integrating x y positions nodes_list connection data edges_list node edge data structures returned decompose_netlet. supports cross-sectional longitudinal data formats.","code":""},{"path":"https://netify-dev.github.io/netify/reference/merge_layout_attribs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge netlet attributes with layout information — merge_layout_attribs","text":"","code":"merge_layout_attribs(netlet, nodes_list, edges_list)"},{"path":"https://netify-dev.github.io/netify/reference/merge_layout_attribs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge netlet attributes with layout information — merge_layout_attribs","text":"netlet netify object containing network data. nodes_list list data frames (single data frame cross-sectional data) containing node positions columns actor, x, y. longitudinal data, list element corresponds different time slice. edges_list list data frames (single data frame cross-sectional data) detailing connections nodes. data frame include least columns , , longitudinal data, time.","code":""},{"path":"https://netify-dev.github.io/netify/reference/merge_layout_attribs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge netlet attributes with layout information — merge_layout_attribs","text":"list containing two data frames: nodal_data edge_data. data frame incorporates corresponding node edge data along spatial coordinates (time indices longitudinal data).","code":""},{"path":"https://netify-dev.github.io/netify/reference/net_plot_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data preparation for plotting 'netify' objects — net_plot_data","title":"Data preparation for plotting 'netify' objects — net_plot_data","text":"function prepares necessary data components visualizing 'netify' objects. processes network attributes setups layout aesthetic parameters subsequent plotting.","code":""},{"path":"https://netify-dev.github.io/netify/reference/net_plot_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data preparation for plotting 'netify' objects — net_plot_data","text":"","code":"net_plot_data(netlet, plot_args = list())"},{"path":"https://netify-dev.github.io/netify/reference/net_plot_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data preparation for plotting 'netify' objects — net_plot_data","text":"netlet 'netify' object, contains network data structured analysis visualization. plot_args list arguments influence layout presentation network visualization, including: - point_layout: Optional, user-provided node layout; provided, layout generated based layout parameter. - layout: Specifies layout algorithm 'igraph' position nodes point_layout provided. Available options include \"nicely\", \"fruchterman.reingold\", \"kamada.kawai\", \"random\", \"circle\", \"star\", \"grid\", \"graphopt\", \"sugiyama\", \"drl\", \"lgl\", \"bipartite\", \"tree\", \"randomly\", \"dh\", \"fr\", \"kk\", \"gem\", \"mds\". - remove_isolates: Logical; TRUE, isolates removed plot. Default TRUE. - static_actor_positions: Logical indicating whether use static positions actors. - add_edges: Logical; TRUE, edges added plot. Default TRUE. - curve_edges: Logical; TRUE, edges curved. Default FALSE. - add_points: Logical; TRUE, points (nodes) plotted. Default TRUE. - add_text: Logical; TRUE, text annotations added. Default FALSE. - add_label: Logical; TRUE, labels added. Default FALSE. - select_text: vector node names specifically add text ; others text. - select_label: vector node names specifically add labels ; others labels.","code":""},{"path":"https://netify-dev.github.io/netify/reference/net_plot_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data preparation for plotting 'netify' objects — net_plot_data","text":"list containing plot_args, ggnet_params, net_dfs used setting plot: - plot_args: Adjusted plotting arguments including layout graphical settings. - ggnet_params: Graphical parameters organized nodes, edges, labels. - net_dfs: Data frames nodes edges prepared plotting.","code":""},{"path":"https://netify-dev.github.io/netify/reference/net_plot_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Data preparation for plotting 'netify' objects — net_plot_data","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify.html","id":null,"dir":"Reference","previous_headings":"","what":"Create network object from data.frame — netify","title":"Create network object from data.frame — netify","text":"function takes dyadic dataset outputs netlet object.","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create network object from data.frame — netify","text":"","code":"netify(   dyad_data,   actor1 = NULL,   actor2 = NULL,   time = NULL,   symmetric = TRUE,   mode = \"unipartite\",   weight = NULL,   sum_dyads = FALSE,   actor_time_uniform = TRUE,   actor_pds = NULL,   diag_to_NA = TRUE,   missing_to_zero = TRUE,   output_format = ifelse(is.null(time), \"cross_sec\", \"longit_list\"),   nodal_vars = NULL,   dyad_vars = NULL,   dyad_vars_symmetric = rep(symmetric, length(dyad_vars)) )"},{"path":"https://netify-dev.github.io/netify/reference/netify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create network object from data.frame — netify","text":"dyad_data data object netify actor1 character: name actor 1 variable data actor2 character: name actor 2 variable data time character: name time variable data, time provided assumed symmetric logical: whether ties symmetric, default TRUE mode character: whether network unipartite bipartite, default unipartite weight character: name weighted edge variable data, default NULL sum_dyads logical: whether sum weight value exists repeating dyads actor_time_uniform logical: whether assume actors across full time series observed data TRUE means actors across full time series observed data outputted netify object array format. FALSE means actors come observed data \"existence\" determined data, meaning first year existence determined time point first event last year existence time point last event. Outputted netify object list format. actor_pds data.frame indicating start end time point every actor, can created using get_actor_time_info.R, unless provided estimated user based choice actor_time_uniform diag_to_NA logical: whether diagonals set NA, default TRUE missing_to_zero logical: whether missing values set zero, default TRUE output_format character: \"cross_sec\", \"longit_array\", \"longit_list. specified time NULL output_format \"cross_sec\" time specified output_format default \"longit_list\". nodal_vars character vector: names nodal variables dyad_data object added attributes netify object dyad_vars character vector: names dyadic variables dyad_data object added attributes netify object, default add variables extra_dyadic_data data.frame dyad_vars_symmetric logical vector: whether ties symmetric, default use choice symmetric argument","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create network object from data.frame — netify","text":"netlet object","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create network object from data.frame — netify","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create network object from data.frame — netify","text":"","code":"# load example directed event data from ICEWS # this data comes in the form of a dyadic # dataframe where all dyad pairs are listed data(icews)  # generate a longitudional, directed and weighted network # where the weights are matlConf and results are organized # in an array icews_matlConf <- netify(     dyad_data=icews,     actor1='i', actor2='j', time='year',     symmetric=FALSE, weight='matlConf')  # generate a longitudional, directed and weighted network # where the weights are matlConf and results are organized # in an array and we have both dyadic and nodal attributes icews_matlConf <- netify(     dyad_data=icews,     actor1='i', actor2='j', time='year',     symmetric=FALSE, weight='matlConf',     nodal_vars=c('i_polity2', 'i_log_gdp', 'i_log_pop'),     dyad_vars=c('matlCoop', 'verbCoop', 'verbConf'),     dyad_vars_symmetric=c(FALSE, FALSE, FALSE) )     # example using cow data # gathered from the peacesciencer package library(peacesciencer) library(dplyr)  # create dyadic data set over time cow_dyads <- create_dyadyears(      subset_years = c(1992:2001)     ) %>%     # add mids     add_cow_mids() %>%      # add capital distance     add_capital_distance() %>%     # add cow trade     add_cow_trade() %>%     # add democracy     add_democracy() #> Joining with `by = join_by(ccode1, ccode2, year)` #> Joining with `by = join_by(ccode1, ccode2, year)` #> add_cow_mids() IMPORTANT MESSAGE: By default, this function whittles dispute-year data into dyad-year data by first selecting on unique onsets. Thereafter, where duplicates remain, it whittles dispute-year data into dyad-year data in the following order: 1) retaining highest `fatality`, 2) retaining highest `hostlev`, 3) retaining highest estimated `mindur`, 4) retaining highest estimated `maxdur`, 5) retaining reciprocated over non-reciprocated observations, 6) retaining the observation with the lowest start month, and, where duplicates still remained (and they don't), 7) forcibly dropping all duplicates for observations that are otherwise very similar. #> See: http://svmiller.com/peacesciencer/articles/coerce-dispute-year-dyad-year.html #> Error in add_cow_trade(.): Dyadic CoW trade data are now stored remotely and must be downloaded separately. #> This error disappears after successfully running `download_extdata()`. Thereafter, the function works with no problem and the dyadic trade data (`cow_trade_ddy`) can be loaded for additional exploration.  # now lets create a network object in which # we generate list of networks in which the # cross-sections represent mid onset # additionally note that the raw data involves # country years in which we saw countries go in # and out of existence so we set actor_time_uniform # to FALSE mid_network <- netify(   cow_dyads,   actor1='ccode1', actor2='ccode2', time='year',   # network of interest variable   weight='cowmidonset',    actor_time_uniform=FALSE,   sum_dyads=FALSE, symmetric=TRUE,   diag_to_NA=TRUE, missing_to_zero=FALSE,   # nodal features/covariates   nodal_vars = c('v2x_polyarchy1', 'v2x_polyarchy2'),   # dyadic features/covariates   dyad_vars = c('capdist', 'flow1'),   dyad_vars_symmetric = c(TRUE, FALSE)   ) #> Error: object 'cow_dyads' not found mid_network #> Error: object 'mid_network' not found"},{"path":"https://netify-dev.github.io/netify/reference/netify_check.html","id":null,"dir":"Reference","previous_headings":"","what":"netify_check — netify_check","title":"netify_check — netify_check","text":"Checks make sure object class netify stops process ","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"netify_check — netify_check","text":"","code":"netify_check(netlet)"},{"path":"https://netify-dev.github.io/netify/reference/netify_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"netify_check — netify_check","text":"netlet user inputted object check","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"netify_check — netify_check","text":"NULL object stops process error detected","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"netify_check — netify_check","text":"Ha Eun Choi, Colin Henry, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify_measurements.html","id":null,"dir":"Reference","previous_headings":"","what":"Get measurements of a netify object — netify_measurements","title":"Get measurements of a netify object — netify_measurements","text":"Get measurements netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify_measurements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get measurements of a netify object — netify_measurements","text":"","code":"netify_measurements(netlet)"},{"path":"https://netify-dev.github.io/netify/reference/netify_measurements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get measurements of a netify object — netify_measurements","text":"netlet netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify_measurements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get measurements of a netify object — netify_measurements","text":"list measurements netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify_measurements.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get measurements of a netify object — netify_measurements","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify_to_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"netify_to_igraph — netify_to_igraph","title":"netify_to_igraph — netify_to_igraph","text":"Convert netify object igraph object","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify_to_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"netify_to_igraph — netify_to_igraph","text":"","code":"netify_to_igraph(netlet)"},{"path":"https://netify-dev.github.io/netify/reference/netify_to_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"netify_to_igraph — netify_to_igraph","text":"netlet netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify_to_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"netify_to_igraph — netify_to_igraph","text":"igraph object","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify_to_igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"netify_to_igraph — netify_to_igraph","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify_to_statnet.html","id":null,"dir":"Reference","previous_headings":"","what":"netify_to_statnet — netify_to_statnet","title":"netify_to_statnet — netify_to_statnet","text":"Convert netify object statnet network object","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify_to_statnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"netify_to_statnet — netify_to_statnet","text":"","code":"netify_to_statnet(netlet)"},{"path":"https://netify-dev.github.io/netify/reference/netify_to_statnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"netify_to_statnet — netify_to_statnet","text":"netlet netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify_to_statnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"netify_to_statnet — netify_to_statnet","text":"statnet network object","code":""},{"path":"https://netify-dev.github.io/netify/reference/netify_to_statnet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"netify_to_statnet — netify_to_statnet","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/new_netify.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs a generic netlet Object — new_netify","title":"Constructs a generic netlet Object — new_netify","text":"new_netify low-level constructor efficiently creating new netlet objects visible users.","code":""},{"path":"https://netify-dev.github.io/netify/reference/new_netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs a generic netlet Object — new_netify","text":"","code":"new_netify(data, ...)"},{"path":"https://netify-dev.github.io/netify/reference/new_netify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs a generic netlet Object — new_netify","text":"data data object ... additional parameters","code":""},{"path":"https://netify-dev.github.io/netify/reference/new_netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructs a generic netlet Object — new_netify","text":"netlet object","code":""},{"path":"https://netify-dev.github.io/netify/reference/new_netify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constructs a generic netlet Object — new_netify","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/num.html","id":null,"dir":"Reference","previous_headings":"","what":"num — num","title":"num — num","text":"Converts values character numeric","code":""},{"path":"https://netify-dev.github.io/netify/reference/num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"num — num","text":"","code":"num(x)"},{"path":"https://netify-dev.github.io/netify/reference/num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"num — num","text":"x vector","code":""},{"path":"https://netify-dev.github.io/netify/reference/num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"num — num","text":"numeric vector","code":""},{"path":"https://netify-dev.github.io/netify/reference/num.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"num — num","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/peek.html","id":null,"dir":"Reference","previous_headings":"","what":"peek method for netify objects — peek","title":"peek method for netify objects — peek","text":"peek takes netify object displays specified rows information.","code":""},{"path":"https://netify-dev.github.io/netify/reference/peek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"peek method for netify objects — peek","text":"","code":"peek(   netlet,   what_to_peek = 3,   what_rows_to_peek = what_to_peek,   what_cols_to_peek = what_to_peek,   when_to_peek = 1,   what_layers_to_peek = NULL )"},{"path":"https://netify-dev.github.io/netify/reference/peek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"peek method for netify objects — peek","text":"netlet object class netify what_to_peek enter name specific nodes peek character vector form provide numeric range, default show first three rows columns interactions what_rows_to_peek similar what_to_peek specific rows, default value set what_to_peek. want peek rows set NULL. what_cols_to_peek similar what_to_peek specific columns, default value set what_to_peek. want peek columns set NULL. when_to_peek choose time points peek , default show first time point data. entry numeric value vector used index time dimension. entry character vector used match time dimension labels. want peek time points set NULL. what_layers_to_peek netlet object multiple layers, must choose one layer peek .","code":""},{"path":"https://netify-dev.github.io/netify/reference/peek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"peek method for netify objects — peek","text":"slice network","code":""},{"path":"https://netify-dev.github.io/netify/reference/peek.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"peek method for netify objects — peek","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/peek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"peek method for netify objects — peek","text":"","code":"# load data data(icews)  # subset to a particular year icews_10 <- icews[icews$year=='2010', ]  # gen netify object icews_verbCoop <- netify(   dyad_data=icews_10, actor1='i', actor2='j',   symmetric=FALSE, weight='verbCoop' )  # peek at relations between a few countries peek(icews_verbCoop,   what_to_peek = c('United Kingdom', 'United States','France') ) #>                United Kingdom United States France #> United Kingdom             NA          1157    407 #> United States            1082            NA    582 #> France                    431           653     NA  # specify rows and cols to peek at peek(icews_verbCoop,   what_rows_to_peek = c('United Kingdom', 'United States','France'),   what_cols_to_peek = c('Russian Federation', 'Sri Lanka') ) #>                Russian Federation Sri Lanka #> United Kingdom                460       101 #> United States                4275       131 #> France                        987        15  # peek with longit array icews_matlConf <- netify(   dyad_data=icews,    actor1='i', actor2='j', time='year',   symmetric=FALSE, weight='matlConf',   output_format = 'longit_array' ) # peek at a few years for the first three rows/cols,  # specify numeric index or character refs peek(icews_matlConf, when_to_peek=c(1, 5, 10)) #> , , 2002 #>  #>             Afghanistan Albania Algeria #> Afghanistan          NA       0       0 #> Albania               0      NA       0 #> Algeria               0       0      NA #>  #> , , 2006 #>  #>             Afghanistan Albania Algeria #> Afghanistan          NA      21       0 #> Albania               3      NA       1 #> Algeria               0       0      NA #>  #> , , 2011 #>  #>             Afghanistan Albania Algeria #> Afghanistan          NA       0       0 #> Albania               2      NA       0 #> Algeria               1       0      NA #>  peek(icews_matlConf, when_to_peek=c('2002', '2006', '2011')) #> , , 2002 #>  #>             Afghanistan Albania Algeria #> Afghanistan          NA       0       0 #> Albania               0      NA       0 #> Algeria               0       0      NA #>  #> , , 2006 #>  #>             Afghanistan Albania Algeria #> Afghanistan          NA      21       0 #> Albania               3      NA       1 #> Algeria               0       0      NA #>  #> , , 2011 #>  #>             Afghanistan Albania Algeria #> Afghanistan          NA       0       0 #> Albania               2      NA       0 #> Algeria               1       0      NA #>"},{"path":"https://netify-dev.github.io/netify/reference/plot.netify.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting method for 'netify' objects — plot.netify","title":"Plotting method for 'netify' objects — plot.netify","text":"function provides comprehensive tool visualize 'netify' objects various graphical representations including points, edges, texts, labels. leverages capabilities 'igraph' 'ggplot' packages create customizable network visualizations.","code":""},{"path":"https://netify-dev.github.io/netify/reference/plot.netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting method for 'netify' objects — plot.netify","text":"","code":"# S3 method for class 'netify' plot(x, ...)"},{"path":"https://netify-dev.github.io/netify/reference/plot.netify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting method for 'netify' objects — plot.netify","text":"x 'netify' object, contains network data structured analysis visualization. ... Additional arguments, can include limited : - point_layout: Optional, user-provided node layout; provided, layout generated based layout parameter. - layout: Specifies layout algorithm 'igraph' position nodes point_layout provided. Available options include \"nicely\", \"fruchterman.reingold\", \"kamada.kawai\", \"random\", \"circle\", \"star\", \"grid\", \"graphopt\", \"sugiyama\", \"drl\", \"lgl\", \"bipartite\", \"tree\", \"randomly\", \"dh\", \"fr\", \"kk\", \"gem\", \"mds\". - remove_isolates: Logical; TRUE, isolates removed plot. Default TRUE. - static_actor_positions Logical indicating whether use static positions actors. Useful longitudinal studies node positions remain consistent time. TRUE, layout default calculated based collapsed adjacency matrix across time points. Users can also specify specific time point use static layout setting which_static desired time point. - add_edges: Logical; TRUE, edges added plot. Default TRUE. - curve_edges: Logical; TRUE, edges curved. Default FALSE. - add_points: Logical; TRUE, points (nodes) plotted. Default TRUE. - add_text: Logical; TRUE, text annotations added. Default FALSE. - add_label: Logical; TRUE, labels added. Default FALSE. - select_text: vector node names specifically add text ; others text. - select_label: vector node names specifically add labels ; others labels. - point_size: fixed size points, equivalent geom_point(size = point_size) ggplot2. - point_size_var: variable node data dynamically size points, equivalent geom_point(aes(size = point_size_var)) ggplot2. arguments control various aspects plot's appearance functionality.","code":""},{"path":"https://netify-dev.github.io/netify/reference/plot.netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting method for 'netify' objects — plot.netify","text":"'ggplot' plot object can modified printed.","code":""},{"path":"https://netify-dev.github.io/netify/reference/plot.netify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting method for 'netify' objects — plot.netify","text":"plot.netify creates network plot flexible options customization. allows user specify: Whether include edges rendered (straight curved). Whether nodes displayed points. Whether annotate nodes text labels. Specific nodes annotate, allowing selective emphasis within network. Custom layouts automatic placement suffice. Additional customization options like point_size point_size_var allow users apply typical ggplot2 methods directly network visualizations, facilitating easy integration familiar graphical adjustments.","code":""},{"path":"https://netify-dev.github.io/netify/reference/plot.netify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plotting method for 'netify' objects — plot.netify","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/plot.netify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting method for 'netify' objects — plot.netify","text":"","code":"# load icews data data(icews)  # choose attributes nvars = c( 'i_polity2', 'i_log_gdp', 'i_log_pop' ) dvars = c( 'matlCoop', 'verbConf', 'matlConf' )  # create a netify object netlet = netify(     dyad_data=icews, actor1='i', actor2='j',     time = 'year',     symmetric=FALSE, weight='verbCoop',     mode='unipartite', sum_dyads=FALSE,     actor_time_uniform=TRUE, actor_pds=NULL,     diag_to_NA=TRUE, missing_to_zero=TRUE,     nodal_vars = nvars,      dyad_vars = dvars )  # add basic summary network stats netlet = add_nodal(     netlet,      summary_actor(netlet),     actor='actor', time='time')  # plot the network plot(netlet,       edge_color='lightgrey',       point_size_var = 'degree_total',      point_color_var = 'i_polity2'      )"},{"path":"https://netify-dev.github.io/netify/reference/plot_actor_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Actor-Level Statistics for Netify Objects — plot_actor_stats","title":"Plot Actor-Level Statistics for Netify Objects — plot_actor_stats","text":"plot_actor_stats generates visualizations actor-level statistics using output summary_actor function. function supports cross-sectional longitudinal data, offering insights distribution statistics across actors focusing specific actors time.","code":""},{"path":"https://netify-dev.github.io/netify/reference/plot_actor_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Actor-Level Statistics for Netify Objects — plot_actor_stats","text":"","code":"plot_actor_stats(   summary_df,   longitudinal = ifelse(\"time\" %in% colnames(summary_df), TRUE, FALSE),   multilayer = ifelse(\"layer\" %in% colnames(summary_df), TRUE, FALSE),   across_actor = TRUE,   specific_stats = NULL,   specific_actors = NULL )"},{"path":"https://netify-dev.github.io/netify/reference/plot_actor_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Actor-Level Statistics for Netify Objects — plot_actor_stats","text":"summary_df dataframe summary_actor function containing actor-level actor-time level statistics. dataframe columns labeled \"actor\" \"time\" longitudinal data. longitudinal Logical; TRUE, data considered longitudinal. Default set TRUE \"time\" column dataframe passed summary_df. multilayer Logical; TRUE, data considered multilayered. Default set TRUE \"layer\" column dataframe passed summary_df. across_actor Logical; TRUE, visualizations focus distribution statistics across actors. FALSE, visualizations focus specific actors. Default TRUE. setting across_actor TRUE specific actors provided, data subsetted include specified actors. specific_stats Optional; vector specific statistics plot. NULL, available statistics dataframe used. specified, function check statistics present dataframe subset data accordingly. specific_actors Optional; vector specific actor names statistics plotted. NULL, statistics actors considered. specified, function check actors present dataframe subset data accordingly. parameter relevant across_actor set FALSE.","code":""},{"path":"https://netify-dev.github.io/netify/reference/plot_actor_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Actor-Level Statistics for Netify Objects — plot_actor_stats","text":"ggplot object representing requested visualization, can customized printed.","code":""},{"path":"https://netify-dev.github.io/netify/reference/plot_actor_stats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Actor-Level Statistics for Netify Objects — plot_actor_stats","text":"function can generate different types plots based structure input data: cross-sectional data, show distribution statistics across actors using density plots compare specific actors using various plot types. longitudinal data, show distribution statistics changes time using ridge density plots track changes statistics specific actors time using line plots.","code":""},{"path":"https://netify-dev.github.io/netify/reference/plot_actor_stats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Actor-Level Statistics for Netify Objects — plot_actor_stats","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/plot_graph_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function for graph level statistics for netify objects — plot_graph_stats","title":"Plotting function for graph level statistics for netify objects — plot_graph_stats","text":"plot_graph_stats takes data frame containing graph level statistics generates visual representation using either line bar plots. function designed work data frames represent network statistics multiple networks time points.","code":""},{"path":"https://netify-dev.github.io/netify/reference/plot_graph_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function for graph level statistics for netify objects — plot_graph_stats","text":"","code":"plot_graph_stats(summary_df, type = \"line\", specific_stats = NULL)"},{"path":"https://netify-dev.github.io/netify/reference/plot_graph_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function for graph level statistics for netify objects — plot_graph_stats","text":"summary_df data frame produced summary.netify function function outputs network statistics similar format. data frame column \"net\" identifies network time point row. type character string specifying type plot generate: either 'line' line plots 'bar' bar plots. default 'line'. specific_stats Optional vector column names summary_df specifying statistics plot. NULL (default), statistics summary_df plotted.","code":""},{"path":"https://netify-dev.github.io/netify/reference/plot_graph_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function for graph level statistics for netify objects — plot_graph_stats","text":"ggplot object displaying specified statistics network. plots faceted statistic type across networks time points.","code":""},{"path":"https://netify-dev.github.io/netify/reference/plot_graph_stats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plotting function for graph level statistics for netify objects — plot_graph_stats","text":"Ha Eun Choi, Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/prep_for_amen.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert netify object to amen structured input — prep_for_amen","title":"Convert netify object to amen structured input — prep_for_amen","text":"Convert netify object amen structured input","code":""},{"path":"https://netify-dev.github.io/netify/reference/prep_for_amen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert netify object to amen structured input — prep_for_amen","text":"","code":"prep_for_amen(netlet)"},{"path":"https://netify-dev.github.io/netify/reference/prep_for_amen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert netify object to amen structured input — prep_for_amen","text":"netlet R object","code":""},{"path":"https://netify-dev.github.io/netify/reference/prep_for_amen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert netify object to amen structured input — prep_for_amen","text":"object ready analysis amen","code":""},{"path":"https://netify-dev.github.io/netify/reference/prep_for_amen.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert netify object to amen structured input — prep_for_amen","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/prep_for_amen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert netify object to amen structured input — prep_for_amen","text":"","code":"# load icews data data(icews)  # filter to a year for cross-sec example icews_10 <- icews[icews$year == 2010,]  # netify object icews_matlConf <- netify(   dyad_data = icews_10,    actor1 = 'i', actor2 = 'j',    symmetric = FALSE, weight = 'matlConf',   nodal_vars = c('i_polity2', 'i_log_gdp', 'i_log_pop'),   dyad_vars = c('matlCoop', 'verbCoop', 'verbConf'),   dyad_vars_symmetric = c(FALSE, FALSE, FALSE) )  # convert to amen input for_amen <- prep_for_amen(icews_matlConf)  # for_amen$Y is the matrix of dyadic weights dim(for_amen$Y) #> [1] 152 152  # for_amen$Xdyad is the array of dyadic attributes dim(for_amen$Xdyad) #> [1] 152 152   3  # for_amen$Xrow is the matrix of nodal attributes for rows dim(for_amen$Xrow) #> [1] 152   3  # for_amen$Xcol is the matrix of nodal attributes for columns dim(for_amen$Xcol) #> [1] 152   3  # generate a longitudional, directed and weighted network # where the weights are matlConf and results are organized # in an array and we have both dyadic and nodal attributes icews_matlConf_longit <- netify(   dyad_data=icews,   actor1='i', actor2='j', time='year',   symmetric=FALSE, weight='matlConf',   nodal_vars=c('i_polity2', 'i_log_gdp', 'i_log_pop'),   dyad_vars=c('matlCoop', 'verbCoop', 'verbConf'),   dyad_vars_symmetric=c(FALSE, FALSE, FALSE) )  # convert to amen input for_amen_longit <- prep_for_amen(icews_matlConf_longit)  # for_amen_longit$Y is the array of dyadic weights dim(for_amen_longit$Y) #> [1] 152 152  13  # for_amen_longit$Xdyad is the array of dyadic attributes dim(for_amen_longit$Xdyad) #> [1] 152 152   3  13  # for_amen_longit$Xrow is the array of nodal attributes for rows dim(for_amen_longit$Xrow) #> [1] 152   3  13  # for_amen_longit$Xcol is the array of nodal attributes for columns dim(for_amen_longit$Xcol) #> [1] 152   3  13"},{"path":"https://netify-dev.github.io/netify/reference/prep_for_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert conflictNet object to igraph object — prep_for_igraph","title":"Convert conflictNet object to igraph object — prep_for_igraph","text":"Convert conflictNet object igraph object","code":""},{"path":"https://netify-dev.github.io/netify/reference/prep_for_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert conflictNet object to igraph object — prep_for_igraph","text":"","code":"prep_for_igraph(netlet, add_nodal_attribs = TRUE, add_dyad_attribs = TRUE)"},{"path":"https://netify-dev.github.io/netify/reference/prep_for_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert conflictNet object to igraph object — prep_for_igraph","text":"netlet R object add_nodal_attribs Add nodal attributes netlet igraph object. Default TRUE. add_dyad_attribs Add dyad attributes netlet igraph object. Default TRUE.","code":""},{"path":"https://netify-dev.github.io/netify/reference/prep_for_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert conflictNet object to igraph object — prep_for_igraph","text":"igraph object","code":""},{"path":"https://netify-dev.github.io/netify/reference/prep_for_igraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert conflictNet object to igraph object — prep_for_igraph","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/prep_for_igraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert conflictNet object to igraph object — prep_for_igraph","text":"","code":"# load data data(icews)  # cross-sectional case icews_10 <- icews[icews$year==2010,]  # create netify object dvars = c( 'matlCoop', 'verbConf', 'matlConf' ) nvars = c( 'i_polity2','i_log_gdp', 'i_log_pop' ) verbCoop_net = netify(    icews_10,   actor1='i', actor2='j',    symmetric=FALSE,    weight='verbCoop',   dyad_vars = dvars,   dyad_vars_symmetric=rep(FALSE, length(dvars)),   nodal_vars = nvars )  # convert to igraph object igrph <- prep_for_igraph(verbCoop_net) igrph #> IGRAPH 790d267 DNW- 152 9976 --  #> + attr: name (v/c), i_polity2 (v/n), i_log_gdp (v/n), i_log_pop (v/n), #> | weight (e/n), verbCoop (e/n), matlCoop (e/n), verbConf (e/n), #> | matlConf (e/n) #> + edges from 790d267 (vertex names): #>  [1] Afghanistan->Argentina  Afghanistan->Armenia    Afghanistan->Australia  #>  [4] Afghanistan->Austria    Afghanistan->Azerbaijan Afghanistan->Bahrain    #>  [7] Afghanistan->Bangladesh Afghanistan->Belgium    Afghanistan->Brazil     #> [10] Afghanistan->Bulgaria   Afghanistan->Canada     Afghanistan->China      #> [13] Afghanistan->Colombia   Afghanistan->Croatia    Afghanistan->Cuba       #> [16] Afghanistan->Denmark    Afghanistan->Egypt      Afghanistan->Estonia    #> + ... omitted several edges  # longitudinal case verbCoop_longit_net = netify(   icews,   actor1='i', actor2='j', time='year',   symmetric=FALSE,    weight='verbCoop',   dyad_vars = dvars,   dyad_vars_symmetric=rep(FALSE, length(dvars)),   nodal_vars = nvars )  # convert to igraph object igrph_longit <- prep_for_igraph(verbCoop_longit_net)  # output in the longitudinal case is  # a list of igraph objects class(igrph_longit) #> [1] \"list\" names(igrph_longit) #>  [1] \"2002\" \"2003\" \"2004\" \"2005\" \"2006\" \"2007\" \"2008\" \"2009\" \"2010\" \"2011\" #> [11] \"2012\" \"2013\" \"2014\" igrph_longit[['2002']] #> IGRAPH dd1b979 DNW- 152 8692 --  #> + attr: name (v/c), i_polity2 (v/n), i_log_gdp (v/n), i_log_pop (v/n), #> | weight (e/n), verbCoop (e/n), matlCoop (e/n), verbConf (e/n), #> | matlConf (e/n) #> + edges from dd1b979 (vertex names): #>  [1] Afghanistan->Albania    Afghanistan->Armenia    Afghanistan->Australia  #>  [4] Afghanistan->Austria    Afghanistan->Azerbaijan Afghanistan->Bahrain    #>  [7] Afghanistan->Bangladesh Afghanistan->Belgium    Afghanistan->Brazil     #> [10] Afghanistan->Bulgaria   Afghanistan->Cambodia   Afghanistan->Canada     #> [13] Afghanistan->Chile      Afghanistan->China      Afghanistan->Cuba       #> [16] Afghanistan->Denmark    Afghanistan->Egypt      Afghanistan->Estonia    #> + ... omitted several edges"},{"path":"https://netify-dev.github.io/netify/reference/prep_for_statnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert conflictNet object to a statnet network object — prep_for_statnet","title":"Convert conflictNet object to a statnet network object — prep_for_statnet","text":"Convert conflictNet object statnet network object","code":""},{"path":"https://netify-dev.github.io/netify/reference/prep_for_statnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert conflictNet object to a statnet network object — prep_for_statnet","text":"","code":"prep_for_statnet(netlet, add_nodal_attribs = TRUE, add_dyad_attribs = TRUE)"},{"path":"https://netify-dev.github.io/netify/reference/prep_for_statnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert conflictNet object to a statnet network object — prep_for_statnet","text":"netlet R object add_nodal_attribs Add nodal attributes netlet igraph object. Default TRUE. add_dyad_attribs Add dyad attributes netlet igraph object. Default TRUE.","code":""},{"path":"https://netify-dev.github.io/netify/reference/prep_for_statnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert conflictNet object to a statnet network object — prep_for_statnet","text":"statnet network object","code":""},{"path":"https://netify-dev.github.io/netify/reference/prep_for_statnet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert conflictNet object to a statnet network object — prep_for_statnet","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/prep_for_statnet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert conflictNet object to a statnet network object — prep_for_statnet","text":"","code":"# load data data(icews)  # cross-sectional case icews_10 <- icews[icews$year==2010,]  # create netify object dvars = c( 'matlCoop', 'verbConf', 'matlConf' ) nvars = c( 'i_polity2','i_log_gdp', 'i_log_pop' ) verbCoop_net = netify(    icews_10,   actor1='i', actor2='j',    symmetric=FALSE,    weight='verbCoop',   dyad_vars = dvars,   dyad_vars_symmetric=rep(FALSE, length(dvars)),   nodal_vars = nvars )  # convert to a statnet network object ntwk <- prep_for_statnet(verbCoop_net) ntwk #>  Network attributes: #>   vertices = 152  #>   directed = TRUE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   verbCoop: 152x152 matrix #>   matlCoop: 152x152 matrix #>   verbConf: 152x152 matrix #>   matlConf: 152x152 matrix #>   total edges= 9976  #>     missing edges= 0  #>     non-missing edges= 9976  #>  #>  Vertex attribute names:  #>     i_log_gdp i_log_pop i_polity2 vertex.names  #>  #>  Edge attribute names not shown   # longitudinal case verbCoop_longit_net = netify(   icews,   actor1='i', actor2='j', time='year',   symmetric=FALSE,    weight='verbCoop',   dyad_vars = dvars,   dyad_vars_symmetric=rep(FALSE, length(dvars)),   nodal_vars = nvars )  # convert to a statnet network object ntwk_longit <- prep_for_statnet(verbCoop_longit_net)  # output in the longitudinal case is  # a list of statnet network objects class(ntwk_longit) #> [1] \"list\" names(ntwk_longit) #>  [1] \"2002\" \"2003\" \"2004\" \"2005\" \"2006\" \"2007\" \"2008\" \"2009\" \"2010\" \"2011\" #> [11] \"2012\" \"2013\" \"2014\" ntwk_longit[['2002']] #>  Network attributes: #>   vertices = 152  #>   directed = TRUE  #>   hyper = FALSE  #>   loops = FALSE  #>   multiple = FALSE  #>   bipartite = FALSE  #>   verbCoop: 152x152 matrix #>   matlCoop: 152x152 matrix #>   verbConf: 152x152 matrix #>   matlConf: 152x152 matrix #>   total edges= 8692  #>     missing edges= 0  #>     non-missing edges= 8692  #>  #>  Vertex attribute names:  #>     i_log_gdp i_log_pop i_polity2 vertex.names  #>  #>  Edge attribute names not shown"},{"path":"https://netify-dev.github.io/netify/reference/print.netify.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for netify objects — print.netify","title":"Print method for netify objects — print.netify","text":"print.netify takes netify object defines information displayed print.","code":""},{"path":"https://netify-dev.github.io/netify/reference/print.netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for netify objects — print.netify","text":"","code":"# S3 method for class 'netify' print(x, ...)"},{"path":"https://netify-dev.github.io/netify/reference/print.netify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for netify objects — print.netify","text":"x object class netify, produced get_adjacency ... additional parameters used","code":""},{"path":"https://netify-dev.github.io/netify/reference/print.netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for netify objects — print.netify","text":"text information network","code":""},{"path":"https://netify-dev.github.io/netify/reference/print.netify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for netify objects — print.netify","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/raw_list.html","id":null,"dir":"Reference","previous_headings":"","what":"raw_list — raw_list","title":"raw_list — raw_list","text":"function takes netify object type cross_sec returns regular matrix","code":""},{"path":"https://netify-dev.github.io/netify/reference/raw_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"raw_list — raw_list","text":"","code":"raw_list(netlet)"},{"path":"https://netify-dev.github.io/netify/reference/raw_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"raw_list — raw_list","text":"netlet netify object type 'longit_list'","code":""},{"path":"https://netify-dev.github.io/netify/reference/raw_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"raw_list — raw_list","text":"object class list netify attributes stripped","code":""},{"path":"https://netify-dev.github.io/netify/reference/raw_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"raw_list — raw_list","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/raw_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"raw_matrix — raw_matrix","title":"raw_matrix — raw_matrix","text":"function takes netify object type cross_sec longit_array returns R matrix/array","code":""},{"path":"https://netify-dev.github.io/netify/reference/raw_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"raw_matrix — raw_matrix","text":"","code":"raw_matrix(netlet)"},{"path":"https://netify-dev.github.io/netify/reference/raw_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"raw_matrix — raw_matrix","text":"netlet netify object type cross_sec' 'longit_array'","code":""},{"path":"https://netify-dev.github.io/netify/reference/raw_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"raw_matrix — raw_matrix","text":"object class matrix, array netify attributes stripped","code":""},{"path":"https://netify-dev.github.io/netify/reference/raw_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"raw_matrix — raw_matrix","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/reduce_combine_dyad_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce and combine multiple dyadic attributes of netify objects into a single dyadic attribute. Mainly for use within the layer_netlet function — reduce_combine_dyad_attr","title":"Reduce and combine multiple dyadic attributes of netify objects into a single dyadic attribute. Mainly for use within the layer_netlet function — reduce_combine_dyad_attr","text":"Reduce combine multiple dyadic attributes netify objects single dyadic attribute. Mainly use within layer_netlet function","code":""},{"path":"https://netify-dev.github.io/netify/reference/reduce_combine_dyad_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce and combine multiple dyadic attributes of netify objects into a single dyadic attribute. Mainly for use within the layer_netlet function — reduce_combine_dyad_attr","text":"","code":"reduce_combine_dyad_attr(attribs_list, msrmnts_list, netlet_type)"},{"path":"https://netify-dev.github.io/netify/reference/reduce_combine_dyad_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce and combine multiple dyadic attributes of netify objects into a single dyadic attribute. Mainly for use within the layer_netlet function — reduce_combine_dyad_attr","text":"attribs_list list attributes netlet msrmnts_list list msrmnts netlet netlet_type character string netlet type","code":""},{"path":"https://netify-dev.github.io/netify/reference/reduce_combine_dyad_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce and combine multiple dyadic attributes of netify objects into a single dyadic attribute. Mainly for use within the layer_netlet function — reduce_combine_dyad_attr","text":"dyad attribute data.frame","code":""},{"path":"https://netify-dev.github.io/netify/reference/reduce_combine_nodal_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce and combine multiple nodal attributes of netify objects into a single nodal attribute. Mainly for use within the layer_netlet function — reduce_combine_nodal_attr","title":"Reduce and combine multiple nodal attributes of netify objects into a single nodal attribute. Mainly for use within the layer_netlet function — reduce_combine_nodal_attr","text":"Reduce combine multiple nodal attributes netify objects single nodal attribute. Mainly use within layer_netlet function","code":""},{"path":"https://netify-dev.github.io/netify/reference/reduce_combine_nodal_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce and combine multiple nodal attributes of netify objects into a single nodal attribute. Mainly for use within the layer_netlet function — reduce_combine_nodal_attr","text":"","code":"reduce_combine_nodal_attr(attribs_list, msrmnts_list, netlet_type)"},{"path":"https://netify-dev.github.io/netify/reference/reduce_combine_nodal_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce and combine multiple nodal attributes of netify objects into a single nodal attribute. Mainly for use within the layer_netlet function — reduce_combine_nodal_attr","text":"attribs_list list attributes netlet msrmnts_list list msrmnts netlet netlet_type character string netlet type","code":""},{"path":"https://netify-dev.github.io/netify/reference/reduce_combine_nodal_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce and combine multiple nodal attributes of netify objects into a single nodal attribute. Mainly for use within the layer_netlet function — reduce_combine_nodal_attr","text":"nodal attribute data.frame","code":""},{"path":"https://netify-dev.github.io/netify/reference/repeat_dyads_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether dyadic observations are repeating in the data.frame object — repeat_dyads_check","title":"Check whether dyadic observations are repeating in the data.frame object — repeat_dyads_check","text":"function checks repeating dyadic observations data.frame, possibly considering time dimension. leverages fast C++ code improved performance.","code":""},{"path":"https://netify-dev.github.io/netify/reference/repeat_dyads_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether dyadic observations are repeating in the data.frame object — repeat_dyads_check","text":"","code":"repeat_dyads_check(dyad_data, actor1, actor2, time = NULL)"},{"path":"https://netify-dev.github.io/netify/reference/repeat_dyads_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether dyadic observations are repeating in the data.frame object — repeat_dyads_check","text":"dyad_data data.frame containing dyadic data. actor1 Character string specifying column name actor1. actor2 Character string specifying column name actor2. time Optional character string specifying column name time. provided, dyads considered without regard time.","code":""},{"path":"https://netify-dev.github.io/netify/reference/repeat_dyads_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether dyadic observations are repeating in the data.frame object — repeat_dyads_check","text":"integer count number repeating dyads data.frame.","code":""},{"path":"https://netify-dev.github.io/netify/reference/repeat_dyads_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check whether dyadic observations are repeating in the data.frame object — repeat_dyads_check","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/repeat_dyads_check_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine number of repeating dyad-time obs — repeat_dyads_check_cpp","title":"Determine number of repeating dyad-time obs — repeat_dyads_check_cpp","text":"Determine number repeating dyad-time obs","code":""},{"path":"https://netify-dev.github.io/netify/reference/repeat_dyads_check_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine number of repeating dyad-time obs — repeat_dyads_check_cpp","text":"","code":"repeat_dyads_check_cpp(actor1, actor2, time)"},{"path":"https://netify-dev.github.io/netify/reference/repeat_dyads_check_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine number of repeating dyad-time obs — repeat_dyads_check_cpp","text":"actor1 character vector actor1 actor2 character vector actor2 time numeric vector time","code":""},{"path":"https://netify-dev.github.io/netify/reference/repeat_dyads_check_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine number of repeating dyad-time obs — repeat_dyads_check_cpp","text":"integer count number repeating dyads","code":""},{"path":"https://netify-dev.github.io/netify/reference/repeat_dyads_check_cpp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determine number of repeating dyad-time obs — repeat_dyads_check_cpp","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/set_layer_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for layer_netlet to set layer labels — set_layer_labels","title":"Helper function for layer_netlet to set layer labels — set_layer_labels","text":"Helper function layer_netlet set layer labels","code":""},{"path":"https://netify-dev.github.io/netify/reference/set_layer_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for layer_netlet to set layer labels — set_layer_labels","text":"","code":"set_layer_labels(netlet_list, layer_labels)"},{"path":"https://netify-dev.github.io/netify/reference/set_layer_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for layer_netlet to set layer labels — set_layer_labels","text":"netlet_list list netlet objects layer_labels character vector layer labels","code":""},{"path":"https://netify-dev.github.io/netify/reference/set_layer_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for layer_netlet to set layer labels — set_layer_labels","text":"character vector layer labels","code":""},{"path":"https://netify-dev.github.io/netify/reference/split_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Break string into list of strings by some fixed character and then extract the desired values around that fixed character — split_string","title":"Break string into list of strings by some fixed character and then extract the desired values around that fixed character — split_string","text":"Break string list strings fixed character extract desired values around fixed character","code":""},{"path":"https://netify-dev.github.io/netify/reference/split_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Break string into list of strings by some fixed character and then extract the desired values around that fixed character — split_string","text":"","code":"split_string(string_to_split, break_by, to_extract, fixed = TRUE)"},{"path":"https://netify-dev.github.io/netify/reference/split_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Break string into list of strings by some fixed character and then extract the desired values around that fixed character — split_string","text":"string_to_split character: string split break_by character: character break string to_extract integer: index string extracted fixed TRUE match exactly, otherwise use regular expressions","code":""},{"path":"https://netify-dev.github.io/netify/reference/split_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Break string into list of strings by some fixed character and then extract the desired values around that fixed character — split_string","text":"character vector extracted strings","code":""},{"path":"https://netify-dev.github.io/netify/reference/split_string.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Break string into list of strings by some fixed character and then extract the desired values around that fixed character — split_string","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/subset_netlet.html","id":null,"dir":"Reference","previous_headings":"","what":"subset_netlet method for netify objects — subset_netlet","title":"subset_netlet method for netify objects — subset_netlet","text":"subset_netlet takes netify object allows extraction smaller networks.","code":""},{"path":"https://netify-dev.github.io/netify/reference/subset_netlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"subset_netlet method for netify objects — subset_netlet","text":"","code":"subset_netlet(   netlet,   what_to_subset = NULL,   what_rows_to_subset = what_to_subset,   what_cols_to_subset = what_to_subset,   when_to_subset = NULL,   what_layers_to_subset = NULL )"},{"path":"https://netify-dev.github.io/netify/reference/subset_netlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"subset_netlet method for netify objects — subset_netlet","text":"netlet object class netify what_to_subset enter name specific nodes subset character vector form provide numeric range, default show first three rows columns interactions what_rows_to_subset similar what_to_subset specific rows, default value set what_to_subset. want subset rows set NULL. what_cols_to_subset similar what_to_subset specific columns, default value set what_to_subset. want subset columns set NULL. when_to_subset choose time points subset , default show first time point data. entry numeric value vector used index time dimension. entry character vector used match time dimension labels. want subset time points set NULL. what_layers_to_subset netlet object multiple layers, must choose one layer subset .","code":""},{"path":"https://netify-dev.github.io/netify/reference/subset_netlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"subset_netlet method for netify objects — subset_netlet","text":"subset original network relevant netify attributes","code":""},{"path":"https://netify-dev.github.io/netify/reference/subset_netlet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"subset_netlet method for netify objects — subset_netlet","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/subset_netlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"subset_netlet method for netify objects — subset_netlet","text":"","code":"# load example directed event data from ICEWS data(icews)  # generate a longitudional netify object  # with both dyadic and nodal attributes icews_matlConf <- netify(     dyad_data=icews,     actor1='i', actor2='j', time='year',     symmetric=FALSE, weight='matlConf',     nodal_vars=c('i_polity2', 'i_log_gdp', 'i_log_pop'),     dyad_vars=c('matlCoop', 'verbCoop', 'verbConf'),     dyad_vars_symmetric=c(FALSE, FALSE, FALSE) )    # subset to a few countries icews_matlConf_subset <- subset_netlet(    netlet=icews_matlConf,   what_to_subset=c('United States', 'United Kingdom',      'Russian Federation', 'China') )  # subset to a few countries and a few years icews_matlConf_subset <- subset_netlet(   netlet=icews_matlConf,  what_to_subset=c('United States', 'United Kingdom',     'Russian Federation', 'China'), when_to_subset=c('2010', '2011') )"},{"path":"https://netify-dev.github.io/netify/reference/summary.netify.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method to get graph level statistics for netify objects — summary.netify","title":"Summary method to get graph level statistics for netify objects — summary.netify","text":"summary.netify processes netify object calculate return data frame graph-level statistics. function designed work cross-sectional longitudinal netify data structures, providing comprehensive overview network characteristics density, reciprocity, standard deviations sending receiving effects.","code":""},{"path":"https://netify-dev.github.io/netify/reference/summary.netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method to get graph level statistics for netify objects — summary.netify","text":"","code":"# S3 method for class 'netify' summary(object, ...)"},{"path":"https://netify-dev.github.io/netify/reference/summary.netify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method to get graph level statistics for netify objects — summary.netify","text":"object object class netify, created using function netify. object contains network data structured analysis. ... Additional parameters can include user-defined statistical functions. functions take matrix input return scalar value. applied network slice individually netify object represents longitudinal data. other_stats: named list functions take matrix return additional actor-level statistics included output. function accept matrix input return vector single value per actor. allows inclusion custom metrics summary output.","code":""},{"path":"https://netify-dev.github.io/netify/reference/summary.netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method to get graph level statistics for netify objects — summary.netify","text":"data frame row represents network-level statistics single network single time point longitudinal study. Depending network type data attributes, columns can include: num_actors: Number actors network - bipartite networks number row column actors reported separately. density: proportion possible connections actual connections within network. num_edges: total number edges network (take edge weight account). mean_edge_weight: average weight edges network, provided weighted networks. sd_edge_weight: standard deviation edge weights network, provided weighted networks. median_edge_weight: median edge weight network, provided weighted networks. prop_edges_missing: proportion potential edges missing. min_edge_weight max_edge_weight: minimum maximum edge weights observed network, provided weighted networks. competition_row competition_col (defaults competition undirected networks): Measures network competitiveness using Herfindahl-Hirschman Index (HHI), defined \\(\\sum_{=1}^{n} (s_i)^2\\), \\(s_i\\) proportion interactions actor \\(\\) \\(n\\) total number actors. index ranges 1/n (indicating high diversity competitive interaction across actors) 1 (one actor dominates interactions). Refer Dorff, Gallop, & Minhas (2023) application measure conflict networks. sd_of_row_means sd_of_col_means: Standard deviations sending receiving effects (row column means). statistics meant describe variability actor behavior across network. covar_of_row_col_means: covariance sending receiving effects, always takes weights account calculated unipartite networks. reciprocity: reciprocity network, defined correlation adjacency matrix transpose, always takes weights account calculated unipartite networks. transitivity: overall transitivity clustering coefficient network, reflecting likelihood two neighbors node connected (calculated using transitivity function igraph).","code":""},{"path":"https://netify-dev.github.io/netify/reference/summary.netify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary method to get graph level statistics for netify objects — summary.netify","text":"function especially useful simplify process extracting key network statistics across multiple networks netify object. capable handling weighted unweighted networks adjusts calculations based nature network data (cross-sectional vs. longitudinal).","code":""},{"path":"https://netify-dev.github.io/netify/reference/summary.netify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary method to get graph level statistics for netify objects — summary.netify","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/summary.netify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method to get graph level statistics for netify objects — summary.netify","text":"","code":"# load icews data data(icews)  # create netlet netlet = netify(     dyad_data=icews, actor1='i', actor2='j',     time = 'year', symmetric=FALSE, weight='verbCoop' )  # calculate default summary stats summ_graph = summary(netlet) head(summ_graph) #>    net num_actors   density num_edges prop_edges_missing mean_edge_weight #> 1 2002        152 0.3787034      8692                  0         19.59123 #> 2 2003        152 0.3871994      8887                  0         19.36358 #> 3 2004        152 0.4145173      9514                  0         19.84986 #> 4 2005        152 0.4071976      9346                  0         19.79488 #> 5 2006        152 0.4108139      9429                  0         21.09136 #> 6 2007        152 0.4243203      9739                  0         21.89753 #>   sd_edge_weight median_edge_weight min_edge_weight max_edge_weight #> 1       143.8213                  0               0            6003 #> 2       144.5982                  0               0            5937 #> 3       137.7292                  0               0            5141 #> 4       148.6667                  0               0            6561 #> 5       160.0782                  0               0            7579 #> 6       162.4166                  0               0            7125 #>   competition_row competition_col sd_of_row_means sd_of_col_means #> 1      0.04093116      0.03813621        44.91530        43.04935 #> 2      0.04199822      0.03930188        45.07759        43.32783 #> 3      0.03481011      0.03262993        41.25503        39.63005 #> 4      0.04067046      0.03624472        45.20964        42.17312 #> 5      0.04151400      0.03697499        48.76301        45.48502 #> 6      0.03887627      0.03514325        48.67808        45.77854 #>   covar_of_row_col_means reciprocity transitivity #> 1              0.9946888   0.9778217    0.6058952 #> 2              0.9872959   0.9632488    0.6072045 #> 3              0.9923809   0.9769563    0.6215978 #> 4              0.9932157   0.9804325    0.6215075 #> 5              0.9909337   0.9771928    0.6277829 #> 6              0.9940837   0.9783703    0.6330626  # add custom summary stat spinglass_ig = function(mat){     g = prep_for_igraph(mat)     comm = igraph::cluster_spinglass(g)     num_comm = length(comm$csize)     return( c(         num_comm=num_comm,         comm_modul = comm$modularity     ) ) }  # since calculating communities can be intensive # lets take subset of time periods sub_net = subset_netlet(netlet, when_to_subset = as.character(2013:2014))  # feed custom summary stat into summary summary(sub_net,      other_stats=list(spinglass_ig=spinglass_ig))  #>    net num_actors   density num_edges prop_edges_missing mean_edge_weight #> 1 2013        152 0.4318142      9911                  0         17.21301 #> 2 2014        152 0.4258452      9774                  0         18.39291 #>   sd_edge_weight median_edge_weight min_edge_weight max_edge_weight #> 1       130.4925                  0               0            6320 #> 2       136.5412                  0               0            6327 #>   competition_row competition_col sd_of_row_means sd_of_col_means #> 1      0.04058869      0.03642385        39.26572        36.78299 #> 2      0.04058415      0.03521224        41.95447        38.49827 #>   covar_of_row_col_means reciprocity transitivity spinglass_ig.num_comm #> 1              0.9939394   0.9782226    0.6314429                     6 #> 2              0.9904402   0.9730745    0.6297063                     5 #>   spinglass_ig.comm_modul #> 1             0.004017763 #> 2             0.003848832"},{"path":"https://netify-dev.github.io/netify/reference/summary_actor.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method to get actor level statistics for netify objects — summary_actor","title":"Summary method to get actor level statistics for netify objects — summary_actor","text":"summary_actor provides detailed actor-level statistics netify objects, handling different network structures weight conditions. produces data frame summarizing various network metrics like degree, strength, closeness, betweenness, centrality measures.","code":""},{"path":"https://netify-dev.github.io/netify/reference/summary_actor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method to get actor level statistics for netify objects — summary_actor","text":"","code":"summary_actor(netlet, invert_weights_for_igraph = TRUE, other_stats = NULL)"},{"path":"https://netify-dev.github.io/netify/reference/summary_actor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method to get actor level statistics for netify objects — summary_actor","text":"netlet Object class netify, typically produced get_adjacency network creation functions within package. invert_weights_for_igraph Logical; TRUE, weights edges inverted used calculation closeness betweenness centrality. igraph treats edge weights distances. Inverting weights can crucial higher weights imply stronger (valuable) connections rather longer distances. Default TRUE. other_stats named list functions take matrix return additional actor-level statistics included output. function accept matrix input return vector single value per actor. allows inclusion custom metrics summary output.","code":""},{"path":"https://netify-dev.github.io/netify/reference/summary_actor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method to get actor level statistics for netify objects — summary_actor","text":"data.frame object summarizing actor-level statistics network(s). Depending structure attributes netify object, output includes: Symmetric Unweighted: Various network measures actor \\(\\) include: Degree: count unique actors actor \\(\\) directly connected – calculated \\(d_i = \\sum_{j=1}^{n} a_{ij}\\), \\(a_{ij}\\) adjacency matrix element indicating presence (1) absence (0) tie actors \\(\\) \\(j\\). Proportion ties: percentage actors network actor \\(\\) direct relationship – calculated \\(p_i = \\frac{d_i}{n-1}\\), \\(d_i\\) degree actor \\(\\) \\(n\\) total number actors network. Network share: fraction network's total connections include actor \\(\\) – calculated \\(s_i = \\frac{d_i}{\\sum_{j=1}^{n} d_j}\\), \\(d_i\\) degree actor \\(\\) \\(\\sum_{j=1}^{n} d_j\\) total number ties network. Closeness (\\(C_i\\)): measure close actor \\(\\) actors network – calculated \\(C_i = \\frac{1}{\\sum_{j} d(, j)}\\), \\(d(, j)\\) distance every actor \\(j\\). Betweenness (\\(B_i\\)): measure actor \\(\\)'s importance connecting different parts network – calculated \\(B_i = \\sum_{s \\neq \\neq t} \\frac{\\sigma_{st}()}{\\sigma_{st}}\\), \\(\\sigma_{st}\\) total number shortest paths node \\(s\\) node \\(t\\) \\(\\sigma_{st}()\\) number paths pass \\(\\). Eigenvector centrality (\\(EC_i\\)): measure actor \\(\\)'s influence based connections highly connected actors network, calculated using principal eigenvector network's adjacency matrix. Symmetric Weighted: Includes statistics symmetric unweighted case, additional measures accounting weight connections: Strength sum: total weight ties connected actor \\(\\) network – calculated \\(s_i^{sum} = \\sum_{j=1}^{n} w_{ij}\\), \\(w_{ij}\\) weight tie actors \\(\\) \\(j\\). Strength average: average weight ties connected actor \\(\\) – calculated \\(s_i^{avg} = \\frac{s_i^{sum}}{d_i}\\), \\(s_i^{sum}\\) strength sum actor \\(\\) \\(d_i\\) degree actor \\(\\). Strength standard deviation: variability weights ties connected actor \\(\\) – calculated \\(s_i^{sd} = \\sqrt{\\frac{1}{d_i} \\sum_{j=1}^{n} (w_{ij} - s_i^{avg})^2}\\), \\(w_{ij}\\) weight tie actors \\(\\) \\(j\\). Strength median: median weight ties connected actor \\(\\) – calculated middle value sorted weights. closeness betweenness, edge weights typically inverted treat distances, following convention igraph. behavior can modified setting invert_weights_for_igraph parameter summary_actor function FALSE. Asymmetric Unweighted: symmetric case now statistics row column calculated separately; relevant total statistic calculated well. Asymmetric Weighted: symmetric case now statistics row column calculated separately; relevant total statistic calculated well.","code":""},{"path":"https://netify-dev.github.io/netify/reference/summary_actor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary method to get actor level statistics for netify objects — summary_actor","text":"function automatically adjusts calculations based network symmetry weight attributes, offering tailored statistical outputs comprehensive network analysis. supports handling cross-sectional longitudinal network data, ensuring actor's metrics accurately computed time applicable. Examples additional computations (like authority hub scores) provided asymmetric networks.","code":""},{"path":"https://netify-dev.github.io/netify/reference/summary_actor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary method to get actor level statistics for netify objects — summary_actor","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/summary_actor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method to get actor level statistics for netify objects — summary_actor","text":"","code":"# load icews data data(icews)  # create a netify object netlet = netify(     dyad_data=icews, actor1='i', actor2='j',     time = 'year',     symmetric=FALSE, weight='verbCoop',     mode='unipartite', sum_dyads=FALSE,     actor_time_uniform=TRUE, actor_pds=NULL,     diag_to_NA=TRUE, missing_to_zero=TRUE )  # get actor-level statistics actor_stats <- summary_actor(netlet) head(actor_stats) #>         actor time degree_in degree_out degree_total prop_ties_in prop_ties_out #> 1 Afghanistan 2002        81         92          173    0.5364238     0.6092715 #> 2     Albania 2002        49         46           95    0.3245033     0.3046358 #> 3     Algeria 2002        65         68          133    0.4304636     0.4503311 #> 4      Angola 2002        67         64          131    0.4437086     0.4238411 #> 5   Argentina 2002        48         48           96    0.3178808     0.3178808 #> 6     Armenia 2002        66         71          137    0.4370861     0.4701987 #>   prop_ties_total strength_sum_in strength_sum_out strength_sum_total #> 1               1            8694            10160              18854 #> 2               1             943             1022               1965 #> 3               1            1123             1205               2328 #> 4               1            1111             1311               2422 #> 5               1            1261             1427               2688 #> 6               1            2642             2665               5307 #>   strength_avg_in strength_avg_out strength_avg_total strength_std_in #> 1       57.576159        67.284768          62.430464       198.98323 #> 2        6.245033         6.768212           6.506623        21.17104 #> 3        7.437086         7.980132           7.708609        17.00179 #> 4        7.357616         8.682119           8.019868        20.18988 #> 5        8.350993         9.450331           8.900662        39.54933 #> 6       17.496689        17.649007          17.572848        62.13790 #>   strength_std_out strength_std_total strength_median_in strength_median_out #> 1        227.24232          213.11277                  1                   2 #> 2         22.27089           21.72096                  0                   0 #> 3         18.93197           17.96688                  0                   0 #> 4         24.29633           22.24310                  0                   0 #> 5         45.34294           42.44614                  0                   0 #> 6         66.88569           64.51180                  0                   0 #>   strength_median_total network_share_in network_share_out network_share_total #> 1                   1.5      0.019334694       0.022594950         0.020964822 #> 2                   0.0      0.002097149       0.002272838         0.002184994 #> 3                   0.0      0.002497454       0.002679814         0.002588634 #> 4                   0.0      0.002470767       0.002915549         0.002693158 #> 5                   0.0      0.002804354       0.003173523         0.002988938 #> 6                   0.0      0.005875577       0.005926727         0.005901152 #>   closeness_in closeness_out closeness_all  betweenness authority_score #> 1     71.13409      68.44904      78.06787 1.324503e-02      0.26866096 #> 2     42.48817      43.64733      47.16201 0.000000e+00      0.01252200 #> 3     44.78256      39.95772      47.41426 0.000000e+00      0.01406673 #> 4     51.35489      46.60123      54.85391 8.830022e-05      0.01905067 #> 5     63.91481      61.26657      69.47750 0.000000e+00      0.03580770 #> 6     65.51012      63.04273      71.46157 0.000000e+00      0.05049222 #>     hub_score #> 1 0.183233794 #> 2 0.009730031 #> 3 0.010671854 #> 4 0.011275109 #> 5 0.024732267 #> 6 0.039622725  # add statistic that get  # the max incoming and outgoing tie max_out <- function(mat){ apply(mat, 1, max, na.rm=TRUE) } max_in <- function(mat){ apply(mat, 2, max, na.rm=TRUE) } actor_stats_custom <- summary_actor(netlet, other_stats = list(max_out = max_out, max_in = max_in)) head(actor_stats_custom) #>         actor time degree_in degree_out degree_total prop_ties_in prop_ties_out #> 1 Afghanistan 2002        81         92          173    0.5364238     0.6092715 #> 2     Albania 2002        49         46           95    0.3245033     0.3046358 #> 3     Algeria 2002        65         68          133    0.4304636     0.4503311 #> 4      Angola 2002        67         64          131    0.4437086     0.4238411 #> 5   Argentina 2002        48         48           96    0.3178808     0.3178808 #> 6     Armenia 2002        66         71          137    0.4370861     0.4701987 #>   prop_ties_total strength_sum_in strength_sum_out strength_sum_total #> 1               1            8694            10160              18854 #> 2               1             943             1022               1965 #> 3               1            1123             1205               2328 #> 4               1            1111             1311               2422 #> 5               1            1261             1427               2688 #> 6               1            2642             2665               5307 #>   strength_avg_in strength_avg_out strength_avg_total strength_std_in #> 1       57.576159        67.284768          62.430464       198.98323 #> 2        6.245033         6.768212           6.506623        21.17104 #> 3        7.437086         7.980132           7.708609        17.00179 #> 4        7.357616         8.682119           8.019868        20.18988 #> 5        8.350993         9.450331           8.900662        39.54933 #> 6       17.496689        17.649007          17.572848        62.13790 #>   strength_std_out strength_std_total strength_median_in strength_median_out #> 1        227.24232          213.11277                  1                   2 #> 2         22.27089           21.72096                  0                   0 #> 3         18.93197           17.96688                  0                   0 #> 4         24.29633           22.24310                  0                   0 #> 5         45.34294           42.44614                  0                   0 #> 6         66.88569           64.51180                  0                   0 #>   strength_median_total network_share_in network_share_out network_share_total #> 1                   1.5      0.019334694       0.022594950         0.020964822 #> 2                   0.0      0.002097149       0.002272838         0.002184994 #> 3                   0.0      0.002497454       0.002679814         0.002588634 #> 4                   0.0      0.002470767       0.002915549         0.002693158 #> 5                   0.0      0.002804354       0.003173523         0.002988938 #> 6                   0.0      0.005875577       0.005926727         0.005901152 #>   closeness_in closeness_out closeness_all  betweenness authority_score #> 1     71.13409      68.44904      78.06787 1.324503e-02      0.26866096 #> 2     42.48817      43.64733      47.16201 0.000000e+00      0.01252200 #> 3     44.78256      39.95772      47.41426 0.000000e+00      0.01406673 #> 4     51.35489      46.60123      54.85391 8.830022e-05      0.01905067 #> 5     63.91481      61.26657      69.47750 0.000000e+00      0.03580770 #> 6     65.51012      63.04273      71.46157 0.000000e+00      0.05049222 #>     hub_score max_out max_in #> 1 0.183233794    1516   1847 #> 2 0.009730031     160    157 #> 3 0.010671854      91    114 #> 4 0.011275109     147    176 #> 5 0.024732267     424    469 #> 6 0.039622725     547    609"},{"path":"https://netify-dev.github.io/netify/reference/theme_netify.html","id":null,"dir":"Reference","previous_headings":"","what":"theme_netify function — theme_netify","title":"theme_netify function — theme_netify","text":"function returns customized theme netify plots. based theme_minimal function ggplot2 package. removes axis text titles plot.","code":""},{"path":"https://netify-dev.github.io/netify/reference/theme_netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"theme_netify function — theme_netify","text":"","code":"theme_netify()"},{"path":"https://netify-dev.github.io/netify/reference/theme_netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"theme_netify function — theme_netify","text":"customized theme object netify plots.","code":""},{"path":"https://netify-dev.github.io/netify/reference/theme_netify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"theme_netify function — theme_netify","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/theme_stat_netify.html","id":null,"dir":"Reference","previous_headings":"","what":"theme_stat_netify function — theme_stat_netify","title":"theme_stat_netify function — theme_stat_netify","text":"function returns customized theme netify stat plots.","code":""},{"path":"https://netify-dev.github.io/netify/reference/theme_stat_netify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"theme_stat_netify function — theme_stat_netify","text":"","code":"theme_stat_netify()"},{"path":"https://netify-dev.github.io/netify/reference/theme_stat_netify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"theme_stat_netify function — theme_stat_netify","text":"customized theme object netify stat plots.","code":""},{"path":"https://netify-dev.github.io/netify/reference/theme_stat_netify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"theme_stat_netify function — theme_stat_netify","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/time_check.html","id":null,"dir":"Reference","previous_headings":"","what":"time_check — time_check","title":"time_check — time_check","text":"Checks make sure time field populated correctly","code":""},{"path":"https://netify-dev.github.io/netify/reference/time_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"time_check — time_check","text":"","code":"time_check(time, dyad_data)"},{"path":"https://netify-dev.github.io/netify/reference/time_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"time_check — time_check","text":"time user inputted object weight NULL default dyad_data data.frame time values located","code":""},{"path":"https://netify-dev.github.io/netify/reference/time_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"time_check — time_check","text":"returns NULL object stops process error detected","code":""},{"path":"https://netify-dev.github.io/netify/reference/time_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"time_check — time_check","text":"Ha Eun Choi, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/tmpprint.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for netify objects — tmpprint","title":"Print method for netify objects — tmpprint","text":"tmpprint takes netify object defines information displayed print.","code":""},{"path":"https://netify-dev.github.io/netify/reference/tmpprint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for netify objects — tmpprint","text":"","code":"tmpprint(x, ...)"},{"path":"https://netify-dev.github.io/netify/reference/tmpprint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for netify objects — tmpprint","text":"x object class netify, produced get_adjacency ... additional parameters used","code":""},{"path":"https://netify-dev.github.io/netify/reference/tmpprint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for netify objects — tmpprint","text":"text information network","code":""},{"path":"https://netify-dev.github.io/netify/reference/tmpprint.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for netify objects — tmpprint","text":"Ha Eun Choi, Cassy Dorff, Colin Henry, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/unique_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"unique_vector — unique_vector","title":"unique_vector — unique_vector","text":"Get unique vector multiple vector inputs","code":""},{"path":"https://netify-dev.github.io/netify/reference/unique_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"unique_vector — unique_vector","text":"","code":"unique_vector(...)"},{"path":"https://netify-dev.github.io/netify/reference/unique_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"unique_vector — unique_vector","text":"... vector inputs","code":""},{"path":"https://netify-dev.github.io/netify/reference/unique_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"unique_vector — unique_vector","text":"numeric vector","code":""},{"path":"https://netify-dev.github.io/netify/reference/unique_vector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"unique_vector — unique_vector","text":"Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/unnetify.html","id":null,"dir":"Reference","previous_headings":"","what":"unnetify — unnetify","title":"unnetify — unnetify","text":"function converts netify object associated attributes dyadic level data.frame","code":""},{"path":"https://netify-dev.github.io/netify/reference/unnetify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"unnetify — unnetify","text":"","code":"unnetify(netlet)"},{"path":"https://netify-dev.github.io/netify/reference/unnetify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"unnetify — unnetify","text":"netlet netify object","code":""},{"path":"https://netify-dev.github.io/netify/reference/unnetify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"unnetify — unnetify","text":"data.frame object","code":""},{"path":"https://netify-dev.github.io/netify/reference/unnetify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"unnetify — unnetify","text":"Cassy Dorff, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/weight_check.html","id":null,"dir":"Reference","previous_headings":"","what":"weight_check — weight_check","title":"weight_check — weight_check","text":"Checks make sure weight field populated correctly","code":""},{"path":"https://netify-dev.github.io/netify/reference/weight_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"weight_check — weight_check","text":"","code":"weight_check(weight, dyad_data)"},{"path":"https://netify-dev.github.io/netify/reference/weight_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"weight_check — weight_check","text":"weight user inputted object weight NULL default dyad_data data.frame weight values located","code":""},{"path":"https://netify-dev.github.io/netify/reference/weight_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"weight_check — weight_check","text":"returns NULL object stops process error detected","code":""},{"path":"https://netify-dev.github.io/netify/reference/weight_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"weight_check — weight_check","text":"Ha Eun Choi, Shahryar Minhas","code":""},{"path":"https://netify-dev.github.io/netify/reference/weight_string_label.html","id":null,"dir":"Reference","previous_headings":"","what":"weight_string_label — weight_string_label","title":"weight_string_label — weight_string_label","text":"Create attribute label weight based user inputs netify","code":""},{"path":"https://netify-dev.github.io/netify/reference/weight_string_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"weight_string_label — weight_string_label","text":"","code":"weight_string_label(weight, sum_dyads)"},{"path":"https://netify-dev.github.io/netify/reference/weight_string_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"weight_string_label — weight_string_label","text":"weight user input weight sum_dyads logical user input sum_dyads","code":""},{"path":"https://netify-dev.github.io/netify/reference/weight_string_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"weight_string_label — weight_string_label","text":"character string","code":""},{"path":"https://netify-dev.github.io/netify/reference/weight_string_label.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"weight_string_label — weight_string_label","text":"Shahryar Minhas","code":""}]
