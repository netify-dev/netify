// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// count_duplicate_dyads
int count_duplicate_dyads(CharacterVector actor1, CharacterVector actor2, NumericVector time);
RcppExport SEXP _netify_count_duplicate_dyads(SEXP actor1SEXP, SEXP actor2SEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type actor1(actor1SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type actor2(actor2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(count_duplicate_dyads(actor1, actor2, time));
    return rcpp_result_gen;
END_RCPP
}
// count_duplicate_dyads_indexed
int count_duplicate_dyads_indexed(CharacterVector actor1, CharacterVector actor2, NumericVector time);
RcppExport SEXP _netify_count_duplicate_dyads_indexed(SEXP actor1SEXP, SEXP actor2SEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type actor1(actor1SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type actor2(actor2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(count_duplicate_dyads_indexed(actor1, actor2, time));
    return rcpp_result_gen;
END_RCPP
}
// get_matrix
NumericMatrix get_matrix(int n_rows, int n_cols, CharacterVector actors_rows, CharacterVector actors_cols, IntegerVector matRowIndices, IntegerVector matColIndices, NumericVector value, bool symmetric, bool missing_to_zero, bool diag_to_NA);
RcppExport SEXP _netify_get_matrix(SEXP n_rowsSEXP, SEXP n_colsSEXP, SEXP actors_rowsSEXP, SEXP actors_colsSEXP, SEXP matRowIndicesSEXP, SEXP matColIndicesSEXP, SEXP valueSEXP, SEXP symmetricSEXP, SEXP missing_to_zeroSEXP, SEXP diag_to_NASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_rows(n_rowsSEXP);
    Rcpp::traits::input_parameter< int >::type n_cols(n_colsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type actors_rows(actors_rowsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type actors_cols(actors_colsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type matRowIndices(matRowIndicesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type matColIndices(matColIndicesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type value(valueSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    Rcpp::traits::input_parameter< bool >::type missing_to_zero(missing_to_zeroSEXP);
    Rcpp::traits::input_parameter< bool >::type diag_to_NA(diag_to_NASEXP);
    rcpp_result_gen = Rcpp::wrap(get_matrix(n_rows, n_cols, actors_rows, actors_cols, matRowIndices, matColIndices, value, symmetric, missing_to_zero, diag_to_NA));
    return rcpp_result_gen;
END_RCPP
}
// get_matrix_integer
IntegerMatrix get_matrix_integer(int n_rows, int n_cols, CharacterVector actors_rows, CharacterVector actors_cols, IntegerVector matRowIndices, IntegerVector matColIndices, IntegerVector value, bool symmetric, bool missing_to_zero, bool diag_to_NA);
RcppExport SEXP _netify_get_matrix_integer(SEXP n_rowsSEXP, SEXP n_colsSEXP, SEXP actors_rowsSEXP, SEXP actors_colsSEXP, SEXP matRowIndicesSEXP, SEXP matColIndicesSEXP, SEXP valueSEXP, SEXP symmetricSEXP, SEXP missing_to_zeroSEXP, SEXP diag_to_NASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_rows(n_rowsSEXP);
    Rcpp::traits::input_parameter< int >::type n_cols(n_colsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type actors_rows(actors_rowsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type actors_cols(actors_colsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type matRowIndices(matRowIndicesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type matColIndices(matColIndicesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type value(valueSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    Rcpp::traits::input_parameter< bool >::type missing_to_zero(missing_to_zeroSEXP);
    Rcpp::traits::input_parameter< bool >::type diag_to_NA(diag_to_NASEXP);
    rcpp_result_gen = Rcpp::wrap(get_matrix_integer(n_rows, n_cols, actors_rows, actors_cols, matRowIndices, matColIndices, value, symmetric, missing_to_zero, diag_to_NA));
    return rcpp_result_gen;
END_RCPP
}
// get_matrix_logical
LogicalMatrix get_matrix_logical(int n_rows, int n_cols, CharacterVector actors_rows, CharacterVector actors_cols, IntegerVector matRowIndices, IntegerVector matColIndices, LogicalVector value, bool symmetric, bool missing_to_zero, bool diag_to_NA);
RcppExport SEXP _netify_get_matrix_logical(SEXP n_rowsSEXP, SEXP n_colsSEXP, SEXP actors_rowsSEXP, SEXP actors_colsSEXP, SEXP matRowIndicesSEXP, SEXP matColIndicesSEXP, SEXP valueSEXP, SEXP symmetricSEXP, SEXP missing_to_zeroSEXP, SEXP diag_to_NASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_rows(n_rowsSEXP);
    Rcpp::traits::input_parameter< int >::type n_cols(n_colsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type actors_rows(actors_rowsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type actors_cols(actors_colsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type matRowIndices(matRowIndicesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type matColIndices(matColIndicesSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type value(valueSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    Rcpp::traits::input_parameter< bool >::type missing_to_zero(missing_to_zeroSEXP);
    Rcpp::traits::input_parameter< bool >::type diag_to_NA(diag_to_NASEXP);
    rcpp_result_gen = Rcpp::wrap(get_matrix_logical(n_rows, n_cols, actors_rows, actors_cols, matRowIndices, matColIndices, value, symmetric, missing_to_zero, diag_to_NA));
    return rcpp_result_gen;
END_RCPP
}
// get_matrix_character
CharacterMatrix get_matrix_character(int n_rows, int n_cols, CharacterVector actors_rows, CharacterVector actors_cols, IntegerVector matRowIndices, IntegerVector matColIndices, CharacterVector value, bool symmetric, bool missing_to_zero, bool diag_to_NA);
RcppExport SEXP _netify_get_matrix_character(SEXP n_rowsSEXP, SEXP n_colsSEXP, SEXP actors_rowsSEXP, SEXP actors_colsSEXP, SEXP matRowIndicesSEXP, SEXP matColIndicesSEXP, SEXP valueSEXP, SEXP symmetricSEXP, SEXP missing_to_zeroSEXP, SEXP diag_to_NASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_rows(n_rowsSEXP);
    Rcpp::traits::input_parameter< int >::type n_cols(n_colsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type actors_rows(actors_rowsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type actors_cols(actors_colsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type matRowIndices(matRowIndicesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type matColIndices(matColIndicesSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type value(valueSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    Rcpp::traits::input_parameter< bool >::type missing_to_zero(missing_to_zeroSEXP);
    Rcpp::traits::input_parameter< bool >::type diag_to_NA(diag_to_NASEXP);
    rcpp_result_gen = Rcpp::wrap(get_matrix_character(n_rows, n_cols, actors_rows, actors_cols, matRowIndices, matColIndices, value, symmetric, missing_to_zero, diag_to_NA));
    return rcpp_result_gen;
END_RCPP
}
// get_matrix_batch
List get_matrix_batch(IntegerVector n_rows_vec, IntegerVector n_cols_vec, List actors_rows_list, List actors_cols_list, List matRowIndices_list, List matColIndices_list, List value_list, bool symmetric, bool missing_to_zero, bool diag_to_NA);
RcppExport SEXP _netify_get_matrix_batch(SEXP n_rows_vecSEXP, SEXP n_cols_vecSEXP, SEXP actors_rows_listSEXP, SEXP actors_cols_listSEXP, SEXP matRowIndices_listSEXP, SEXP matColIndices_listSEXP, SEXP value_listSEXP, SEXP symmetricSEXP, SEXP missing_to_zeroSEXP, SEXP diag_to_NASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type n_rows_vec(n_rows_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n_cols_vec(n_cols_vecSEXP);
    Rcpp::traits::input_parameter< List >::type actors_rows_list(actors_rows_listSEXP);
    Rcpp::traits::input_parameter< List >::type actors_cols_list(actors_cols_listSEXP);
    Rcpp::traits::input_parameter< List >::type matRowIndices_list(matRowIndices_listSEXP);
    Rcpp::traits::input_parameter< List >::type matColIndices_list(matColIndices_listSEXP);
    Rcpp::traits::input_parameter< List >::type value_list(value_listSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    Rcpp::traits::input_parameter< bool >::type missing_to_zero(missing_to_zeroSEXP);
    Rcpp::traits::input_parameter< bool >::type diag_to_NA(diag_to_NASEXP);
    rcpp_result_gen = Rcpp::wrap(get_matrix_batch(n_rows_vec, n_cols_vec, actors_rows_list, actors_cols_list, matRowIndices_list, matColIndices_list, value_list, symmetric, missing_to_zero, diag_to_NA));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_netify_count_duplicate_dyads", (DL_FUNC) &_netify_count_duplicate_dyads, 3},
    {"_netify_count_duplicate_dyads_indexed", (DL_FUNC) &_netify_count_duplicate_dyads_indexed, 3},
    {"_netify_get_matrix", (DL_FUNC) &_netify_get_matrix, 10},
    {"_netify_get_matrix_integer", (DL_FUNC) &_netify_get_matrix_integer, 10},
    {"_netify_get_matrix_logical", (DL_FUNC) &_netify_get_matrix_logical, 10},
    {"_netify_get_matrix_character", (DL_FUNC) &_netify_get_matrix_character, 10},
    {"_netify_get_matrix_batch", (DL_FUNC) &_netify_get_matrix_batch, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_netify(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
